// Generated by @compas/code-gen

/**
 * @template T, E
 * @typedef {{ value: T, error?: never}|{ value?: never, error: E }} Either
 */

/**
 * @typedef {Record<string, any|undefined>} ValidatorErrorMap
 */

/**
 * @param {import("../common/types").CliCommandDefinitionInput|any} value
 * @returns {Either<import("../common/types").CliCommandDefinition, ValidatorErrorMap>}
 */
export function validateCliCommandDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (!/^[a-z-]+$/g.test(convertedString0)) {
            errorMap[`$.name`] = {
              key: "validator.pattern",
            };
          } else {
            result["name"] = convertedString0;
          }
        }
      }
      if (
        value["shortDescription"] === null ||
        value["shortDescription"] === undefined
      ) {
        errorMap[`$.shortDescription`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["shortDescription"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.shortDescription`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.shortDescription`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (!/^[^\n]+$/g.test(convertedString0)) {
            errorMap[`$.shortDescription`] = {
              key: "validator.pattern",
            };
          } else {
            result["shortDescription"] = convertedString0;
          }
        }
      }
      if (
        value["longDescription"] === null ||
        value["longDescription"] === undefined
      ) {
        result["longDescription"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["longDescription"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.longDescription`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["longDescription"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.longDescription`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["longDescription"] = convertedString0;
            }
          }
        }
      }
      if (value["modifiers"] === null || value["modifiers"] === undefined) {
        result["modifiers"] = {
          isDynamic: false,
          isCosmetic: false,
          isWatchable: false,
        };
      } else {
        if (
          typeof value["modifiers"] !== "object" ||
          Array.isArray(value["modifiers"])
        ) {
          errorMap[`$.modifiers`] = {
            key: "validator.object",
            value: value["modifiers"],
            foundType: typeof value["modifiers"],
          };
        } else {
          result["modifiers"] = Object.create(null);

          if (
            value["modifiers"]["isDynamic"] === null ||
            value["modifiers"]["isDynamic"] === undefined
          ) {
            result["modifiers"]["isDynamic"] = false;
          } else {
            if (
              value["modifiers"]["isDynamic"] === true ||
              value["modifiers"]["isDynamic"] === "true" ||
              value["modifiers"]["isDynamic"] === 1
            ) {
              result["modifiers"]["isDynamic"] = true;
            } else if (
              value["modifiers"]["isDynamic"] === false ||
              value["modifiers"]["isDynamic"] === "false" ||
              value["modifiers"]["isDynamic"] === 0
            ) {
              result["modifiers"]["isDynamic"] = false;
            } else {
              errorMap[`$.modifiers.isDynamic`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["modifiers"]["isCosmetic"] === null ||
            value["modifiers"]["isCosmetic"] === undefined
          ) {
            result["modifiers"]["isCosmetic"] = false;
          } else {
            if (
              value["modifiers"]["isCosmetic"] === true ||
              value["modifiers"]["isCosmetic"] === "true" ||
              value["modifiers"]["isCosmetic"] === 1
            ) {
              result["modifiers"]["isCosmetic"] = true;
            } else if (
              value["modifiers"]["isCosmetic"] === false ||
              value["modifiers"]["isCosmetic"] === "false" ||
              value["modifiers"]["isCosmetic"] === 0
            ) {
              result["modifiers"]["isCosmetic"] = false;
            } else {
              errorMap[`$.modifiers.isCosmetic`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["modifiers"]["isWatchable"] === null ||
            value["modifiers"]["isWatchable"] === undefined
          ) {
            result["modifiers"]["isWatchable"] = false;
          } else {
            if (
              value["modifiers"]["isWatchable"] === true ||
              value["modifiers"]["isWatchable"] === "true" ||
              value["modifiers"]["isWatchable"] === 1
            ) {
              result["modifiers"]["isWatchable"] = true;
            } else if (
              value["modifiers"]["isWatchable"] === false ||
              value["modifiers"]["isWatchable"] === "false" ||
              value["modifiers"]["isWatchable"] === 0
            ) {
              result["modifiers"]["isWatchable"] = false;
            } else {
              errorMap[`$.modifiers.isWatchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (
        value["dynamicValue"] === null ||
        value["dynamicValue"] === undefined
      ) {
        result["dynamicValue"] = {};
      } else {
        if (
          typeof value["dynamicValue"] !== "object" ||
          Array.isArray(value["dynamicValue"])
        ) {
          errorMap[`$.dynamicValue`] = {
            key: "validator.object",
            value: value["dynamicValue"],
            foundType: typeof value["dynamicValue"],
          };
        } else {
          result["dynamicValue"] = Object.create(null);

          if (
            value["dynamicValue"]["validator"] === null ||
            value["dynamicValue"]["validator"] === undefined
          ) {
            result["dynamicValue"]["validator"] = undefined;
          } else {
            result["dynamicValue"]["validator"] =
              value["dynamicValue"]["validator"];
          }
          if (
            value["dynamicValue"]["completions"] === null ||
            value["dynamicValue"]["completions"] === undefined
          ) {
            result["dynamicValue"]["completions"] = undefined;
          } else {
            result["dynamicValue"]["completions"] =
              value["dynamicValue"]["completions"];
          }
        }
      }
      if (
        value["watchSettings"] === null ||
        value["watchSettings"] === undefined
      ) {
        result["watchSettings"] = {
          extensions: ["js", "json"],
          ignorePatterns: [".cache", "coverage", "node_modules"],
        };
      } else {
        if (
          typeof value["watchSettings"] !== "object" ||
          Array.isArray(value["watchSettings"])
        ) {
          errorMap[`$.watchSettings`] = {
            key: "validator.object",
            value: value["watchSettings"],
            foundType: typeof value["watchSettings"],
          };
        } else {
          result["watchSettings"] = Object.create(null);

          if (
            value["watchSettings"]["extensions"] === null ||
            value["watchSettings"]["extensions"] === undefined
          ) {
            result["watchSettings"]["extensions"] = ["js", "json"];
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap1 = {};
            /** @type {any[]} */
            let intermediateResult1 = [];
            /** @type {any|any[]} */
            let intermediateValue1 = value["watchSettings"]["extensions"];

            if (!Array.isArray(intermediateValue1)) {
              intermediateValue1 = [intermediateValue1];
            }
            result["watchSettings"]["extensions"] = Array.from({
              length: intermediateValue1.length,
            });
            for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
              if (
                intermediateValue1[i1] === null ||
                intermediateValue1[i1] === undefined
              ) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString1 = intermediateValue1[i1];
                if (typeof convertedString1 !== "string") {
                  intermediateErrorMap1[`$.${i1}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString1.length < 1) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult1[i1] = convertedString1;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap1).length) {
              for (const errorKey of Object.keys(intermediateErrorMap1)) {
                errorMap[`$.watchSettings.extensions${errorKey.substring(1)}`] =
                  intermediateErrorMap1[errorKey];
              }
            } else {
              result["watchSettings"]["extensions"] = intermediateResult1;
            }
          }
          if (
            value["watchSettings"]["ignorePatterns"] === null ||
            value["watchSettings"]["ignorePatterns"] === undefined
          ) {
            result["watchSettings"]["ignorePatterns"] = [
              ".cache",
              "coverage",
              "node_modules",
            ];
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap1 = {};
            /** @type {any[]} */
            let intermediateResult1 = [];
            /** @type {any|any[]} */
            let intermediateValue1 = value["watchSettings"]["ignorePatterns"];

            if (!Array.isArray(intermediateValue1)) {
              intermediateValue1 = [intermediateValue1];
            }
            result["watchSettings"]["ignorePatterns"] = Array.from({
              length: intermediateValue1.length,
            });
            for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
              if (
                intermediateValue1[i1] === null ||
                intermediateValue1[i1] === undefined
              ) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString1 = intermediateValue1[i1];
                if (typeof convertedString1 !== "string") {
                  intermediateErrorMap1[`$.${i1}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString1.length < 1) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult1[i1] = convertedString1;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap1).length) {
              for (const errorKey of Object.keys(intermediateErrorMap1)) {
                errorMap[
                  `$.watchSettings.ignorePatterns${errorKey.substring(1)}`
                ] = intermediateErrorMap1[errorKey];
              }
            } else {
              result["watchSettings"]["ignorePatterns"] = intermediateResult1;
            }
          }
        }
      }
      if (value["subCommands"] === null || value["subCommands"] === undefined) {
        result["subCommands"] = [];
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["subCommands"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["subCommands"] = Array.from({
          length: intermediateValue1.length,
        });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateCliCommandDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.subCommands${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["subCommands"] = intermediateResult1;
        }
      }
      if (value["flags"] === null || value["flags"] === undefined) {
        result["flags"] = [];
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["flags"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["flags"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateCliFlagDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.flags${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["flags"] = intermediateResult1;
        }
      }
      if (value["executor"] === null || value["executor"] === undefined) {
        result["executor"] = undefined;
      } else {
        result["executor"] = value["executor"];
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").CliFlagDefinitionInput|any} value
 * @returns {Either<import("../common/types").CliFlagDefinition, ValidatorErrorMap>}
 */
export function validateCliFlagDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString0;
          }
        }
      }
      if (value["rawName"] === null || value["rawName"] === undefined) {
        errorMap[`$.rawName`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["rawName"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.rawName`] = {
            key: "validator.string",
          };
        } else {
          convertedString0 = convertedString0.toLowerCase();
          if (convertedString0.length < 1) {
            errorMap[`$.rawName`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (!/^--\w/g.test(convertedString0)) {
            errorMap[`$.rawName`] = {
              key: "validator.pattern",
            };
          } else {
            result["rawName"] = convertedString0;
          }
        }
      }
      if (value["description"] === null || value["description"] === undefined) {
        result["description"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["description"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.description`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["description"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.description`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (!/^[^\n]+$/g.test(convertedString0)) {
              errorMap[`$.description`] = {
                key: "validator.pattern",
              };
            } else {
              result["description"] = convertedString0;
            }
          }
        }
      }
      if (value["modifiers"] === null || value["modifiers"] === undefined) {
        result["modifiers"] = {
          isRepeatable: false,
          isRequired: false,
          isInternal: false,
        };
      } else {
        if (
          typeof value["modifiers"] !== "object" ||
          Array.isArray(value["modifiers"])
        ) {
          errorMap[`$.modifiers`] = {
            key: "validator.object",
            value: value["modifiers"],
            foundType: typeof value["modifiers"],
          };
        } else {
          result["modifiers"] = Object.create(null);

          if (
            value["modifiers"]["isRepeatable"] === null ||
            value["modifiers"]["isRepeatable"] === undefined
          ) {
            result["modifiers"]["isRepeatable"] = false;
          } else {
            if (
              value["modifiers"]["isRepeatable"] === true ||
              value["modifiers"]["isRepeatable"] === "true" ||
              value["modifiers"]["isRepeatable"] === 1
            ) {
              result["modifiers"]["isRepeatable"] = true;
            } else if (
              value["modifiers"]["isRepeatable"] === false ||
              value["modifiers"]["isRepeatable"] === "false" ||
              value["modifiers"]["isRepeatable"] === 0
            ) {
              result["modifiers"]["isRepeatable"] = false;
            } else {
              errorMap[`$.modifiers.isRepeatable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["modifiers"]["isRequired"] === null ||
            value["modifiers"]["isRequired"] === undefined
          ) {
            result["modifiers"]["isRequired"] = false;
          } else {
            if (
              value["modifiers"]["isRequired"] === true ||
              value["modifiers"]["isRequired"] === "true" ||
              value["modifiers"]["isRequired"] === 1
            ) {
              result["modifiers"]["isRequired"] = true;
            } else if (
              value["modifiers"]["isRequired"] === false ||
              value["modifiers"]["isRequired"] === "false" ||
              value["modifiers"]["isRequired"] === 0
            ) {
              result["modifiers"]["isRequired"] = false;
            } else {
              errorMap[`$.modifiers.isRequired`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["modifiers"]["isInternal"] === null ||
            value["modifiers"]["isInternal"] === undefined
          ) {
            result["modifiers"]["isInternal"] = false;
          } else {
            if (
              value["modifiers"]["isInternal"] === true ||
              value["modifiers"]["isInternal"] === "true" ||
              value["modifiers"]["isInternal"] === 1
            ) {
              result["modifiers"]["isInternal"] = true;
            } else if (
              value["modifiers"]["isInternal"] === false ||
              value["modifiers"]["isInternal"] === "false" ||
              value["modifiers"]["isInternal"] === 0
            ) {
              result["modifiers"]["isInternal"] = false;
            } else {
              errorMap[`$.modifiers.isInternal`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["value"] === null || value["value"] === undefined) {
        result["value"] = { specification: "boolean" };
      } else {
        if (
          typeof value["value"] !== "object" ||
          Array.isArray(value["value"])
        ) {
          errorMap[`$.value`] = {
            key: "validator.object",
            value: value["value"],
            foundType: typeof value["value"],
          };
        } else {
          result["value"] = Object.create(null);

          if (
            value["value"]["specification"] === null ||
            value["value"]["specification"] === undefined
          ) {
            result["value"]["specification"] = "boolean";
          } else {
            /** @type {string} */
            let convertedString0 = value["value"]["specification"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.value.specification`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["value"]["specification"] = "boolean";
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.value.specification`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString0 !== "boolean" &&
                  convertedString0 !== "number" &&
                  convertedString0 !== "string" &&
                  convertedString0 !== "booleanOrString"
                ) {
                  errorMap[`$.value.specification`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "boolean",
                      "number",
                      "string",
                      "booleanOrString",
                    ],
                    foundValue: convertedString0,
                  };
                } else {
                  result["value"]["specification"] = convertedString0;
                }
              }
            }
          }
          if (
            value["value"]["validator"] === null ||
            value["value"]["validator"] === undefined
          ) {
            result["value"]["validator"] = undefined;
          } else {
            result["value"]["validator"] = value["value"]["validator"];
          }
          if (
            value["value"]["completions"] === null ||
            value["value"]["completions"] === undefined
          ) {
            result["value"]["completions"] = undefined;
          } else {
            result["value"]["completions"] = value["value"]["completions"];
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").CliCompletion|any} value
 * @returns {Either<import("../common/types").CliCompletion, ValidatorErrorMap>}
 */
export function validateCliCompletion(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof intermediateValue2 !== "object" ||
          Array.isArray(intermediateValue2)
        ) {
          intermediateErrorMap2[`$`] = {
            key: "validator.object",
            value: intermediateValue2,
            foundType: typeof intermediateValue2,
          };
        } else {
          intermediateResult2 = Object.create(null);

          if (
            intermediateValue2["type"] === null ||
            intermediateValue2["type"] === undefined
          ) {
            intermediateErrorMap2[`$.type`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["type"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.type`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (convertedString2 !== "directory") {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.oneOf",
                  allowedValues: ["directory"],
                  foundValue: convertedString2,
                };
              } else {
                intermediateResult2["type"] = convertedString2;
              }
            }
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof intermediateValue2 !== "object" ||
          Array.isArray(intermediateValue2)
        ) {
          intermediateErrorMap2[`$`] = {
            key: "validator.object",
            value: intermediateValue2,
            foundType: typeof intermediateValue2,
          };
        } else {
          intermediateResult2 = Object.create(null);

          if (
            intermediateValue2["type"] === null ||
            intermediateValue2["type"] === undefined
          ) {
            intermediateErrorMap2[`$.type`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["type"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.type`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (convertedString2 !== "file") {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.oneOf",
                  allowedValues: ["file"],
                  foundValue: convertedString2,
                };
              } else {
                intermediateResult2["type"] = convertedString2;
              }
            }
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof intermediateValue2 !== "object" ||
          Array.isArray(intermediateValue2)
        ) {
          intermediateErrorMap2[`$`] = {
            key: "validator.object",
            value: intermediateValue2,
            foundType: typeof intermediateValue2,
          };
        } else {
          intermediateResult2 = Object.create(null);

          if (
            intermediateValue2["type"] === null ||
            intermediateValue2["type"] === undefined
          ) {
            intermediateErrorMap2[`$.type`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["type"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.type`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (convertedString2 !== "completion") {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.oneOf",
                  allowedValues: ["completion"],
                  foundValue: convertedString2,
                };
              } else {
                intermediateResult2["type"] = convertedString2;
              }
            }
          }
          if (
            intermediateValue2["name"] === null ||
            intermediateValue2["name"] === undefined
          ) {
            intermediateErrorMap2[`$.name`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["name"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.name`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$.name`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2["name"] = convertedString2;
              }
            }
          }
          if (
            intermediateValue2["description"] === null ||
            intermediateValue2["description"] === undefined
          ) {
            intermediateResult2["description"] = undefined;
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["description"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.description`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length === 0) {
                intermediateResult2["description"] = undefined;
              } else {
                if (convertedString2.length < 1) {
                  intermediateErrorMap2[`$.description`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult2["description"] = convertedString2;
                }
              }
            }
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof intermediateValue2 !== "object" ||
          Array.isArray(intermediateValue2)
        ) {
          intermediateErrorMap2[`$`] = {
            key: "validator.object",
            value: intermediateValue2,
            foundType: typeof intermediateValue2,
          };
        } else {
          intermediateResult2 = Object.create(null);

          if (
            intermediateValue2["type"] === null ||
            intermediateValue2["type"] === undefined
          ) {
            intermediateErrorMap2[`$.type`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["type"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.type`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (convertedString2 !== "value") {
                intermediateErrorMap2[`$.type`] = {
                  key: "validator.oneOf",
                  allowedValues: ["value"],
                  foundValue: convertedString2,
                };
              } else {
                intermediateResult2["type"] = convertedString2;
              }
            }
          }
          if (
            intermediateValue2["specification"] === null ||
            intermediateValue2["specification"] === undefined
          ) {
            intermediateErrorMap2[`$.specification`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["specification"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.specification`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$.specification`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString2 !== "boolean" &&
                convertedString2 !== "number" &&
                convertedString2 !== "string" &&
                convertedString2 !== "booleanOrString"
              ) {
                intermediateErrorMap2[`$.specification`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "boolean",
                    "number",
                    "string",
                    "booleanOrString",
                  ],
                  foundValue: convertedString2,
                };
              } else {
                intermediateResult2["specification"] = convertedString2;
              }
            }
          }
          if (
            intermediateValue2["description"] === null ||
            intermediateValue2["description"] === undefined
          ) {
            intermediateResult2["description"] = undefined;
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2["description"];
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$.description`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length === 0) {
                intermediateResult2["description"] = undefined;
              } else {
                if (convertedString2.length < 1) {
                  intermediateErrorMap2[`$.description`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult2["description"] = convertedString2;
                }
              }
            }
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}
