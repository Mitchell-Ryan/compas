// Generated by @compas/code-gen

import { isQueryPart } from "@compas/store";
/**
 * @template T, E
 * @typedef {{ value: T, error?: never}|{ value?: never, error: E }} Either
 */

/**
 * @typedef {Record<string, any|undefined>} ValidatorErrorMap
 */

/**
 * Postgres based file storage.
 *
 * @param {import("../common/types").StoreFileInput|any} value
 * @returns {Either<import("../common/types").StoreFile, ValidatorErrorMap>}
 */
export function validateStoreFile(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (
        value["contentLength"] === null ||
        value["contentLength"] === undefined
      ) {
        errorMap[`$.contentLength`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber0 = value["contentLength"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.contentLength`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["contentLength"] = convertedNumber0;
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        errorMap[`$.bucketName`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketName"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.bucketName`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["bucketName"] = convertedString0;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        errorMap[`$.contentType`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["contentType"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.contentType`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.contentType`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["contentType"] = convertedString0;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString0;
          }
        }
      }
      if (value["meta"] === null || value["meta"] === undefined) {
        result["meta"] = {};
      } else {
        const refResult0 = validateStoreFileMeta(value["meta"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.meta${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["meta"] = refResult0.value;
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        errorMap[`$.updatedAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * User definable, optional object to store whatever you want
 *
 * @param {import("../common/types").StoreFileMetaInput|any} value
 * @returns {Either<import("../common/types").StoreFileMeta, ValidatorErrorMap>}
 */
export function validateStoreFileMeta(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = {};
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["transforms"] === null || value["transforms"] === undefined) {
        result["transforms"] = undefined;
      } else {
        result["transforms"] = value["transforms"];
      }
      if (
        value["transformedFromOriginal"] === null ||
        value["transformedFromOriginal"] === undefined
      ) {
        result["transformedFromOriginal"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["transformedFromOriginal"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.transformedFromOriginal`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["transformedFromOriginal"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.transformedFromOriginal`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["transformedFromOriginal"] = convertedString0;
            }
          }
        }
      }
      if (
        value["placeholderImage"] === null ||
        value["placeholderImage"] === undefined
      ) {
        result["placeholderImage"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["placeholderImage"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.placeholderImage`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["placeholderImage"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.placeholderImage`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["placeholderImage"] = convertedString0;
            }
          }
        }
      }
      if (value["altText"] === null || value["altText"] === undefined) {
        result["altText"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["altText"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.altText`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["altText"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.altText`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["altText"] = convertedString0;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileWhere|any} value
 * @returns {Either<import("../common/types").StoreFileWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreFileWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreFileWhereValidated(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          )
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        result["bucketName"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketName"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketName"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketName`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketName"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameNotEqual"] === null ||
        value["bucketNameNotEqual"] === undefined
      ) {
        result["bucketNameNotEqual"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameNotEqual"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameNotEqual`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameNotEqual"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameNotEqual`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameNotEqual"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameIn"] === null ||
        value["bucketNameIn"] === undefined
      ) {
        result["bucketNameIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.bucketNameIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameIn`];
            result["bucketNameIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameIn`];
            result["bucketNameIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["bucketNameNotIn"] === null ||
        value["bucketNameNotIn"] === undefined
      ) {
        result["bucketNameNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.bucketNameNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameNotIn`];
            result["bucketNameNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameNotIn`];
            result["bucketNameNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["bucketNameLike"] === null ||
        value["bucketNameLike"] === undefined
      ) {
        result["bucketNameLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameLike"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameILike"] === null ||
        value["bucketNameILike"] === undefined
      ) {
        result["bucketNameILike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameILike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameILike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameILike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameILike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameILike"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameNotLike"] === null ||
        value["bucketNameNotLike"] === undefined
      ) {
        result["bucketNameNotLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameNotLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameNotLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameNotLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameNotLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameNotLike"] = convertedString0;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileOrderBy|any} value
 * @returns {Either<import("../common/types").StoreFileOrderByValidated, ValidatorErrorMap>}
 */
export function validateStoreFileOrderByValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "bucketName" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: ["id", "bucketName", "createdAt", "updatedAt"],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileOrderBySpec|any} value
 * @returns {Either<import("../common/types").StoreFileOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreFileOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["id"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["id"] = convertedString0;
            }
          }
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        result["bucketName"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketName"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketName"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketName`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.bucketName`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["bucketName"] = convertedString0;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["createdAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.createdAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["createdAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.createdAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.createdAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["createdAt"] = convertedString0;
            }
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["updatedAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.updatedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["updatedAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.updatedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.updatedAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["updatedAt"] = convertedString0;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileQueryBuilder|any} value
 * @returns {Either<import("../common/types").StoreFileQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreFileQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreFileWhereValidated(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreFileOrderByValidated(value["orderBy"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreFileOrderBySpec(value["orderBySpec"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "contentLength",
          "bucketName",
          "contentType",
          "name",
          "meta",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult0 = validateStoreFileReturningValidated(value["select"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileReturning|any} value
 * @returns {Either<import("../common/types").StoreFileReturningValidated, ValidatorErrorMap>}
 */
export function validateStoreFileReturningValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "contentLength" &&
                convertedString3 !== "bucketName" &&
                convertedString3 !== "contentType" &&
                convertedString3 !== "name" &&
                convertedString3 !== "meta" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "contentLength",
                    "bucketName",
                    "contentType",
                    "name",
                    "meta",
                    "createdAt",
                    "updatedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileInsert|any} value
 * @returns {Either<import("../common/types").StoreFileInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreFileInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["insert"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        if (intermediateValue1.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue1.length,
          };
        }
        result["insert"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreFileInsertPartialValidated(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["insert"] = intermediateResult1;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreFileReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileInsertPartial|any} value
 * @returns {Either<import("../common/types").StoreFileInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreFileInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (
        value["contentLength"] === null ||
        value["contentLength"] === undefined
      ) {
        errorMap[`$.contentLength`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber0 = value["contentLength"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.contentLength`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["contentLength"] = convertedNumber0;
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        errorMap[`$.bucketName`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketName"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.bucketName`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["bucketName"] = convertedString0;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        errorMap[`$.contentType`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["contentType"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.contentType`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.contentType`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["contentType"] = convertedString0;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString0;
          }
        }
      }
      if (value["meta"] === null || value["meta"] === undefined) {
        result["meta"] = {};
      } else {
        const refResult0 = validateStoreFileMeta(value["meta"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.meta${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["meta"] = refResult0.value;
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = value["createdAt"];
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = value["updatedAt"];
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileUpdate|any} value
 * @returns {Either<import("../common/types").StoreFileUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreFileUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreFileUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreFileWhereValidated(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreFileReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileUpdatePartial|any} value
 * @returns {Either<import("../common/types").StoreFileUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreFileUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (
        value["contentLength"] === null ||
        value["contentLength"] === undefined
      ) {
        result["contentLength"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.contentLength`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["contentLength"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["contentLength"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$add"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$add"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["contentLength"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$subtract"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$subtract"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["contentLength"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$multiply"] === null ||
                intermediateValue2["$multiply"] === undefined
              ) {
                intermediateErrorMap2[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$multiply"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$multiply"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["contentLength"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$divide"] === null ||
                intermediateValue2["$divide"] === undefined
              ) {
                intermediateErrorMap2[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$divide"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$divide"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult2;
          }
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        result["bucketName"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.bucketName`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketName"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length === 0) {
                intermediateResult2 = undefined;
              } else {
                if (convertedString2.length < 1) {
                  intermediateErrorMap2[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult2 = convertedString2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketName`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketName`];
            result["bucketName"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketName"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$append"] === null ||
                intermediateValue2["$append"] === undefined
              ) {
                intermediateErrorMap2[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$append"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$append"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketName`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketName`];
            result["bucketName"] = intermediateResult2;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        result["contentType"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.contentType`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["contentType"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length === 0) {
                intermediateResult2 = undefined;
              } else {
                if (convertedString2.length < 1) {
                  intermediateErrorMap2[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult2 = convertedString2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.contentType`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.contentType`];
            result["contentType"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["contentType"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$append"] === null ||
                intermediateValue2["$append"] === undefined
              ) {
                intermediateErrorMap2[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$append"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$append"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.contentType`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.contentType`];
            result["contentType"] = intermediateResult2;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.name`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["name"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length === 0) {
                intermediateResult2 = undefined;
              } else {
                if (convertedString2.length < 1) {
                  intermediateErrorMap2[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult2 = convertedString2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["name"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$append"] === null ||
                intermediateValue2["$append"] === undefined
              ) {
                intermediateErrorMap2[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$append"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$append"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult2;
          }
        }
      }
      if (value["meta"] === null || value["meta"] === undefined) {
        result["meta"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.meta`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["meta"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = {};
          } else {
            const refResult2 = validateStoreFileMeta(intermediateValue2);

            if (refResult2.error) {
              for (const errorKey of Object.keys(refResult2.error)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  refResult2.error[errorKey];
              }
            }
            intermediateResult2 = refResult2.value;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.meta`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.meta`];
            result["meta"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["meta"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$set"] === null ||
                intermediateValue2["$set"] === undefined
              ) {
                intermediateErrorMap2[`$.$set`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue2["$set"] !== "object" ||
                  Array.isArray(intermediateValue2["$set"])
                ) {
                  intermediateErrorMap2[`$.$set`] = {
                    key: "validator.object",
                    value: intermediateValue2["$set"],
                    foundType: typeof intermediateValue2["$set"],
                  };
                } else {
                  intermediateResult2["$set"] = Object.create(null);

                  if (
                    intermediateValue2["$set"]["path"] === null ||
                    intermediateValue2["$set"]["path"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$set.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap3 = {};
                    /** @type {any[]} */
                    let intermediateResult3 = [];
                    /** @type {any|any[]} */
                    let intermediateValue3 = intermediateValue2["$set"]["path"];

                    if (!Array.isArray(intermediateValue3)) {
                      intermediateValue3 = [intermediateValue3];
                    }
                    intermediateResult2["$set"]["path"] = Array.from({
                      length: intermediateValue3.length,
                    });
                    for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
                      if (
                        intermediateValue3[i3] === null ||
                        intermediateValue3[i3] === undefined
                      ) {
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        let hasAnyOfMatch3 = false;
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.anyOf",
                          errors: [],
                        };
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            let convertedNumber5 = intermediateValue5;
                            if (
                              typeof convertedNumber5 !== "number" &&
                              typeof convertedNumber5 === "string"
                            ) {
                              convertedNumber5 = Number(convertedNumber5);
                            }
                            if (
                              typeof convertedNumber5 !== "number" ||
                              isNaN(convertedNumber5) ||
                              !isFinite(convertedNumber5) ||
                              !Number.isInteger(convertedNumber5)
                            ) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.number",
                                subType: "int",
                              };
                            } else if (convertedNumber5 < -2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                minValue: -2147483647,
                              };
                            } else if (convertedNumber5 > 2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                maxValue: 2147483647,
                              };
                            } else {
                              intermediateResult5 = convertedNumber5;
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString5 = intermediateValue5;
                            if (typeof convertedString5 !== "string") {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString5.length < 1) {
                                intermediateErrorMap5[`$`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult5 = convertedString5;
                              }
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap3).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap3,
                      )) {
                        intermediateErrorMap2[
                          `$.$set.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap3[errorKey];
                      }
                    } else {
                      intermediateResult2["$set"]["path"] = intermediateResult3;
                    }
                  }
                  if (
                    intermediateValue2["$set"]["value"] === null ||
                    intermediateValue2["$set"]["value"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$set.value`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    intermediateResult2["$set"]["value"] =
                      intermediateValue2["$set"]["value"];
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.meta`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.meta`];
            result["meta"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["meta"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$remove"] === null ||
                intermediateValue2["$remove"] === undefined
              ) {
                intermediateErrorMap2[`$.$remove`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue2["$remove"] !== "object" ||
                  Array.isArray(intermediateValue2["$remove"])
                ) {
                  intermediateErrorMap2[`$.$remove`] = {
                    key: "validator.object",
                    value: intermediateValue2["$remove"],
                    foundType: typeof intermediateValue2["$remove"],
                  };
                } else {
                  intermediateResult2["$remove"] = Object.create(null);

                  if (
                    intermediateValue2["$remove"]["path"] === null ||
                    intermediateValue2["$remove"]["path"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$remove.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap3 = {};
                    /** @type {any[]} */
                    let intermediateResult3 = [];
                    /** @type {any|any[]} */
                    let intermediateValue3 =
                      intermediateValue2["$remove"]["path"];

                    if (!Array.isArray(intermediateValue3)) {
                      intermediateValue3 = [intermediateValue3];
                    }
                    intermediateResult2["$remove"]["path"] = Array.from({
                      length: intermediateValue3.length,
                    });
                    for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
                      if (
                        intermediateValue3[i3] === null ||
                        intermediateValue3[i3] === undefined
                      ) {
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        let hasAnyOfMatch3 = false;
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.anyOf",
                          errors: [],
                        };
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            let convertedNumber5 = intermediateValue5;
                            if (
                              typeof convertedNumber5 !== "number" &&
                              typeof convertedNumber5 === "string"
                            ) {
                              convertedNumber5 = Number(convertedNumber5);
                            }
                            if (
                              typeof convertedNumber5 !== "number" ||
                              isNaN(convertedNumber5) ||
                              !isFinite(convertedNumber5) ||
                              !Number.isInteger(convertedNumber5)
                            ) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.number",
                                subType: "int",
                              };
                            } else if (convertedNumber5 < -2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                minValue: -2147483647,
                              };
                            } else if (convertedNumber5 > 2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                maxValue: 2147483647,
                              };
                            } else {
                              intermediateResult5 = convertedNumber5;
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString5 = intermediateValue5;
                            if (typeof convertedString5 !== "string") {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString5.length < 1) {
                                intermediateErrorMap5[`$`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult5 = convertedString5;
                              }
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap3).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap3,
                      )) {
                        intermediateErrorMap2[
                          `$.$remove.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap3[errorKey];
                      }
                    } else {
                      intermediateResult2["$remove"]["path"] =
                        intermediateResult3;
                    }
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.meta`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.meta`];
            result["meta"] = intermediateResult2;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Postgres based job queue.
 *Use {@link queueWorkerAddJob} to insert new jobs in to the queue and {@link queueWorkerRegisterCronJobs} for all your recurring jobs.
 *Use {@link queueWorkerCreate} as a way to pick up jobs.
 *
 * @param {import("../common/types").StoreJobInput|any} value
 * @returns {Either<import("../common/types").StoreJob, ValidatorErrorMap>}
 */
export function validateStoreJob(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber0 = value["id"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.id`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["id"] = convertedNumber0;
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = false;
      } else {
        if (
          value["isComplete"] === true ||
          value["isComplete"] === "true" ||
          value["isComplete"] === 1
        ) {
          result["isComplete"] = true;
        } else if (
          value["isComplete"] === false ||
          value["isComplete"] === "false" ||
          value["isComplete"] === 0
        ) {
          result["isComplete"] = false;
        } else {
          errorMap[`$.isComplete`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["handlerTimeout"] === null ||
        value["handlerTimeout"] === undefined
      ) {
        result["handlerTimeout"] = undefined;
      } else {
        let convertedNumber0 = value["handlerTimeout"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["handlerTimeout"] = convertedNumber0;
        }
      }
      if (value["priority"] === null || value["priority"] === undefined) {
        result["priority"] = 0;
      } else {
        let convertedNumber0 = value["priority"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.priority`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.priority`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["priority"] = convertedNumber0;
        }
      }
      if (value["retryCount"] === null || value["retryCount"] === undefined) {
        result["retryCount"] = 0;
      } else {
        let convertedNumber0 = value["retryCount"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.retryCount`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["retryCount"] = convertedNumber0;
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString0;
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = new Date();
      } else {
        if (
          typeof value["scheduledAt"] === "string" ||
          typeof value["scheduledAt"] === "number"
        ) {
          result["scheduledAt"] = new Date(value["scheduledAt"]);
        } else if (
          Object.prototype.toString.call(value["scheduledAt"]) ===
          "[object Date]"
        ) {
          result["scheduledAt"] = value["scheduledAt"];
        } else {
          errorMap[`$.scheduledAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAt"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        errorMap[`$.updatedAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobWhere|any} value
 * @returns {Either<import("../common/types").StoreJobWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreJobWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreJobWhereValidated(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        let convertedNumber0 = value["id"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.id`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["id"] = convertedNumber0;
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        let convertedNumber0 = value["idNotEqual"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idNotEqual"] = convertedNumber0;
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber3 = intermediateValue3[i3];
                if (
                  typeof convertedNumber3 !== "number" &&
                  typeof convertedNumber3 === "string"
                ) {
                  convertedNumber3 = Number(convertedNumber3);
                }
                if (
                  typeof convertedNumber3 !== "number" ||
                  isNaN(convertedNumber3) ||
                  !isFinite(convertedNumber3) ||
                  !Number.isInteger(convertedNumber3)
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber3 < -2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber3 > 2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3[i3] = convertedNumber3;
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber3 = intermediateValue3[i3];
                if (
                  typeof convertedNumber3 !== "number" &&
                  typeof convertedNumber3 === "string"
                ) {
                  convertedNumber3 = Number(convertedNumber3);
                }
                if (
                  typeof convertedNumber3 !== "number" ||
                  isNaN(convertedNumber3) ||
                  !isFinite(convertedNumber3) ||
                  !Number.isInteger(convertedNumber3)
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber3 < -2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber3 > 2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3[i3] = convertedNumber3;
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["idGreaterThan"] === null ||
        value["idGreaterThan"] === undefined
      ) {
        result["idGreaterThan"] = undefined;
      } else {
        let convertedNumber0 = value["idGreaterThan"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idGreaterThan"] = convertedNumber0;
        }
      }
      if (value["idLowerThan"] === null || value["idLowerThan"] === undefined) {
        result["idLowerThan"] = undefined;
      } else {
        let convertedNumber0 = value["idLowerThan"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idLowerThan"] = convertedNumber0;
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = undefined;
      } else {
        if (
          value["isComplete"] === true ||
          value["isComplete"] === "true" ||
          value["isComplete"] === 1
        ) {
          result["isComplete"] = true;
        } else if (
          value["isComplete"] === false ||
          value["isComplete"] === "false" ||
          value["isComplete"] === 0
        ) {
          result["isComplete"] = false;
        } else {
          errorMap[`$.isComplete`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["isCompleteIsNull"] === null ||
        value["isCompleteIsNull"] === undefined
      ) {
        result["isCompleteIsNull"] = undefined;
      } else {
        if (
          value["isCompleteIsNull"] === true ||
          value["isCompleteIsNull"] === "true" ||
          value["isCompleteIsNull"] === 1
        ) {
          result["isCompleteIsNull"] = true;
        } else if (
          value["isCompleteIsNull"] === false ||
          value["isCompleteIsNull"] === "false" ||
          value["isCompleteIsNull"] === 0
        ) {
          result["isCompleteIsNull"] = false;
        } else {
          errorMap[`$.isCompleteIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["isCompleteIsNotNull"] === null ||
        value["isCompleteIsNotNull"] === undefined
      ) {
        result["isCompleteIsNotNull"] = undefined;
      } else {
        if (
          value["isCompleteIsNotNull"] === true ||
          value["isCompleteIsNotNull"] === "true" ||
          value["isCompleteIsNotNull"] === 1
        ) {
          result["isCompleteIsNotNull"] = true;
        } else if (
          value["isCompleteIsNotNull"] === false ||
          value["isCompleteIsNotNull"] === "false" ||
          value["isCompleteIsNotNull"] === 0
        ) {
          result["isCompleteIsNotNull"] = false;
        } else {
          errorMap[`$.isCompleteIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (
        value["nameNotEqual"] === null ||
        value["nameNotEqual"] === undefined
      ) {
        result["nameNotEqual"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameNotEqual"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameNotEqual`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameNotEqual"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameNotEqual`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameNotEqual"] = convertedString0;
            }
          }
        }
      }
      if (value["nameIn"] === null || value["nameIn"] === undefined) {
        result["nameIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.nameIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameIn`];
            result["nameIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameIn`];
            result["nameIn"] = intermediateResult2;
          }
        }
      }
      if (value["nameNotIn"] === null || value["nameNotIn"] === undefined) {
        result["nameNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.nameNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameNotIn`];
            result["nameNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameNotIn`];
            result["nameNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["nameLike"] === null || value["nameLike"] === undefined) {
        result["nameLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameLike"] = convertedString0;
            }
          }
        }
      }
      if (value["nameILike"] === null || value["nameILike"] === undefined) {
        result["nameILike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameILike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameILike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameILike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameILike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameILike"] = convertedString0;
            }
          }
        }
      }
      if (value["nameNotLike"] === null || value["nameNotLike"] === undefined) {
        result["nameNotLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameNotLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameNotLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameNotLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameNotLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameNotLike"] = convertedString0;
            }
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = undefined;
      } else {
        if (
          typeof value["scheduledAt"] === "string" ||
          typeof value["scheduledAt"] === "number"
        ) {
          result["scheduledAt"] = new Date(value["scheduledAt"]);
        } else if (
          Object.prototype.toString.call(value["scheduledAt"]) ===
          "[object Date]"
        ) {
          result["scheduledAt"] = value["scheduledAt"];
        } else {
          errorMap[`$.scheduledAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAt"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtNotEqual"] === null ||
        value["scheduledAtNotEqual"] === undefined
      ) {
        result["scheduledAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["scheduledAtNotEqual"] === "string" ||
          typeof value["scheduledAtNotEqual"] === "number"
        ) {
          result["scheduledAtNotEqual"] = new Date(
            value["scheduledAtNotEqual"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["scheduledAtNotEqual"] = value["scheduledAtNotEqual"];
        } else {
          errorMap[`$.scheduledAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtIn"] === null ||
        value["scheduledAtIn"] === undefined
      ) {
        result["scheduledAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.scheduledAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtIn`];
            result["scheduledAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtIn`];
            result["scheduledAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["scheduledAtNotIn"] === null ||
        value["scheduledAtNotIn"] === undefined
      ) {
        result["scheduledAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.scheduledAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtNotIn`];
            result["scheduledAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtNotIn`];
            result["scheduledAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["scheduledAtGreaterThan"] === null ||
        value["scheduledAtGreaterThan"] === undefined
      ) {
        result["scheduledAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["scheduledAtGreaterThan"] === "string" ||
          typeof value["scheduledAtGreaterThan"] === "number"
        ) {
          result["scheduledAtGreaterThan"] = new Date(
            value["scheduledAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["scheduledAtGreaterThan"] = value["scheduledAtGreaterThan"];
        } else {
          errorMap[`$.scheduledAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtLowerThan"] === null ||
        value["scheduledAtLowerThan"] === undefined
      ) {
        result["scheduledAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["scheduledAtLowerThan"] === "string" ||
          typeof value["scheduledAtLowerThan"] === "number"
        ) {
          result["scheduledAtLowerThan"] = new Date(
            value["scheduledAtLowerThan"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["scheduledAtLowerThan"] = value["scheduledAtLowerThan"];
        } else {
          errorMap[`$.scheduledAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtIsNull"] === null ||
        value["scheduledAtIsNull"] === undefined
      ) {
        result["scheduledAtIsNull"] = undefined;
      } else {
        if (
          value["scheduledAtIsNull"] === true ||
          value["scheduledAtIsNull"] === "true" ||
          value["scheduledAtIsNull"] === 1
        ) {
          result["scheduledAtIsNull"] = true;
        } else if (
          value["scheduledAtIsNull"] === false ||
          value["scheduledAtIsNull"] === "false" ||
          value["scheduledAtIsNull"] === 0
        ) {
          result["scheduledAtIsNull"] = false;
        } else {
          errorMap[`$.scheduledAtIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["scheduledAtIsNotNull"] === null ||
        value["scheduledAtIsNotNull"] === undefined
      ) {
        result["scheduledAtIsNotNull"] = undefined;
      } else {
        if (
          value["scheduledAtIsNotNull"] === true ||
          value["scheduledAtIsNotNull"] === "true" ||
          value["scheduledAtIsNotNull"] === 1
        ) {
          result["scheduledAtIsNotNull"] = true;
        } else if (
          value["scheduledAtIsNotNull"] === false ||
          value["scheduledAtIsNotNull"] === "false" ||
          value["scheduledAtIsNotNull"] === 0
        ) {
          result["scheduledAtIsNotNull"] = false;
        } else {
          errorMap[`$.scheduledAtIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobOrderBy|any} value
 * @returns {Either<import("../common/types").StoreJobOrderByValidated, ValidatorErrorMap>}
 */
export function validateStoreJobOrderByValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "isComplete" &&
                convertedString3 !== "name" &&
                convertedString3 !== "scheduledAt" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "isComplete",
                    "name",
                    "scheduledAt",
                    "createdAt",
                    "updatedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobOrderBySpec|any} value
 * @returns {Either<import("../common/types").StoreJobOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreJobOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["id"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["id"] = convertedString0;
            }
          }
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["isComplete"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.isComplete`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["isComplete"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.isComplete`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC" &&
              convertedString0 !== "ASC NULLS FIRST" &&
              convertedString0 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.isComplete`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString0,
              };
            } else {
              result["isComplete"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.name`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["scheduledAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.scheduledAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["scheduledAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.scheduledAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC" &&
              convertedString0 !== "ASC NULLS FIRST" &&
              convertedString0 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.scheduledAt`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString0,
              };
            } else {
              result["scheduledAt"] = convertedString0;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["createdAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.createdAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["createdAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.createdAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.createdAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["createdAt"] = convertedString0;
            }
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["updatedAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.updatedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["updatedAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.updatedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.updatedAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["updatedAt"] = convertedString0;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobQueryBuilder|any} value
 * @returns {Either<import("../common/types").StoreJobQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreJobQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreJobWhereValidated(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreJobOrderByValidated(value["orderBy"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreJobOrderBySpec(value["orderBySpec"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "isComplete",
          "handlerTimeout",
          "priority",
          "retryCount",
          "name",
          "scheduledAt",
          "data",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult0 = validateStoreJobReturningValidated(value["select"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobReturning|any} value
 * @returns {Either<import("../common/types").StoreJobReturningValidated, ValidatorErrorMap>}
 */
export function validateStoreJobReturningValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "isComplete" &&
                convertedString3 !== "handlerTimeout" &&
                convertedString3 !== "priority" &&
                convertedString3 !== "retryCount" &&
                convertedString3 !== "name" &&
                convertedString3 !== "scheduledAt" &&
                convertedString3 !== "data" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "isComplete",
                    "handlerTimeout",
                    "priority",
                    "retryCount",
                    "name",
                    "scheduledAt",
                    "data",
                    "createdAt",
                    "updatedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobInsert|any} value
 * @returns {Either<import("../common/types").StoreJobInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreJobInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["insert"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        if (intermediateValue1.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue1.length,
          };
        }
        result["insert"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreJobInsertPartialValidated(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["insert"] = intermediateResult1;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreJobReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobInsertPartial|any} value
 * @returns {Either<import("../common/types").StoreJobInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreJobInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        let convertedNumber0 = value["id"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.id`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["id"] = convertedNumber0;
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = false;
      } else {
        if (
          value["isComplete"] === true ||
          value["isComplete"] === "true" ||
          value["isComplete"] === 1
        ) {
          result["isComplete"] = true;
        } else if (
          value["isComplete"] === false ||
          value["isComplete"] === "false" ||
          value["isComplete"] === 0
        ) {
          result["isComplete"] = false;
        } else {
          errorMap[`$.isComplete`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["handlerTimeout"] === null ||
        value["handlerTimeout"] === undefined
      ) {
        result["handlerTimeout"] = value["handlerTimeout"];
      } else {
        let convertedNumber0 = value["handlerTimeout"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["handlerTimeout"] = convertedNumber0;
        }
      }
      if (value["priority"] === null || value["priority"] === undefined) {
        result["priority"] = 0;
      } else {
        let convertedNumber0 = value["priority"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.priority`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.priority`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["priority"] = convertedNumber0;
        }
      }
      if (value["retryCount"] === null || value["retryCount"] === undefined) {
        result["retryCount"] = 0;
      } else {
        let convertedNumber0 = value["retryCount"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.retryCount`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["retryCount"] = convertedNumber0;
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString0;
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = new Date();
      } else {
        if (
          typeof value["scheduledAt"] === "string" ||
          typeof value["scheduledAt"] === "number"
        ) {
          result["scheduledAt"] = new Date(value["scheduledAt"]);
        } else if (
          Object.prototype.toString.call(value["scheduledAt"]) ===
          "[object Date]"
        ) {
          result["scheduledAt"] = value["scheduledAt"];
        } else {
          errorMap[`$.scheduledAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAt"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = value["createdAt"];
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = value["updatedAt"];
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobUpdate|any} value
 * @returns {Either<import("../common/types").StoreJobUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreJobUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreJobUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreJobWhereValidated(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreJobReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobUpdatePartial|any} value
 * @returns {Either<import("../common/types").StoreJobUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreJobUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.isComplete`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["isComplete"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = false;
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.isComplete`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.isComplete`];
            result["isComplete"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["isComplete"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$negate"] === null ||
                intermediateValue2["$negate"] === undefined
              ) {
                intermediateErrorMap2[`$.$negate`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  intermediateValue2["$negate"] === true ||
                  intermediateValue2["$negate"] === "true" ||
                  intermediateValue2["$negate"] === 1
                ) {
                  intermediateResult2["$negate"] = true;
                } else if (
                  intermediateValue2["$negate"] === false ||
                  intermediateValue2["$negate"] === "false" ||
                  intermediateValue2["$negate"] === 0
                ) {
                  intermediateResult2["$negate"] = false;
                } else {
                  intermediateErrorMap2[`$.$negate`] = {
                    key: "validator.type",
                    expectedType: "boolean",
                  };
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.isComplete`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.isComplete`];
            result["isComplete"] = intermediateResult2;
          }
        }
      }
      if (
        value["handlerTimeout"] === null ||
        value["handlerTimeout"] === undefined
      ) {
        result["handlerTimeout"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.handlerTimeout`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["handlerTimeout"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = intermediateValue2;
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < 0) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["handlerTimeout"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$add"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$add"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["handlerTimeout"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$subtract"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$subtract"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["handlerTimeout"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$multiply"] === null ||
                intermediateValue2["$multiply"] === undefined
              ) {
                intermediateErrorMap2[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$multiply"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$multiply"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["handlerTimeout"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$divide"] === null ||
                intermediateValue2["$divide"] === undefined
              ) {
                intermediateErrorMap2[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$divide"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$divide"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult2;
          }
        }
      }
      if (value["priority"] === null || value["priority"] === undefined) {
        result["priority"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.priority`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["priority"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = 0;
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < 0) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["priority"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$add"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$add"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["priority"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$subtract"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$subtract"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["priority"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$multiply"] === null ||
                intermediateValue2["$multiply"] === undefined
              ) {
                intermediateErrorMap2[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$multiply"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$multiply"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["priority"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$divide"] === null ||
                intermediateValue2["$divide"] === undefined
              ) {
                intermediateErrorMap2[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$divide"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$divide"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult2;
          }
        }
      }
      if (value["retryCount"] === null || value["retryCount"] === undefined) {
        result["retryCount"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.retryCount`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["retryCount"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = 0;
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["retryCount"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$add"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$add"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["retryCount"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$subtract"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$subtract"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["retryCount"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$multiply"] === null ||
                intermediateValue2["$multiply"] === undefined
              ) {
                intermediateErrorMap2[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$multiply"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$multiply"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["retryCount"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$divide"] === null ||
                intermediateValue2["$divide"] === undefined
              ) {
                intermediateErrorMap2[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber2 = intermediateValue2["$divide"];
                if (
                  typeof convertedNumber2 !== "number" &&
                  typeof convertedNumber2 === "string"
                ) {
                  convertedNumber2 = Number(convertedNumber2);
                }
                if (
                  typeof convertedNumber2 !== "number" ||
                  isNaN(convertedNumber2) ||
                  !isFinite(convertedNumber2) ||
                  !Number.isInteger(convertedNumber2)
                ) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber2 < -2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber2 > 2147483647) {
                  intermediateErrorMap2[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult2["$divide"] = convertedNumber2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult2;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.name`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["name"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length === 0) {
                intermediateResult2 = undefined;
              } else {
                if (convertedString2.length < 1) {
                  intermediateErrorMap2[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult2 = convertedString2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["name"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$append"] === null ||
                intermediateValue2["$append"] === undefined
              ) {
                intermediateErrorMap2[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$append"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$append"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult2;
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.scheduledAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = new Date();
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAt`];
            result["scheduledAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAt`];
            result["scheduledAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAt`];
            result["scheduledAt"] = intermediateResult2;
          }
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.data`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["data"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = {};
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["data"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$set"] === null ||
                intermediateValue2["$set"] === undefined
              ) {
                intermediateErrorMap2[`$.$set`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue2["$set"] !== "object" ||
                  Array.isArray(intermediateValue2["$set"])
                ) {
                  intermediateErrorMap2[`$.$set`] = {
                    key: "validator.object",
                    value: intermediateValue2["$set"],
                    foundType: typeof intermediateValue2["$set"],
                  };
                } else {
                  intermediateResult2["$set"] = Object.create(null);

                  if (
                    intermediateValue2["$set"]["path"] === null ||
                    intermediateValue2["$set"]["path"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$set.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap3 = {};
                    /** @type {any[]} */
                    let intermediateResult3 = [];
                    /** @type {any|any[]} */
                    let intermediateValue3 = intermediateValue2["$set"]["path"];

                    if (!Array.isArray(intermediateValue3)) {
                      intermediateValue3 = [intermediateValue3];
                    }
                    intermediateResult2["$set"]["path"] = Array.from({
                      length: intermediateValue3.length,
                    });
                    for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
                      if (
                        intermediateValue3[i3] === null ||
                        intermediateValue3[i3] === undefined
                      ) {
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        let hasAnyOfMatch3 = false;
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.anyOf",
                          errors: [],
                        };
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            let convertedNumber5 = intermediateValue5;
                            if (
                              typeof convertedNumber5 !== "number" &&
                              typeof convertedNumber5 === "string"
                            ) {
                              convertedNumber5 = Number(convertedNumber5);
                            }
                            if (
                              typeof convertedNumber5 !== "number" ||
                              isNaN(convertedNumber5) ||
                              !isFinite(convertedNumber5) ||
                              !Number.isInteger(convertedNumber5)
                            ) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.number",
                                subType: "int",
                              };
                            } else if (convertedNumber5 < -2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                minValue: -2147483647,
                              };
                            } else if (convertedNumber5 > 2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                maxValue: 2147483647,
                              };
                            } else {
                              intermediateResult5 = convertedNumber5;
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString5 = intermediateValue5;
                            if (typeof convertedString5 !== "string") {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString5.length < 1) {
                                intermediateErrorMap5[`$`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult5 = convertedString5;
                              }
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap3).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap3,
                      )) {
                        intermediateErrorMap2[
                          `$.$set.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap3[errorKey];
                      }
                    } else {
                      intermediateResult2["$set"]["path"] = intermediateResult3;
                    }
                  }
                  if (
                    intermediateValue2["$set"]["value"] === null ||
                    intermediateValue2["$set"]["value"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$set.value`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    intermediateResult2["$set"]["value"] =
                      intermediateValue2["$set"]["value"];
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["data"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$remove"] === null ||
                intermediateValue2["$remove"] === undefined
              ) {
                intermediateErrorMap2[`$.$remove`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue2["$remove"] !== "object" ||
                  Array.isArray(intermediateValue2["$remove"])
                ) {
                  intermediateErrorMap2[`$.$remove`] = {
                    key: "validator.object",
                    value: intermediateValue2["$remove"],
                    foundType: typeof intermediateValue2["$remove"],
                  };
                } else {
                  intermediateResult2["$remove"] = Object.create(null);

                  if (
                    intermediateValue2["$remove"]["path"] === null ||
                    intermediateValue2["$remove"]["path"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$remove.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap3 = {};
                    /** @type {any[]} */
                    let intermediateResult3 = [];
                    /** @type {any|any[]} */
                    let intermediateValue3 =
                      intermediateValue2["$remove"]["path"];

                    if (!Array.isArray(intermediateValue3)) {
                      intermediateValue3 = [intermediateValue3];
                    }
                    intermediateResult2["$remove"]["path"] = Array.from({
                      length: intermediateValue3.length,
                    });
                    for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
                      if (
                        intermediateValue3[i3] === null ||
                        intermediateValue3[i3] === undefined
                      ) {
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        let hasAnyOfMatch3 = false;
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.anyOf",
                          errors: [],
                        };
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            let convertedNumber5 = intermediateValue5;
                            if (
                              typeof convertedNumber5 !== "number" &&
                              typeof convertedNumber5 === "string"
                            ) {
                              convertedNumber5 = Number(convertedNumber5);
                            }
                            if (
                              typeof convertedNumber5 !== "number" ||
                              isNaN(convertedNumber5) ||
                              !isFinite(convertedNumber5) ||
                              !Number.isInteger(convertedNumber5)
                            ) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.number",
                                subType: "int",
                              };
                            } else if (convertedNumber5 < -2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                minValue: -2147483647,
                              };
                            } else if (convertedNumber5 > 2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                maxValue: 2147483647,
                              };
                            } else {
                              intermediateResult5 = convertedNumber5;
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString5 = intermediateValue5;
                            if (typeof convertedString5 !== "string") {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString5.length < 1) {
                                intermediateErrorMap5[`$`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult5 = convertedString5;
                              }
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap3).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap3,
                      )) {
                        intermediateErrorMap2[
                          `$.$remove.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap3[errorKey];
                      }
                    } else {
                      intermediateResult2["$remove"]["path"] =
                        intermediateResult3;
                    }
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult2;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Session data store, used by 'sessionStore\*' functions.
 *
 * @param {import("../common/types").StoreSessionStoreInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStore, ValidatorErrorMap>}
 */
export function validateStoreSessionStore(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["checksum"] === null || value["checksum"] === undefined) {
        errorMap[`$.checksum`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["checksum"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.checksum`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.checksum`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["checksum"] = convertedString0;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        errorMap[`$.updatedAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreWhere|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreSessionStoreWhereValidated(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          )
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["viaAccessTokens"] === null ||
        value["viaAccessTokens"] === undefined
      ) {
        result["viaAccessTokens"] = undefined;
      } else {
        if (
          typeof value["viaAccessTokens"] !== "object" ||
          Array.isArray(value["viaAccessTokens"])
        ) {
          errorMap[`$.viaAccessTokens`] = {
            key: "validator.object",
            value: value["viaAccessTokens"],
            foundType: typeof value["viaAccessTokens"],
          };
        } else {
          result["viaAccessTokens"] = Object.create(null);

          if (
            value["viaAccessTokens"]["where"] === null ||
            value["viaAccessTokens"]["where"] === undefined
          ) {
            result["viaAccessTokens"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreTokenWhereValidated(
              value["viaAccessTokens"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaAccessTokens.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaAccessTokens"]["where"] = refResult0.value;
          }
          if (
            value["viaAccessTokens"]["limit"] === null ||
            value["viaAccessTokens"]["limit"] === undefined
          ) {
            result["viaAccessTokens"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessTokens"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessTokens.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaAccessTokens.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaAccessTokens"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaAccessTokens"]["offset"] === null ||
            value["viaAccessTokens"]["offset"] === undefined
          ) {
            result["viaAccessTokens"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessTokens"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessTokens.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaAccessTokens.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaAccessTokens"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (
        value["accessTokensNotExists"] === null ||
        value["accessTokensNotExists"] === undefined
      ) {
        result["accessTokensNotExists"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated(
          value["accessTokensNotExists"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessTokensNotExists${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessTokensNotExists"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenWhere|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreSessionStoreTokenWhereValidated(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          )
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        if (
          typeof value["session"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["session"],
          )
        ) {
          errorMap[`$.session`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["session"] = value["session"];
        }
      }
      if (
        value["sessionNotEqual"] === null ||
        value["sessionNotEqual"] === undefined
      ) {
        result["sessionNotEqual"] = undefined;
      } else {
        if (
          typeof value["sessionNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["sessionNotEqual"],
          )
        ) {
          errorMap[`$.sessionNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["sessionNotEqual"] = value["sessionNotEqual"];
        }
      }
      if (value["sessionIn"] === null || value["sessionIn"] === undefined) {
        result["sessionIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.sessionIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionIn`];
            result["sessionIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionIn`];
            result["sessionIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["sessionNotIn"] === null ||
        value["sessionNotIn"] === undefined
      ) {
        result["sessionNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.sessionNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionNotIn`];
            result["sessionNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionNotIn`];
            result["sessionNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        result["expiresAt"] = undefined;
      } else {
        if (
          typeof value["expiresAt"] === "string" ||
          typeof value["expiresAt"] === "number"
        ) {
          result["expiresAt"] = new Date(value["expiresAt"]);
        } else if (
          Object.prototype.toString.call(value["expiresAt"]) === "[object Date]"
        ) {
          result["expiresAt"] = value["expiresAt"];
        } else {
          errorMap[`$.expiresAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAt"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["expiresAtNotEqual"] === null ||
        value["expiresAtNotEqual"] === undefined
      ) {
        result["expiresAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["expiresAtNotEqual"] === "string" ||
          typeof value["expiresAtNotEqual"] === "number"
        ) {
          result["expiresAtNotEqual"] = new Date(value["expiresAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["expiresAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["expiresAtNotEqual"] = value["expiresAtNotEqual"];
        } else {
          errorMap[`$.expiresAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["expiresAtIn"] === null || value["expiresAtIn"] === undefined) {
        result["expiresAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.expiresAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtIn`];
            result["expiresAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtIn`];
            result["expiresAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["expiresAtNotIn"] === null ||
        value["expiresAtNotIn"] === undefined
      ) {
        result["expiresAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.expiresAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtNotIn`];
            result["expiresAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtNotIn`];
            result["expiresAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["expiresAtGreaterThan"] === null ||
        value["expiresAtGreaterThan"] === undefined
      ) {
        result["expiresAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["expiresAtGreaterThan"] === "string" ||
          typeof value["expiresAtGreaterThan"] === "number"
        ) {
          result["expiresAtGreaterThan"] = new Date(
            value["expiresAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["expiresAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["expiresAtGreaterThan"] = value["expiresAtGreaterThan"];
        } else {
          errorMap[`$.expiresAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["expiresAtLowerThan"] === null ||
        value["expiresAtLowerThan"] === undefined
      ) {
        result["expiresAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["expiresAtLowerThan"] === "string" ||
          typeof value["expiresAtLowerThan"] === "number"
        ) {
          result["expiresAtLowerThan"] = new Date(value["expiresAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["expiresAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["expiresAtLowerThan"] = value["expiresAtLowerThan"];
        } else {
          errorMap[`$.expiresAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        if (
          typeof value["refreshToken"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshToken"],
          )
        ) {
          errorMap[`$.refreshToken`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["refreshToken"] = value["refreshToken"];
        }
      }
      if (
        value["refreshTokenNotEqual"] === null ||
        value["refreshTokenNotEqual"] === undefined
      ) {
        result["refreshTokenNotEqual"] = undefined;
      } else {
        if (
          typeof value["refreshTokenNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshTokenNotEqual"],
          )
        ) {
          errorMap[`$.refreshTokenNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["refreshTokenNotEqual"] = value["refreshTokenNotEqual"];
        }
      }
      if (
        value["refreshTokenIn"] === null ||
        value["refreshTokenIn"] === undefined
      ) {
        result["refreshTokenIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.refreshTokenIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenIn`];
            result["refreshTokenIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenIn`];
            result["refreshTokenIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["refreshTokenNotIn"] === null ||
        value["refreshTokenNotIn"] === undefined
      ) {
        result["refreshTokenNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.refreshTokenNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenNotIn`];
            result["refreshTokenNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenNotIn`];
            result["refreshTokenNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["refreshTokenIsNull"] === null ||
        value["refreshTokenIsNull"] === undefined
      ) {
        result["refreshTokenIsNull"] = undefined;
      } else {
        if (
          value["refreshTokenIsNull"] === true ||
          value["refreshTokenIsNull"] === "true" ||
          value["refreshTokenIsNull"] === 1
        ) {
          result["refreshTokenIsNull"] = true;
        } else if (
          value["refreshTokenIsNull"] === false ||
          value["refreshTokenIsNull"] === "false" ||
          value["refreshTokenIsNull"] === 0
        ) {
          result["refreshTokenIsNull"] = false;
        } else {
          errorMap[`$.refreshTokenIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["refreshTokenIsNotNull"] === null ||
        value["refreshTokenIsNotNull"] === undefined
      ) {
        result["refreshTokenIsNotNull"] = undefined;
      } else {
        if (
          value["refreshTokenIsNotNull"] === true ||
          value["refreshTokenIsNotNull"] === "true" ||
          value["refreshTokenIsNotNull"] === 1
        ) {
          result["refreshTokenIsNotNull"] = true;
        } else if (
          value["refreshTokenIsNotNull"] === false ||
          value["refreshTokenIsNotNull"] === "false" ||
          value["refreshTokenIsNotNull"] === 0
        ) {
          result["refreshTokenIsNotNull"] = false;
        } else {
          errorMap[`$.refreshTokenIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtNotEqual"] === null ||
        value["revokedAtNotEqual"] === undefined
      ) {
        result["revokedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["revokedAtNotEqual"] === "string" ||
          typeof value["revokedAtNotEqual"] === "number"
        ) {
          result["revokedAtNotEqual"] = new Date(value["revokedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["revokedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["revokedAtNotEqual"] = value["revokedAtNotEqual"];
        } else {
          errorMap[`$.revokedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["revokedAtIn"] === null || value["revokedAtIn"] === undefined) {
        result["revokedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.revokedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtIn`];
            result["revokedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtIn`];
            result["revokedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["revokedAtNotIn"] === null ||
        value["revokedAtNotIn"] === undefined
      ) {
        result["revokedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.revokedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtNotIn`];
            result["revokedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue2)) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtNotIn`];
            result["revokedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["revokedAtGreaterThan"] === null ||
        value["revokedAtGreaterThan"] === undefined
      ) {
        result["revokedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["revokedAtGreaterThan"] === "string" ||
          typeof value["revokedAtGreaterThan"] === "number"
        ) {
          result["revokedAtGreaterThan"] = new Date(
            value["revokedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["revokedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["revokedAtGreaterThan"] = value["revokedAtGreaterThan"];
        } else {
          errorMap[`$.revokedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtLowerThan"] === null ||
        value["revokedAtLowerThan"] === undefined
      ) {
        result["revokedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["revokedAtLowerThan"] === "string" ||
          typeof value["revokedAtLowerThan"] === "number"
        ) {
          result["revokedAtLowerThan"] = new Date(value["revokedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["revokedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["revokedAtLowerThan"] = value["revokedAtLowerThan"];
        } else {
          errorMap[`$.revokedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtIsNull"] === null ||
        value["revokedAtIsNull"] === undefined
      ) {
        result["revokedAtIsNull"] = undefined;
      } else {
        if (
          value["revokedAtIsNull"] === true ||
          value["revokedAtIsNull"] === "true" ||
          value["revokedAtIsNull"] === 1
        ) {
          result["revokedAtIsNull"] = true;
        } else if (
          value["revokedAtIsNull"] === false ||
          value["revokedAtIsNull"] === "false" ||
          value["revokedAtIsNull"] === 0
        ) {
          result["revokedAtIsNull"] = false;
        } else {
          errorMap[`$.revokedAtIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["revokedAtIsNotNull"] === null ||
        value["revokedAtIsNotNull"] === undefined
      ) {
        result["revokedAtIsNotNull"] = undefined;
      } else {
        if (
          value["revokedAtIsNotNull"] === true ||
          value["revokedAtIsNotNull"] === "true" ||
          value["revokedAtIsNotNull"] === 1
        ) {
          result["revokedAtIsNotNull"] = true;
        } else if (
          value["revokedAtIsNotNull"] === false ||
          value["revokedAtIsNotNull"] === "false" ||
          value["revokedAtIsNotNull"] === 0
        ) {
          result["revokedAtIsNotNull"] = false;
        } else {
          errorMap[`$.revokedAtIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["viaRefreshToken"] === null ||
        value["viaRefreshToken"] === undefined
      ) {
        result["viaRefreshToken"] = undefined;
      } else {
        if (
          typeof value["viaRefreshToken"] !== "object" ||
          Array.isArray(value["viaRefreshToken"])
        ) {
          errorMap[`$.viaRefreshToken`] = {
            key: "validator.object",
            value: value["viaRefreshToken"],
            foundType: typeof value["viaRefreshToken"],
          };
        } else {
          result["viaRefreshToken"] = Object.create(null);

          if (
            value["viaRefreshToken"]["where"] === null ||
            value["viaRefreshToken"]["where"] === undefined
          ) {
            result["viaRefreshToken"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreTokenWhereValidated(
              value["viaRefreshToken"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaRefreshToken.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaRefreshToken"]["where"] = refResult0.value;
          }
          if (
            value["viaRefreshToken"]["limit"] === null ||
            value["viaRefreshToken"]["limit"] === undefined
          ) {
            result["viaRefreshToken"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaRefreshToken"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaRefreshToken.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaRefreshToken.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaRefreshToken"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaRefreshToken"]["offset"] === null ||
            value["viaRefreshToken"]["offset"] === undefined
          ) {
            result["viaRefreshToken"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaRefreshToken"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaRefreshToken.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaRefreshToken.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaRefreshToken"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (value["viaSession"] === null || value["viaSession"] === undefined) {
        result["viaSession"] = undefined;
      } else {
        if (
          typeof value["viaSession"] !== "object" ||
          Array.isArray(value["viaSession"])
        ) {
          errorMap[`$.viaSession`] = {
            key: "validator.object",
            value: value["viaSession"],
            foundType: typeof value["viaSession"],
          };
        } else {
          result["viaSession"] = Object.create(null);

          if (
            value["viaSession"]["where"] === null ||
            value["viaSession"]["where"] === undefined
          ) {
            result["viaSession"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreWhereValidated(
              value["viaSession"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaSession.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaSession"]["where"] = refResult0.value;
          }
          if (
            value["viaSession"]["limit"] === null ||
            value["viaSession"]["limit"] === undefined
          ) {
            result["viaSession"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaSession"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaSession.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaSession.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaSession"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaSession"]["offset"] === null ||
            value["viaSession"]["offset"] === undefined
          ) {
            result["viaSession"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaSession"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaSession.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaSession.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaSession"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (
        value["viaAccessToken"] === null ||
        value["viaAccessToken"] === undefined
      ) {
        result["viaAccessToken"] = undefined;
      } else {
        if (
          typeof value["viaAccessToken"] !== "object" ||
          Array.isArray(value["viaAccessToken"])
        ) {
          errorMap[`$.viaAccessToken`] = {
            key: "validator.object",
            value: value["viaAccessToken"],
            foundType: typeof value["viaAccessToken"],
          };
        } else {
          result["viaAccessToken"] = Object.create(null);

          if (
            value["viaAccessToken"]["where"] === null ||
            value["viaAccessToken"]["where"] === undefined
          ) {
            result["viaAccessToken"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreTokenWhereValidated(
              value["viaAccessToken"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaAccessToken.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaAccessToken"]["where"] = refResult0.value;
          }
          if (
            value["viaAccessToken"]["limit"] === null ||
            value["viaAccessToken"]["limit"] === undefined
          ) {
            result["viaAccessToken"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessToken"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessToken.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaAccessToken.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaAccessToken"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaAccessToken"]["offset"] === null ||
            value["viaAccessToken"]["offset"] === undefined
          ) {
            result["viaAccessToken"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessToken"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessToken.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaAccessToken.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaAccessToken"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (
        value["accessTokenNotExists"] === null ||
        value["accessTokenNotExists"] === undefined
      ) {
        result["accessTokenNotExists"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated(
          value["accessTokenNotExists"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessTokenNotExists${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessTokenNotExists"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreOrderBy|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreOrderByValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreOrderByValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: ["id", "createdAt", "updatedAt"],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreOrderBySpec|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["id"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["id"] = convertedString0;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["createdAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.createdAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["createdAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.createdAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.createdAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["createdAt"] = convertedString0;
            }
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["updatedAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.updatedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["updatedAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.updatedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.updatedAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["updatedAt"] = convertedString0;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreQueryBuilder|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreWhereValidated(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreOrderByValidated(
          value["orderBy"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreOrderBySpec(
          value["orderBySpec"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "checksum",
          "revokedAt",
          "data",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult0 = validateStoreSessionStoreReturningValidated(
          value["select"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
      if (
        value["accessTokens"] === null ||
        value["accessTokens"] === undefined
      ) {
        result["accessTokens"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenQueryBuilderValidated(
          value["accessTokens"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessTokens${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessTokens"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreReturning|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreReturningValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreReturningValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "checksum" &&
                convertedString3 !== "revokedAt" &&
                convertedString3 !== "data" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "checksum",
                    "revokedAt",
                    "data",
                    "createdAt",
                    "updatedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenQueryBuilder|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenOrderByValidated(
          value["orderBy"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenOrderBySpec(
          value["orderBySpec"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "session",
          "expiresAt",
          "refreshToken",
          "revokedAt",
          "createdAt",
        ];
      } else {
        const refResult0 = validateStoreSessionStoreTokenReturningValidated(
          value["select"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenQueryBuilderValidated(
          value["refreshToken"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.refreshToken${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["refreshToken"] = refResult0.value;
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreQueryBuilderValidated(
          value["session"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.session${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["session"] = refResult0.value;
      }
      if (value["accessToken"] === null || value["accessToken"] === undefined) {
        result["accessToken"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenQueryBuilderValidated(
          value["accessToken"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessToken${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessToken"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenOrderBy|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenOrderByValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenOrderByValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "session" &&
                convertedString3 !== "expiresAt" &&
                convertedString3 !== "refreshToken" &&
                convertedString3 !== "revokedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "session",
                    "expiresAt",
                    "refreshToken",
                    "revokedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenOrderBySpec|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["id"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["id"] = convertedString0;
            }
          }
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["session"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.session`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["session"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.session`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.session`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["session"] = convertedString0;
            }
          }
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        result["expiresAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["expiresAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.expiresAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["expiresAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.expiresAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC"
            ) {
              errorMap[`$.expiresAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString0,
              };
            } else {
              result["expiresAt"] = convertedString0;
            }
          }
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["refreshToken"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.refreshToken`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["refreshToken"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.refreshToken`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC" &&
              convertedString0 !== "ASC NULLS FIRST" &&
              convertedString0 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.refreshToken`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString0,
              };
            } else {
              result["refreshToken"] = convertedString0;
            }
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["revokedAt"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.revokedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["revokedAt"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.revokedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "ASC" &&
              convertedString0 !== "DESC" &&
              convertedString0 !== "ASC NULLS FIRST" &&
              convertedString0 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.revokedAt`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString0,
              };
            } else {
              result["revokedAt"] = convertedString0;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenReturning|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenReturningValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenReturningValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "session" &&
                convertedString3 !== "expiresAt" &&
                convertedString3 !== "refreshToken" &&
                convertedString3 !== "revokedAt" &&
                convertedString3 !== "createdAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "session",
                    "expiresAt",
                    "refreshToken",
                    "revokedAt",
                    "createdAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreInsert|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["insert"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        if (intermediateValue1.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue1.length,
          };
        }
        result["insert"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreSessionStoreInsertPartialValidated(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["insert"] = intermediateResult1;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreInsertPartial|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["checksum"] === null || value["checksum"] === undefined) {
        errorMap[`$.checksum`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["checksum"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.checksum`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.checksum`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["checksum"] = convertedString0;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = value["revokedAt"];
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = value["createdAt"];
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = value["updatedAt"];
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreUpdate|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreWhereValidated(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreUpdatePartial|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["checksum"] === null || value["checksum"] === undefined) {
        result["checksum"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.checksum`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["checksum"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length === 0) {
                intermediateResult2 = undefined;
              } else {
                if (convertedString2.length < 1) {
                  intermediateErrorMap2[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult2 = convertedString2;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.checksum`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.checksum`];
            result["checksum"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["checksum"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$append"] === null ||
                intermediateValue2["$append"] === undefined
              ) {
                intermediateErrorMap2[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$append"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$append"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.checksum`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.checksum`];
            result["checksum"] = intermediateResult2;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.revokedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = intermediateValue2;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult2;
          }
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.data`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["data"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = {};
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["data"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$set"] === null ||
                intermediateValue2["$set"] === undefined
              ) {
                intermediateErrorMap2[`$.$set`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue2["$set"] !== "object" ||
                  Array.isArray(intermediateValue2["$set"])
                ) {
                  intermediateErrorMap2[`$.$set`] = {
                    key: "validator.object",
                    value: intermediateValue2["$set"],
                    foundType: typeof intermediateValue2["$set"],
                  };
                } else {
                  intermediateResult2["$set"] = Object.create(null);

                  if (
                    intermediateValue2["$set"]["path"] === null ||
                    intermediateValue2["$set"]["path"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$set.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap3 = {};
                    /** @type {any[]} */
                    let intermediateResult3 = [];
                    /** @type {any|any[]} */
                    let intermediateValue3 = intermediateValue2["$set"]["path"];

                    if (!Array.isArray(intermediateValue3)) {
                      intermediateValue3 = [intermediateValue3];
                    }
                    intermediateResult2["$set"]["path"] = Array.from({
                      length: intermediateValue3.length,
                    });
                    for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
                      if (
                        intermediateValue3[i3] === null ||
                        intermediateValue3[i3] === undefined
                      ) {
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        let hasAnyOfMatch3 = false;
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.anyOf",
                          errors: [],
                        };
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            let convertedNumber5 = intermediateValue5;
                            if (
                              typeof convertedNumber5 !== "number" &&
                              typeof convertedNumber5 === "string"
                            ) {
                              convertedNumber5 = Number(convertedNumber5);
                            }
                            if (
                              typeof convertedNumber5 !== "number" ||
                              isNaN(convertedNumber5) ||
                              !isFinite(convertedNumber5) ||
                              !Number.isInteger(convertedNumber5)
                            ) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.number",
                                subType: "int",
                              };
                            } else if (convertedNumber5 < -2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                minValue: -2147483647,
                              };
                            } else if (convertedNumber5 > 2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                maxValue: 2147483647,
                              };
                            } else {
                              intermediateResult5 = convertedNumber5;
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString5 = intermediateValue5;
                            if (typeof convertedString5 !== "string") {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString5.length < 1) {
                                intermediateErrorMap5[`$`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult5 = convertedString5;
                              }
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap3).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap3,
                      )) {
                        intermediateErrorMap2[
                          `$.$set.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap3[errorKey];
                      }
                    } else {
                      intermediateResult2["$set"]["path"] = intermediateResult3;
                    }
                  }
                  if (
                    intermediateValue2["$set"]["value"] === null ||
                    intermediateValue2["$set"]["value"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$set.value`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    intermediateResult2["$set"]["value"] =
                      intermediateValue2["$set"]["value"];
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["data"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$remove"] === null ||
                intermediateValue2["$remove"] === undefined
              ) {
                intermediateErrorMap2[`$.$remove`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue2["$remove"] !== "object" ||
                  Array.isArray(intermediateValue2["$remove"])
                ) {
                  intermediateErrorMap2[`$.$remove`] = {
                    key: "validator.object",
                    value: intermediateValue2["$remove"],
                    foundType: typeof intermediateValue2["$remove"],
                  };
                } else {
                  intermediateResult2["$remove"] = Object.create(null);

                  if (
                    intermediateValue2["$remove"]["path"] === null ||
                    intermediateValue2["$remove"]["path"] === undefined
                  ) {
                    intermediateErrorMap2[`$.$remove.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap3 = {};
                    /** @type {any[]} */
                    let intermediateResult3 = [];
                    /** @type {any|any[]} */
                    let intermediateValue3 =
                      intermediateValue2["$remove"]["path"];

                    if (!Array.isArray(intermediateValue3)) {
                      intermediateValue3 = [intermediateValue3];
                    }
                    intermediateResult2["$remove"]["path"] = Array.from({
                      length: intermediateValue3.length,
                    });
                    for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
                      if (
                        intermediateValue3[i3] === null ||
                        intermediateValue3[i3] === undefined
                      ) {
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        let hasAnyOfMatch3 = false;
                        intermediateErrorMap3[`$.${i3}`] = {
                          key: "validator.anyOf",
                          errors: [],
                        };
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            let convertedNumber5 = intermediateValue5;
                            if (
                              typeof convertedNumber5 !== "number" &&
                              typeof convertedNumber5 === "string"
                            ) {
                              convertedNumber5 = Number(convertedNumber5);
                            }
                            if (
                              typeof convertedNumber5 !== "number" ||
                              isNaN(convertedNumber5) ||
                              !isFinite(convertedNumber5) ||
                              !Number.isInteger(convertedNumber5)
                            ) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.number",
                                subType: "int",
                              };
                            } else if (convertedNumber5 < -2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                minValue: -2147483647,
                              };
                            } else if (convertedNumber5 > 2147483647) {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.range",
                                maxValue: 2147483647,
                              };
                            } else {
                              intermediateResult5 = convertedNumber5;
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                        if (!hasAnyOfMatch3) {
                          /** @type {ValidatorErrorMap} */
                          const intermediateErrorMap5 = {};
                          /** @type {any} */
                          let intermediateResult5 = undefined;
                          /** @type {any} */
                          let intermediateValue5 = intermediateValue3[i3];

                          if (
                            intermediateValue5 === null ||
                            intermediateValue5 === undefined
                          ) {
                            intermediateErrorMap5[`$`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString5 = intermediateValue5;
                            if (typeof convertedString5 !== "string") {
                              intermediateErrorMap5[`$`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString5.length < 1) {
                                intermediateErrorMap5[`$`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult5 = convertedString5;
                              }
                            }
                          }
                          if (Object.keys(intermediateErrorMap5).length > 0) {
                            intermediateErrorMap3[`$.${i3}`].errors.push(
                              intermediateErrorMap5,
                            );
                          } else {
                            hasAnyOfMatch3 = true;
                            delete intermediateErrorMap3[`$.${i3}`];
                            intermediateResult3[i3] = intermediateResult5;
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap3).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap3,
                      )) {
                        intermediateErrorMap2[
                          `$.$remove.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap3[errorKey];
                      }
                    } else {
                      intermediateResult2["$remove"]["path"] =
                        intermediateResult3;
                    }
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult2;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult2;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Store all tokens that belong to a session.
 *
 * @param {import("../common/types").StoreSessionStoreTokenInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreToken, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreToken(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        errorMap[`$.session`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["session"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["session"],
          )
        ) {
          errorMap[`$.session`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["session"] = value["session"];
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        errorMap[`$.expiresAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["expiresAt"] === "string" ||
          typeof value["expiresAt"] === "number"
        ) {
          result["expiresAt"] = new Date(value["expiresAt"]);
        } else if (
          Object.prototype.toString.call(value["expiresAt"]) === "[object Date]"
        ) {
          result["expiresAt"] = value["expiresAt"];
        } else {
          errorMap[`$.expiresAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAt"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        if (
          typeof value["refreshToken"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshToken"],
          )
        ) {
          errorMap[`$.refreshToken`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["refreshToken"] = value["refreshToken"];
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenInsert|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["insert"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        if (intermediateValue1.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue1.length,
          };
        }
        result["insert"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 =
              validateStoreSessionStoreTokenInsertPartialValidated(
                intermediateValue1[i1],
              );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["insert"] = intermediateResult1;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenInsertPartial|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        errorMap[`$.session`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["session"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["session"],
          )
        ) {
          errorMap[`$.session`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["session"] = value["session"];
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        errorMap[`$.expiresAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["expiresAt"] === "string" ||
          typeof value["expiresAt"] === "number"
        ) {
          result["expiresAt"] = new Date(value["expiresAt"]);
        } else if (
          Object.prototype.toString.call(value["expiresAt"]) === "[object Date]"
        ) {
          result["expiresAt"] = value["expiresAt"];
        } else {
          errorMap[`$.expiresAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAt"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = value["refreshToken"];
      } else {
        if (
          typeof value["refreshToken"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshToken"],
          )
        ) {
          errorMap[`$.refreshToken`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["refreshToken"] = value["refreshToken"];
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = value["revokedAt"];
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenUpdate|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreTokenUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenUpdatePartial|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.session`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["session"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 !== "string" ||
              !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                intermediateValue2,
              )
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.pattern",
                patternExplanation: "UUID (v4)",
              };
            } else {
              intermediateResult2 = intermediateValue2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.session`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.session`];
            result["session"] = intermediateResult2;
          }
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        result["expiresAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.expiresAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAt`];
            result["expiresAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAt`];
            result["expiresAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAt`];
            result["expiresAt"] = intermediateResult2;
          }
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.refreshToken`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshToken"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = intermediateValue2;
          } else {
            if (
              typeof intermediateValue2 !== "string" ||
              !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                intermediateValue2,
              )
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.pattern",
                patternExplanation: "UUID (v4)",
              };
            } else {
              intermediateResult2 = intermediateValue2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshToken`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshToken`];
            result["refreshToken"] = intermediateResult2;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.revokedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = intermediateValue2;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult2;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateResult2 = undefined;
          } else {
            if (
              typeof intermediateValue2 === "string" ||
              typeof intermediateValue2 === "number"
            ) {
              intermediateResult2 = new Date(intermediateValue2);
            } else if (
              Object.prototype.toString.call(intermediateValue2) ===
              "[object Date]"
            ) {
              intermediateResult2 = intermediateValue2;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult2?.getTime() ?? undefined)) {
              intermediateErrorMap2[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$add"] === null ||
                intermediateValue2["$add"] === undefined
              ) {
                intermediateErrorMap2[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$add"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$add"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAt"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof intermediateValue2 !== "object" ||
              Array.isArray(intermediateValue2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.object",
                value: intermediateValue2,
                foundType: typeof intermediateValue2,
              };
            } else {
              intermediateResult2 = Object.create(null);

              if (
                intermediateValue2["$subtract"] === null ||
                intermediateValue2["$subtract"] === undefined
              ) {
                intermediateErrorMap2[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString2 = intermediateValue2["$subtract"];
                if (typeof convertedString2 !== "string") {
                  intermediateErrorMap2[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString2.length < 1) {
                    intermediateErrorMap2[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult2["$subtract"] = convertedString2;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult2;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileResponse|any} value
 * @returns {Either<import("../common/types").StoreFileResponse, ValidatorErrorMap>}
 */
export function validateStoreFileResponse(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString0;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        errorMap[`$.contentType`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["contentType"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.contentType`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.contentType`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["contentType"] = convertedString0;
          }
        }
      }
      if (value["url"] === null || value["url"] === undefined) {
        errorMap[`$.url`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["url"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.url`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.url`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["url"] = convertedString0;
          }
        }
      }
      if (
        value["placeholderImage"] === null ||
        value["placeholderImage"] === undefined
      ) {
        result["placeholderImage"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["placeholderImage"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.placeholderImage`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["placeholderImage"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.placeholderImage`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["placeholderImage"] = convertedString0;
            }
          }
        }
      }
      if (value["altText"] === null || value["altText"] === undefined) {
        result["altText"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["altText"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.altText`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["altText"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.altText`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["altText"] = convertedString0;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Set as '.query(T.reference("store", "imageTransformOptions"))' of routes that use 'sendTransformedImage'.
 *
 * @param {import("../common/types").StoreImageTransformOptionsInput|any} value
 * @returns {Either<import("../common/types").StoreImageTransformOptions, ValidatorErrorMap>}
 */
export function validateStoreImageTransformOptions(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["q"] === null || value["q"] === undefined) {
        result["q"] = 75;
      } else {
        let convertedNumber0 = value["q"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.q`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.q`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else if (convertedNumber0 > 100) {
          errorMap[`$.q`] = {
            key: "validator.range",
            maxValue: 100,
          };
        } else {
          result["q"] = convertedNumber0;
        }
      }
      if (value["w"] === null || value["w"] === undefined) {
        errorMap[`$.w`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber0 = value["w"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.w`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.w`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else if (convertedNumber0 > 99999) {
          errorMap[`$.w`] = {
            key: "validator.range",
            maxValue: 99999,
          };
        } else {
          result["w"] = convertedNumber0;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Set as '.query(T.reference("store", "secureImageTransformOptions"))' of routes that use 'sendTransformedImage' and 'fileVerifyAccessToken'.
 *
 * @param {import("../common/types").StoreSecureImageTransformOptionsInput|any} value
 * @returns {Either<import("../common/types").StoreSecureImageTransformOptions, ValidatorErrorMap>}
 */
export function validateStoreSecureImageTransformOptions(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["accessToken"] === null || value["accessToken"] === undefined) {
        errorMap[`$.accessToken`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["accessToken"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.accessToken`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.accessToken`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["accessToken"] = convertedString0;
          }
        }
      }
      if (value["q"] === null || value["q"] === undefined) {
        result["q"] = 75;
      } else {
        let convertedNumber0 = value["q"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.q`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.q`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else if (convertedNumber0 > 100) {
          errorMap[`$.q`] = {
            key: "validator.range",
            maxValue: 100,
          };
        } else {
          result["q"] = convertedNumber0;
        }
      }
      if (value["w"] === null || value["w"] === undefined) {
        errorMap[`$.w`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber0 = value["w"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.w`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.w`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else if (convertedNumber0 > 99999) {
          errorMap[`$.w`] = {
            key: "validator.range",
            maxValue: 99999,
          };
        } else {
          result["w"] = convertedNumber0;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileWhereInput|any} value
 * @returns {Either<import("../common/types").StoreFileWhereValidated_1, ValidatorErrorMap>}
 */
export function validateStoreFileWhereValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        result["$raw"] = value["$raw"];
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreFileWhereValidated_1(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          )
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        result["bucketName"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketName"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketName"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketName`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketName"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameNotEqual"] === null ||
        value["bucketNameNotEqual"] === undefined
      ) {
        result["bucketNameNotEqual"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameNotEqual"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameNotEqual`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameNotEqual"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameNotEqual`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameNotEqual"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameIn"] === null ||
        value["bucketNameIn"] === undefined
      ) {
        result["bucketNameIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.bucketNameIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameIn`];
            result["bucketNameIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameIn`];
            result["bucketNameIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["bucketNameNotIn"] === null ||
        value["bucketNameNotIn"] === undefined
      ) {
        result["bucketNameNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.bucketNameNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameNotIn`];
            result["bucketNameNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["bucketNameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.bucketNameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.bucketNameNotIn`];
            result["bucketNameNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["bucketNameLike"] === null ||
        value["bucketNameLike"] === undefined
      ) {
        result["bucketNameLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameLike"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameILike"] === null ||
        value["bucketNameILike"] === undefined
      ) {
        result["bucketNameILike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameILike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameILike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameILike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameILike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameILike"] = convertedString0;
            }
          }
        }
      }
      if (
        value["bucketNameNotLike"] === null ||
        value["bucketNameNotLike"] === undefined
      ) {
        result["bucketNameNotLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["bucketNameNotLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.bucketNameNotLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["bucketNameNotLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.bucketNameNotLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameNotLike"] = convertedString0;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobWhereInput|any} value
 * @returns {Either<import("../common/types").StoreJobWhereValidated_1, ValidatorErrorMap>}
 */
export function validateStoreJobWhereValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        result["$raw"] = value["$raw"];
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreJobWhereValidated_1(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        let convertedNumber0 = value["id"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.id`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["id"] = convertedNumber0;
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        let convertedNumber0 = value["idNotEqual"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idNotEqual"] = convertedNumber0;
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber3 = intermediateValue3[i3];
                if (
                  typeof convertedNumber3 !== "number" &&
                  typeof convertedNumber3 === "string"
                ) {
                  convertedNumber3 = Number(convertedNumber3);
                }
                if (
                  typeof convertedNumber3 !== "number" ||
                  isNaN(convertedNumber3) ||
                  !isFinite(convertedNumber3) ||
                  !Number.isInteger(convertedNumber3)
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber3 < -2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber3 > 2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3[i3] = convertedNumber3;
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber3 = intermediateValue3[i3];
                if (
                  typeof convertedNumber3 !== "number" &&
                  typeof convertedNumber3 === "string"
                ) {
                  convertedNumber3 = Number(convertedNumber3);
                }
                if (
                  typeof convertedNumber3 !== "number" ||
                  isNaN(convertedNumber3) ||
                  !isFinite(convertedNumber3) ||
                  !Number.isInteger(convertedNumber3)
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber3 < -2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber3 > 2147483647) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3[i3] = convertedNumber3;
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["idGreaterThan"] === null ||
        value["idGreaterThan"] === undefined
      ) {
        result["idGreaterThan"] = undefined;
      } else {
        let convertedNumber0 = value["idGreaterThan"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idGreaterThan"] = convertedNumber0;
        }
      }
      if (value["idLowerThan"] === null || value["idLowerThan"] === undefined) {
        result["idLowerThan"] = undefined;
      } else {
        let convertedNumber0 = value["idLowerThan"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < -2147483647) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber0 > 2147483647) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idLowerThan"] = convertedNumber0;
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = undefined;
      } else {
        if (
          value["isComplete"] === true ||
          value["isComplete"] === "true" ||
          value["isComplete"] === 1
        ) {
          result["isComplete"] = true;
        } else if (
          value["isComplete"] === false ||
          value["isComplete"] === "false" ||
          value["isComplete"] === 0
        ) {
          result["isComplete"] = false;
        } else {
          errorMap[`$.isComplete`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["isCompleteIsNull"] === null ||
        value["isCompleteIsNull"] === undefined
      ) {
        result["isCompleteIsNull"] = undefined;
      } else {
        if (
          value["isCompleteIsNull"] === true ||
          value["isCompleteIsNull"] === "true" ||
          value["isCompleteIsNull"] === 1
        ) {
          result["isCompleteIsNull"] = true;
        } else if (
          value["isCompleteIsNull"] === false ||
          value["isCompleteIsNull"] === "false" ||
          value["isCompleteIsNull"] === 0
        ) {
          result["isCompleteIsNull"] = false;
        } else {
          errorMap[`$.isCompleteIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["isCompleteIsNotNull"] === null ||
        value["isCompleteIsNotNull"] === undefined
      ) {
        result["isCompleteIsNotNull"] = undefined;
      } else {
        if (
          value["isCompleteIsNotNull"] === true ||
          value["isCompleteIsNotNull"] === "true" ||
          value["isCompleteIsNotNull"] === 1
        ) {
          result["isCompleteIsNotNull"] = true;
        } else if (
          value["isCompleteIsNotNull"] === false ||
          value["isCompleteIsNotNull"] === "false" ||
          value["isCompleteIsNotNull"] === 0
        ) {
          result["isCompleteIsNotNull"] = false;
        } else {
          errorMap[`$.isCompleteIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (
        value["nameNotEqual"] === null ||
        value["nameNotEqual"] === undefined
      ) {
        result["nameNotEqual"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameNotEqual"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameNotEqual`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameNotEqual"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameNotEqual`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameNotEqual"] = convertedString0;
            }
          }
        }
      }
      if (value["nameIn"] === null || value["nameIn"] === undefined) {
        result["nameIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.nameIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameIn`];
            result["nameIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameIn`];
            result["nameIn"] = intermediateResult2;
          }
        }
      }
      if (value["nameNotIn"] === null || value["nameNotIn"] === undefined) {
        result["nameNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.nameNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString3 = intermediateValue3[i3];
                if (typeof convertedString3 !== "string") {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString3.length < 1) {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3[i3] = convertedString3;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameNotIn`];
            result["nameNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["nameNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.nameNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.nameNotIn`];
            result["nameNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["nameLike"] === null || value["nameLike"] === undefined) {
        result["nameLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameLike"] = convertedString0;
            }
          }
        }
      }
      if (value["nameILike"] === null || value["nameILike"] === undefined) {
        result["nameILike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameILike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameILike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameILike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameILike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameILike"] = convertedString0;
            }
          }
        }
      }
      if (value["nameNotLike"] === null || value["nameNotLike"] === undefined) {
        result["nameNotLike"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["nameNotLike"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.nameNotLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["nameNotLike"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.nameNotLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameNotLike"] = convertedString0;
            }
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = undefined;
      } else {
        if (
          typeof value["scheduledAt"] === "string" ||
          typeof value["scheduledAt"] === "number"
        ) {
          result["scheduledAt"] = new Date(value["scheduledAt"]);
        } else if (
          Object.prototype.toString.call(value["scheduledAt"]) ===
          "[object Date]"
        ) {
          result["scheduledAt"] = value["scheduledAt"];
        } else {
          errorMap[`$.scheduledAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAt"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtNotEqual"] === null ||
        value["scheduledAtNotEqual"] === undefined
      ) {
        result["scheduledAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["scheduledAtNotEqual"] === "string" ||
          typeof value["scheduledAtNotEqual"] === "number"
        ) {
          result["scheduledAtNotEqual"] = new Date(
            value["scheduledAtNotEqual"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["scheduledAtNotEqual"] = value["scheduledAtNotEqual"];
        } else {
          errorMap[`$.scheduledAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtIn"] === null ||
        value["scheduledAtIn"] === undefined
      ) {
        result["scheduledAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.scheduledAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtIn`];
            result["scheduledAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtIn`];
            result["scheduledAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["scheduledAtNotIn"] === null ||
        value["scheduledAtNotIn"] === undefined
      ) {
        result["scheduledAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.scheduledAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtNotIn`];
            result["scheduledAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["scheduledAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.scheduledAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.scheduledAtNotIn`];
            result["scheduledAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["scheduledAtGreaterThan"] === null ||
        value["scheduledAtGreaterThan"] === undefined
      ) {
        result["scheduledAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["scheduledAtGreaterThan"] === "string" ||
          typeof value["scheduledAtGreaterThan"] === "number"
        ) {
          result["scheduledAtGreaterThan"] = new Date(
            value["scheduledAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["scheduledAtGreaterThan"] = value["scheduledAtGreaterThan"];
        } else {
          errorMap[`$.scheduledAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtLowerThan"] === null ||
        value["scheduledAtLowerThan"] === undefined
      ) {
        result["scheduledAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["scheduledAtLowerThan"] === "string" ||
          typeof value["scheduledAtLowerThan"] === "number"
        ) {
          result["scheduledAtLowerThan"] = new Date(
            value["scheduledAtLowerThan"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["scheduledAtLowerThan"] = value["scheduledAtLowerThan"];
        } else {
          errorMap[`$.scheduledAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtIsNull"] === null ||
        value["scheduledAtIsNull"] === undefined
      ) {
        result["scheduledAtIsNull"] = undefined;
      } else {
        if (
          value["scheduledAtIsNull"] === true ||
          value["scheduledAtIsNull"] === "true" ||
          value["scheduledAtIsNull"] === 1
        ) {
          result["scheduledAtIsNull"] = true;
        } else if (
          value["scheduledAtIsNull"] === false ||
          value["scheduledAtIsNull"] === "false" ||
          value["scheduledAtIsNull"] === 0
        ) {
          result["scheduledAtIsNull"] = false;
        } else {
          errorMap[`$.scheduledAtIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["scheduledAtIsNotNull"] === null ||
        value["scheduledAtIsNotNull"] === undefined
      ) {
        result["scheduledAtIsNotNull"] = undefined;
      } else {
        if (
          value["scheduledAtIsNotNull"] === true ||
          value["scheduledAtIsNotNull"] === "true" ||
          value["scheduledAtIsNotNull"] === 1
        ) {
          result["scheduledAtIsNotNull"] = true;
        } else if (
          value["scheduledAtIsNotNull"] === false ||
          value["scheduledAtIsNotNull"] === "false" ||
          value["scheduledAtIsNotNull"] === 0
        ) {
          result["scheduledAtIsNotNull"] = false;
        } else {
          errorMap[`$.scheduledAtIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreWhereInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreWhereValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreWhereValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        result["$raw"] = value["$raw"];
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreSessionStoreWhereValidated_1(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          )
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["createdAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["updatedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["viaAccessTokens"] === null ||
        value["viaAccessTokens"] === undefined
      ) {
        result["viaAccessTokens"] = undefined;
      } else {
        if (
          typeof value["viaAccessTokens"] !== "object" ||
          Array.isArray(value["viaAccessTokens"])
        ) {
          errorMap[`$.viaAccessTokens`] = {
            key: "validator.object",
            value: value["viaAccessTokens"],
            foundType: typeof value["viaAccessTokens"],
          };
        } else {
          result["viaAccessTokens"] = Object.create(null);

          if (
            value["viaAccessTokens"]["where"] === null ||
            value["viaAccessTokens"]["where"] === undefined
          ) {
            result["viaAccessTokens"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreTokenWhereValidated_1(
              value["viaAccessTokens"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaAccessTokens.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaAccessTokens"]["where"] = refResult0.value;
          }
          if (
            value["viaAccessTokens"]["limit"] === null ||
            value["viaAccessTokens"]["limit"] === undefined
          ) {
            result["viaAccessTokens"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessTokens"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessTokens.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaAccessTokens.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaAccessTokens"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaAccessTokens"]["offset"] === null ||
            value["viaAccessTokens"]["offset"] === undefined
          ) {
            result["viaAccessTokens"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessTokens"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessTokens.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaAccessTokens.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaAccessTokens"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (
        value["accessTokensNotExists"] === null ||
        value["accessTokensNotExists"] === undefined
      ) {
        result["accessTokensNotExists"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated_1(
          value["accessTokensNotExists"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessTokensNotExists${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessTokensNotExists"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenWhereInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenWhereValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenWhereValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        result["$raw"] = value["$raw"];
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["$or"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["$or"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateStoreSessionStoreTokenWhereValidated_1(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["$or"] = intermediateResult1;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          )
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          )
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult2;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["idNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        if (
          typeof value["session"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["session"],
          )
        ) {
          errorMap[`$.session`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["session"] = value["session"];
        }
      }
      if (
        value["sessionNotEqual"] === null ||
        value["sessionNotEqual"] === undefined
      ) {
        result["sessionNotEqual"] = undefined;
      } else {
        if (
          typeof value["sessionNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["sessionNotEqual"],
          )
        ) {
          errorMap[`$.sessionNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["sessionNotEqual"] = value["sessionNotEqual"];
        }
      }
      if (value["sessionIn"] === null || value["sessionIn"] === undefined) {
        result["sessionIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.sessionIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionIn`];
            result["sessionIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionIn`];
            result["sessionIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["sessionNotIn"] === null ||
        value["sessionNotIn"] === undefined
      ) {
        result["sessionNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.sessionNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionNotIn`];
            result["sessionNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["sessionNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.sessionNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.sessionNotIn`];
            result["sessionNotIn"] = intermediateResult2;
          }
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        result["expiresAt"] = undefined;
      } else {
        if (
          typeof value["expiresAt"] === "string" ||
          typeof value["expiresAt"] === "number"
        ) {
          result["expiresAt"] = new Date(value["expiresAt"]);
        } else if (
          Object.prototype.toString.call(value["expiresAt"]) === "[object Date]"
        ) {
          result["expiresAt"] = value["expiresAt"];
        } else {
          errorMap[`$.expiresAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAt"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["expiresAtNotEqual"] === null ||
        value["expiresAtNotEqual"] === undefined
      ) {
        result["expiresAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["expiresAtNotEqual"] === "string" ||
          typeof value["expiresAtNotEqual"] === "number"
        ) {
          result["expiresAtNotEqual"] = new Date(value["expiresAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["expiresAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["expiresAtNotEqual"] = value["expiresAtNotEqual"];
        } else {
          errorMap[`$.expiresAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["expiresAtIn"] === null || value["expiresAtIn"] === undefined) {
        result["expiresAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.expiresAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtIn`];
            result["expiresAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtIn`];
            result["expiresAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["expiresAtNotIn"] === null ||
        value["expiresAtNotIn"] === undefined
      ) {
        result["expiresAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.expiresAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtNotIn`];
            result["expiresAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["expiresAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.expiresAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.expiresAtNotIn`];
            result["expiresAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["expiresAtGreaterThan"] === null ||
        value["expiresAtGreaterThan"] === undefined
      ) {
        result["expiresAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["expiresAtGreaterThan"] === "string" ||
          typeof value["expiresAtGreaterThan"] === "number"
        ) {
          result["expiresAtGreaterThan"] = new Date(
            value["expiresAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["expiresAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["expiresAtGreaterThan"] = value["expiresAtGreaterThan"];
        } else {
          errorMap[`$.expiresAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["expiresAtLowerThan"] === null ||
        value["expiresAtLowerThan"] === undefined
      ) {
        result["expiresAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["expiresAtLowerThan"] === "string" ||
          typeof value["expiresAtLowerThan"] === "number"
        ) {
          result["expiresAtLowerThan"] = new Date(value["expiresAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["expiresAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["expiresAtLowerThan"] = value["expiresAtLowerThan"];
        } else {
          errorMap[`$.expiresAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        if (
          typeof value["refreshToken"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshToken"],
          )
        ) {
          errorMap[`$.refreshToken`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["refreshToken"] = value["refreshToken"];
        }
      }
      if (
        value["refreshTokenNotEqual"] === null ||
        value["refreshTokenNotEqual"] === undefined
      ) {
        result["refreshTokenNotEqual"] = undefined;
      } else {
        if (
          typeof value["refreshTokenNotEqual"] !== "string" ||
          !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshTokenNotEqual"],
          )
        ) {
          errorMap[`$.refreshTokenNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID (v4)",
          };
        } else {
          result["refreshTokenNotEqual"] = value["refreshTokenNotEqual"];
        }
      }
      if (
        value["refreshTokenIn"] === null ||
        value["refreshTokenIn"] === undefined
      ) {
        result["refreshTokenIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.refreshTokenIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenIn`];
            result["refreshTokenIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenIn`];
            result["refreshTokenIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["refreshTokenNotIn"] === null ||
        value["refreshTokenNotIn"] === undefined
      ) {
        result["refreshTokenNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.refreshTokenNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] !== "string" ||
                  !/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                    intermediateValue3[i3],
                  )
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.pattern",
                    patternExplanation: "UUID (v4)",
                  };
                } else {
                  intermediateResult3[i3] = intermediateValue3[i3];
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenNotIn`];
            result["refreshTokenNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["refreshTokenNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.refreshTokenNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.refreshTokenNotIn`];
            result["refreshTokenNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["refreshTokenIsNull"] === null ||
        value["refreshTokenIsNull"] === undefined
      ) {
        result["refreshTokenIsNull"] = undefined;
      } else {
        if (
          value["refreshTokenIsNull"] === true ||
          value["refreshTokenIsNull"] === "true" ||
          value["refreshTokenIsNull"] === 1
        ) {
          result["refreshTokenIsNull"] = true;
        } else if (
          value["refreshTokenIsNull"] === false ||
          value["refreshTokenIsNull"] === "false" ||
          value["refreshTokenIsNull"] === 0
        ) {
          result["refreshTokenIsNull"] = false;
        } else {
          errorMap[`$.refreshTokenIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["refreshTokenIsNotNull"] === null ||
        value["refreshTokenIsNotNull"] === undefined
      ) {
        result["refreshTokenIsNotNull"] = undefined;
      } else {
        if (
          value["refreshTokenIsNotNull"] === true ||
          value["refreshTokenIsNotNull"] === "true" ||
          value["refreshTokenIsNotNull"] === 1
        ) {
          result["refreshTokenIsNotNull"] = true;
        } else if (
          value["refreshTokenIsNotNull"] === false ||
          value["refreshTokenIsNotNull"] === "false" ||
          value["refreshTokenIsNotNull"] === 0
        ) {
          result["refreshTokenIsNotNull"] = false;
        } else {
          errorMap[`$.refreshTokenIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtNotEqual"] === null ||
        value["revokedAtNotEqual"] === undefined
      ) {
        result["revokedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["revokedAtNotEqual"] === "string" ||
          typeof value["revokedAtNotEqual"] === "number"
        ) {
          result["revokedAtNotEqual"] = new Date(value["revokedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["revokedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["revokedAtNotEqual"] = value["revokedAtNotEqual"];
        } else {
          errorMap[`$.revokedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["revokedAtIn"] === null || value["revokedAtIn"] === undefined) {
        result["revokedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.revokedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtIn`];
            result["revokedAtIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtIn`];
            result["revokedAtIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["revokedAtNotIn"] === null ||
        value["revokedAtNotIn"] === undefined
      ) {
        result["revokedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.revokedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = intermediateValue2;

            if (!Array.isArray(intermediateValue3)) {
              intermediateValue3 = [intermediateValue3];
            }
            intermediateResult2 = Array.from({
              length: intermediateValue3.length,
            });
            for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
              if (
                intermediateValue3[i3] === null ||
                intermediateValue3[i3] === undefined
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof intermediateValue3[i3] === "string" ||
                  typeof intermediateValue3[i3] === "number"
                ) {
                  intermediateResult3[i3] = new Date(intermediateValue3[i3]);
                } else if (
                  Object.prototype.toString.call(intermediateValue3[i3]) ===
                  "[object Date]"
                ) {
                  intermediateResult3[i3] = intermediateValue3[i3];
                } else {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.type",
                    expectedType: "Date|string",
                  };
                }
                if (isNaN(intermediateResult3[i3]?.getTime() ?? undefined)) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.date.invalid",
                  };
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                intermediateErrorMap2[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              intermediateResult2 = intermediateResult3;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtNotIn`];
            result["revokedAtNotIn"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["revokedAtNotIn"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            intermediateResult2 = intermediateValue2;
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.revokedAtNotIn`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.revokedAtNotIn`];
            result["revokedAtNotIn"] = intermediateResult2;
          }
        }
      }
      if (
        value["revokedAtGreaterThan"] === null ||
        value["revokedAtGreaterThan"] === undefined
      ) {
        result["revokedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["revokedAtGreaterThan"] === "string" ||
          typeof value["revokedAtGreaterThan"] === "number"
        ) {
          result["revokedAtGreaterThan"] = new Date(
            value["revokedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["revokedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["revokedAtGreaterThan"] = value["revokedAtGreaterThan"];
        } else {
          errorMap[`$.revokedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtLowerThan"] === null ||
        value["revokedAtLowerThan"] === undefined
      ) {
        result["revokedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["revokedAtLowerThan"] === "string" ||
          typeof value["revokedAtLowerThan"] === "number"
        ) {
          result["revokedAtLowerThan"] = new Date(value["revokedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["revokedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["revokedAtLowerThan"] = value["revokedAtLowerThan"];
        } else {
          errorMap[`$.revokedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtIsNull"] === null ||
        value["revokedAtIsNull"] === undefined
      ) {
        result["revokedAtIsNull"] = undefined;
      } else {
        if (
          value["revokedAtIsNull"] === true ||
          value["revokedAtIsNull"] === "true" ||
          value["revokedAtIsNull"] === 1
        ) {
          result["revokedAtIsNull"] = true;
        } else if (
          value["revokedAtIsNull"] === false ||
          value["revokedAtIsNull"] === "false" ||
          value["revokedAtIsNull"] === 0
        ) {
          result["revokedAtIsNull"] = false;
        } else {
          errorMap[`$.revokedAtIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["revokedAtIsNotNull"] === null ||
        value["revokedAtIsNotNull"] === undefined
      ) {
        result["revokedAtIsNotNull"] = undefined;
      } else {
        if (
          value["revokedAtIsNotNull"] === true ||
          value["revokedAtIsNotNull"] === "true" ||
          value["revokedAtIsNotNull"] === 1
        ) {
          result["revokedAtIsNotNull"] = true;
        } else if (
          value["revokedAtIsNotNull"] === false ||
          value["revokedAtIsNotNull"] === "false" ||
          value["revokedAtIsNotNull"] === 0
        ) {
          result["revokedAtIsNotNull"] = false;
        } else {
          errorMap[`$.revokedAtIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["viaRefreshToken"] === null ||
        value["viaRefreshToken"] === undefined
      ) {
        result["viaRefreshToken"] = undefined;
      } else {
        if (
          typeof value["viaRefreshToken"] !== "object" ||
          Array.isArray(value["viaRefreshToken"])
        ) {
          errorMap[`$.viaRefreshToken`] = {
            key: "validator.object",
            value: value["viaRefreshToken"],
            foundType: typeof value["viaRefreshToken"],
          };
        } else {
          result["viaRefreshToken"] = Object.create(null);

          if (
            value["viaRefreshToken"]["where"] === null ||
            value["viaRefreshToken"]["where"] === undefined
          ) {
            result["viaRefreshToken"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreTokenWhereValidated_1(
              value["viaRefreshToken"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaRefreshToken.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaRefreshToken"]["where"] = refResult0.value;
          }
          if (
            value["viaRefreshToken"]["limit"] === null ||
            value["viaRefreshToken"]["limit"] === undefined
          ) {
            result["viaRefreshToken"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaRefreshToken"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaRefreshToken.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaRefreshToken.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaRefreshToken"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaRefreshToken"]["offset"] === null ||
            value["viaRefreshToken"]["offset"] === undefined
          ) {
            result["viaRefreshToken"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaRefreshToken"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaRefreshToken.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaRefreshToken.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaRefreshToken"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (value["viaSession"] === null || value["viaSession"] === undefined) {
        result["viaSession"] = undefined;
      } else {
        if (
          typeof value["viaSession"] !== "object" ||
          Array.isArray(value["viaSession"])
        ) {
          errorMap[`$.viaSession`] = {
            key: "validator.object",
            value: value["viaSession"],
            foundType: typeof value["viaSession"],
          };
        } else {
          result["viaSession"] = Object.create(null);

          if (
            value["viaSession"]["where"] === null ||
            value["viaSession"]["where"] === undefined
          ) {
            result["viaSession"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreWhereValidated_1(
              value["viaSession"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaSession.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaSession"]["where"] = refResult0.value;
          }
          if (
            value["viaSession"]["limit"] === null ||
            value["viaSession"]["limit"] === undefined
          ) {
            result["viaSession"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaSession"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaSession.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaSession.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaSession"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaSession"]["offset"] === null ||
            value["viaSession"]["offset"] === undefined
          ) {
            result["viaSession"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaSession"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaSession.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaSession.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaSession"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (
        value["viaAccessToken"] === null ||
        value["viaAccessToken"] === undefined
      ) {
        result["viaAccessToken"] = undefined;
      } else {
        if (
          typeof value["viaAccessToken"] !== "object" ||
          Array.isArray(value["viaAccessToken"])
        ) {
          errorMap[`$.viaAccessToken`] = {
            key: "validator.object",
            value: value["viaAccessToken"],
            foundType: typeof value["viaAccessToken"],
          };
        } else {
          result["viaAccessToken"] = Object.create(null);

          if (
            value["viaAccessToken"]["where"] === null ||
            value["viaAccessToken"]["where"] === undefined
          ) {
            result["viaAccessToken"]["where"] = {};
          } else {
            const refResult0 = validateStoreSessionStoreTokenWhereValidated_1(
              value["viaAccessToken"]["where"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.viaAccessToken.where${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["viaAccessToken"]["where"] = refResult0.value;
          }
          if (
            value["viaAccessToken"]["limit"] === null ||
            value["viaAccessToken"]["limit"] === undefined
          ) {
            result["viaAccessToken"]["limit"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessToken"]["limit"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessToken.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 1) {
              errorMap[`$.viaAccessToken.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaAccessToken"]["limit"] = convertedNumber0;
            }
          }
          if (
            value["viaAccessToken"]["offset"] === null ||
            value["viaAccessToken"]["offset"] === undefined
          ) {
            result["viaAccessToken"]["offset"] = undefined;
          } else {
            let convertedNumber0 = value["viaAccessToken"]["offset"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.viaAccessToken.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < 0) {
              errorMap[`$.viaAccessToken.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaAccessToken"]["offset"] = convertedNumber0;
            }
          }
        }
      }
      if (
        value["accessTokenNotExists"] === null ||
        value["accessTokenNotExists"] === undefined
      ) {
        result["accessTokenNotExists"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated_1(
          value["accessTokenNotExists"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessTokenNotExists${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessTokenNotExists"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileUpdateInput|any} value
 * @returns {Either<import("../common/types").StoreFileUpdateValidated_1, ValidatorErrorMap>}
 */
export function validateStoreFileUpdateValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreFileUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreFileWhereValidated_1(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreFileReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobUpdateInput|any} value
 * @returns {Either<import("../common/types").StoreJobUpdateValidated_1, ValidatorErrorMap>}
 */
export function validateStoreJobUpdateValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreJobUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreJobWhereValidated_1(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreJobReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreUpdateInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreUpdateValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreUpdateValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreWhereValidated_1(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenUpdateInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenUpdateValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenUpdateValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreTokenUpdatePartialValidated(
          value["update"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["update"] = refResult0.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated_1(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenReturningValidated(
          value["returning"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["returning"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileOrderByInput|any} value
 * @returns {Either<import("../common/types").StoreFileOrderByValidated_1, ValidatorErrorMap>}
 */
export function validateStoreFileOrderByValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        intermediateResult2 = intermediateValue2;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "bucketName" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: ["id", "bucketName", "createdAt", "updatedAt"],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobOrderByInput|any} value
 * @returns {Either<import("../common/types").StoreJobOrderByValidated_1, ValidatorErrorMap>}
 */
export function validateStoreJobOrderByValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        intermediateResult2 = intermediateValue2;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "isComplete" &&
                convertedString3 !== "name" &&
                convertedString3 !== "scheduledAt" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "isComplete",
                    "name",
                    "scheduledAt",
                    "createdAt",
                    "updatedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreOrderByInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreOrderByValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreOrderByValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        intermediateResult2 = intermediateValue2;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "createdAt" &&
                convertedString3 !== "updatedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: ["id", "createdAt", "updatedAt"],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenOrderByInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenOrderByValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenOrderByValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        intermediateResult2 = intermediateValue2;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateValue3 = [intermediateValue3];
        }
        intermediateResult2 = Array.from({ length: intermediateValue3.length });
        for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
          if (
            intermediateValue3[i3] === null ||
            intermediateValue3[i3] === undefined
          ) {
            intermediateErrorMap3[`$.${i3}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString3 = intermediateValue3[i3];
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length < 1) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (
                convertedString3 !== "id" &&
                convertedString3 !== "session" &&
                convertedString3 !== "expiresAt" &&
                convertedString3 !== "refreshToken" &&
                convertedString3 !== "revokedAt"
              ) {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.oneOf",
                  allowedValues: [
                    "id",
                    "session",
                    "expiresAt",
                    "refreshToken",
                    "revokedAt",
                  ],
                  foundValue: convertedString3,
                };
              } else {
                intermediateResult3[i3] = convertedString3;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreFileQueryBuilderInput|any} value
 * @returns {Either<import("../common/types").StoreFileQueryBuilderValidated_1, ValidatorErrorMap>}
 */
export function validateStoreFileQueryBuilderValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreFileWhereValidated_1(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreFileOrderByValidated_1(
          value["orderBy"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreFileOrderBySpec(value["orderBySpec"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "contentLength",
          "bucketName",
          "contentType",
          "name",
          "meta",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult0 = validateStoreFileReturningValidated(value["select"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreJobQueryBuilderInput|any} value
 * @returns {Either<import("../common/types").StoreJobQueryBuilderValidated_1, ValidatorErrorMap>}
 */
export function validateStoreJobQueryBuilderValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreJobWhereValidated_1(value["where"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreJobOrderByValidated_1(value["orderBy"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreJobOrderBySpec(value["orderBySpec"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "isComplete",
          "handlerTimeout",
          "priority",
          "retryCount",
          "name",
          "scheduledAt",
          "data",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult0 = validateStoreJobReturningValidated(value["select"]);

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreQueryBuilderInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreQueryBuilderValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreQueryBuilderValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreWhereValidated_1(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreOrderByValidated_1(
          value["orderBy"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreOrderBySpec(
          value["orderBySpec"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "checksum",
          "revokedAt",
          "data",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult0 = validateStoreSessionStoreReturningValidated(
          value["select"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
      if (
        value["accessTokens"] === null ||
        value["accessTokens"] === undefined
      ) {
        result["accessTokens"] = undefined;
      } else {
        const refResult0 =
          validateStoreSessionStoreTokenQueryBuilderValidated_1(
            value["accessTokens"],
          );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessTokens${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessTokens"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").StoreSessionStoreTokenQueryBuilderInput|any} value
 * @returns {Either<import("../common/types").StoreSessionStoreTokenQueryBuilderValidated_1, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenQueryBuilderValidated_1(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenWhereValidated_1(
          value["where"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["where"] = refResult0.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenOrderByValidated_1(
          value["orderBy"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBy"] = refResult0.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreTokenOrderBySpec(
          value["orderBySpec"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult0.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber0 = value["limit"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber0;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber0 = value["offset"];
        if (
          typeof convertedNumber0 !== "number" &&
          typeof convertedNumber0 === "string"
        ) {
          convertedNumber0 = Number(convertedNumber0);
        }
        if (
          typeof convertedNumber0 !== "number" ||
          isNaN(convertedNumber0) ||
          !isFinite(convertedNumber0) ||
          !Number.isInteger(convertedNumber0)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber0 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber0;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "session",
          "expiresAt",
          "refreshToken",
          "revokedAt",
          "createdAt",
        ];
      } else {
        const refResult0 = validateStoreSessionStoreTokenReturningValidated(
          value["select"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["select"] = refResult0.value;
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        const refResult0 =
          validateStoreSessionStoreTokenQueryBuilderValidated_1(
            value["refreshToken"],
          );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.refreshToken${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["refreshToken"] = refResult0.value;
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        const refResult0 = validateStoreSessionStoreQueryBuilderValidated_1(
          value["session"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.session${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["session"] = refResult0.value;
      }
      if (value["accessToken"] === null || value["accessToken"] === undefined) {
        result["accessToken"] = undefined;
      } else {
        const refResult0 =
          validateStoreSessionStoreTokenQueryBuilderValidated_1(
            value["accessToken"],
          );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.accessToken${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["accessToken"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}
