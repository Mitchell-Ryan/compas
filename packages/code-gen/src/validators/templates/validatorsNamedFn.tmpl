{{= validatorsAnonFn(validator) }}

/**
 * {{= docs }}
 * @typedef { {{= validatorsJsDoc(validator).trim() }} } {{= typeName }}
 */

/**
 * {{= docs }}
 * @param {*} value
 * @returns { {{= typeName }} }
 */
export const {{= validatorName }} = value => {
 let result = value;

 {{ const preValidate = quote(preValidateHook); }}
 {{ const postValidate = quote(postValidateHook); }}
 if ({{= preValidate }} in validatorHooks) {
    result = validatorHooks[{{= preValidate }}](result);
 }

 result = {{= validator.functionName }}(result, "$");

 if ({{= postValidate }} in validatorHooks) {
    return validatorHooks[{{= postValidate }}](result);
 } else {
   return result;
 }
};
