import { AppError } from "@compas/stdlib";
import { fileFormatInlineComment } from "./format.js";

/**
 * Represent a work in progress generated file.
 * We try to keep the options as flat and explicit as possible. All options are required
 * and have defaults that align more with JavaScript like languages.
 *
 * @typedef {object} GenerateFile
 *
 * @property {string} contents The file contents the final file always has a trailing
 *   newline, and optionally an initial comment added via
 *   {@link GenerateFile.addGeneratedByComment}.
 *
 * @property {boolean} addGeneratedByComment Determine if the file should contain an
 *   initial 'Generated by \@compas/code-gen' comment. Defaults to 'true'.
 *
 * @property {number} indentationLevel The indentation level on which new lines are
 *   added. Repeats the {@link GenerateFile.indentationValue} when starting a newline.
 * @property {string} indentationValue The indentation value used. Defaults to 2 spaces.
 *
 * @property {string} inlineCommentPrefix Supported inline comment styles. Defaults
 *   to '// '. If your file format does not support inline comments, you should
 *   make sure that no comment creation function is called.
 *
 * @property {{
 *   hasIndent: boolean
 * }} currentLine Information about the current line.
 */

/**
 * @typedef {Map<string, GenerateFile>} GenerateFileMap
 */

/**
 * Use this constant to reset {@link GenerateFile.indentationLevel} via
 * {@link fileContextSetIndent}
 *
 * @type {number}
 */
export const FILE_INDENT_RESET = Number.MIN_SAFE_INTEGER;

/**
 * Create a generic file, most options have defaults that work for JavaScript style
 * languages. Most options can be overwritten by custom file implementations.
 *
 * @param {import("../generate").GenerateContext} generateContext
 * @param {string} relativePath
 * @param {Partial<GenerateFile>} options
 * @returns {GenerateFile}
 */
export function fileContextCreateGeneric(
  generateContext,
  relativePath,
  options,
) {
  /** @type {GenerateFile} */
  const file = {
    addGeneratedByComment: true,

    indentationLevel: 0,
    indentationValue: "  ",

    inlineCommentPrefix: "// ",

    ...options,

    // Always start with empty contents
    contents: "",

    currentLine: {
      hasIndent: false,
    },
  };

  generateContext.files.set(relativePath, file);

  return file;
}

/**
 * Get a file by relative path from the context
 *
 * @param {import("../generate").GenerateContext} generateContext
 * @param {string} relativePath
 * @returns {GenerateFile}
 */
export function fileContextGet(generateContext, relativePath) {
  const file = generateContext.files.get(relativePath);

  if (!file) {
    throw AppError.serverError({
      message: `Could not resolve a file for '${relativePath}'. Make sure that it is created.`,
    });
  }

  return file;
}

/**
 * Set the indentation level of the file.
 * A positive `delta` adds the `delta` to the {@link GenerateFile.indentationLevel}. A
 * negative `delta` subtracts from the {@link GenerateFile.indentationLevel}.
 *
 * To reset the {@link GenerateFile.indentationLevel} use {@link FILE_INDENT_RESET} as
 * the `delta`
 *
 * @param {GenerateFile} file
 * @param {number} delta
 */
export function fileContextSetIndent(file, delta) {
  file.indentationLevel = Math.max(0, file.indentationLevel + delta);
}

/**
 * Convert files from the context to output files.
 *
 * @param {import("../generate").GenerateContext} generateContext
 * @returns {import("../generate").OutputFile[]}
 */
export function fileContextConvertToOutputFiles(generateContext) {
  /** @type {import("../generate").OutputFile[]} */
  const result = [];

  for (const [relativePath, file] of generateContext.files.entries()) {
    result.push({
      relativePath,
      contents: fileContextFinalizeGenerateFile(file),
    });
  }

  return result;
}

/**
 * Add {@link GenerateFile.addGeneratedByComment} if necessary, and return the file with
 * newline at the end.
 *
 * @param {GenerateFile} generateFile
 * @returns {string}
 */
export function fileContextFinalizeGenerateFile(generateFile) {
  let generatedByComment = "";

  if (generateFile.addGeneratedByComment) {
    generatedByComment = `${fileFormatInlineComment(
      generateFile,
      "Generated by @compas/code-gen",
    )}\n\n`;
  }

  return `${generatedByComment}${generateFile.contents}\n`;
}
