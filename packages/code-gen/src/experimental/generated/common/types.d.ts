// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

export type ExperimentalBooleanDefinition = {
  type: "boolean";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: { convert: boolean; allowNull: boolean };
  oneOf?: undefined | boolean;
};
export type ExperimentalDateDefinition = {
  type: "date";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: {
    allowNull: boolean;
    min?: undefined | Date;
    max?: undefined | Date;
    inFuture?: undefined | boolean;
    inPast?: undefined | boolean;
  };
  specifier?: undefined | "dateOnly" | "timeOnly";
};
export type ExperimentalGenerateOptions = {
  targetLanguage: "js" | "ts";
  targetRuntime?: undefined | "node.js" | "browser" | "react-native";
  outputDirectory?: undefined | string;
  generators: {
    structure?: undefined | {};
    openApi?:
      | undefined
      | {
          openApiExtensions?: undefined | any;
          openApiRouteExtensions?: undefined | any;
        };
    router?: undefined | { targetLibrary: "koa"; exposeApiStructure: boolean };
    database?: undefined | { targetDialect: "postgresql" };
    validators?: undefined | { includeBaseTypes: boolean };
    apiClient?:
      | undefined
      | {
          targetLibrary: "axios";
          validateResponses: boolean;
          globalClient: boolean;
          includeWrapper?: undefined | "react-query";
        };
    types?:
      | undefined
      | {
          useGlobalTypes: boolean;
          useGlobalCompasTypes: boolean;
          generateDeduplicatedTypes: boolean;
          useDeduplicatedTypesPath?: undefined | string;
        };
  };
};
export type ExperimentalNamePart = string;
export type ExperimentalNamedTypeDefinition =
  | ExperimentalBooleanDefinition
  | ExperimentalDateDefinition
  | ExperimentalNumberDefinition
  | ExperimentalObjectDefinition
  | ExperimentalStringDefinition
  | ExperimentalUuidDefinition;
export type ExperimentalNumberDefinition = {
  type: "number";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: {
    convert: boolean;
    floatingPoint: boolean;
    min?: undefined | number;
    max?: undefined | number;
    allowNull: boolean;
  };
  oneOf?: undefined | number[];
};
export type ExperimentalObjectDefinition = {
  type: "object";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: { allowNull: boolean; strict: boolean };
  shortName?: undefined | string;
  keys: { [key: string]: ExperimentalTypeDefinition };
  enableQueries?: undefined | boolean;
  queryOptions?:
    | undefined
    | {
        withSoftDeletes?: undefined | boolean;
        withDates?: undefined | boolean;
        withPrimaryKey: boolean;
        isView?: undefined | boolean;
        schema?: undefined | string;
      };
  relations: ExperimentalTypeDefinition[];
};
export type ExperimentalTypeDefinition =
  | ExperimentalNamedTypeDefinition
  | ExperimentalReferenceDefinition;
export type ExperimentalReferenceDefinition = {
  type: "reference";
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: {};
  reference: { group: ExperimentalNamePart; name: ExperimentalNamePart };
};
export type ExperimentalStringDefinition = {
  type: "string";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: {
    convert: boolean;
    trim: boolean;
    lowerCase: boolean;
    upperCase: boolean;
    min: number;
    max?: undefined | number;
    pattern?: undefined | string;
    allowNull: boolean;
    disallowedCharacters?: undefined | string[];
  };
  oneOf?: undefined | string[];
};
export type ExperimentalUuidDefinition = {
  type: "uuid";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: { allowNull: boolean };
};
export type ExperimentalStructure = {
  [key: ExperimentalNamePart]: {
    [key: ExperimentalNamePart]: ExperimentalNamedTypeDefinition;
  };
};
export type ExperimentalBooleanDefinitionInput = ExperimentalBooleanDefinition;
export type ExperimentalDateDefinitionInput = ExperimentalDateDefinition;
export type ExperimentalGenerateOptionsInput = {
  targetLanguage: "js" | "ts";
  targetRuntime?: undefined | "node.js" | "browser" | "react-native";
  outputDirectory?: undefined | string;
  generators: {
    structure?: undefined | {};
    openApi?:
      | undefined
      | {
          openApiExtensions?: undefined | any;
          openApiRouteExtensions?: undefined | any;
        };
    router?:
      | undefined
      | { targetLibrary: "koa"; exposeApiStructure?: undefined | boolean };
    database?: undefined | { targetDialect: "postgresql" };
    validators?: undefined | { includeBaseTypes?: undefined | boolean };
    apiClient?:
      | undefined
      | {
          targetLibrary: "axios";
          validateResponses?: undefined | boolean;
          globalClient?: undefined | boolean;
          includeWrapper?: undefined | "react-query";
        };
    types?:
      | undefined
      | {
          useGlobalTypes?: undefined | boolean;
          useGlobalCompasTypes?: undefined | boolean;
          generateDeduplicatedTypes?: undefined | boolean;
          useDeduplicatedTypesPath?: undefined | string;
        };
  };
};
export type ExperimentalNamePartInput = ExperimentalNamePart;
export type ExperimentalNamedTypeDefinitionInput =
  | import("./../common/types").ExperimentalBooleanDefinitionInput
  | import("./../common/types").ExperimentalDateDefinitionInput
  | import("./../common/types").ExperimentalNumberDefinitionInput
  | import("./../common/types").ExperimentalObjectDefinitionInput
  | import("./../common/types").ExperimentalStringDefinitionInput
  | import("./../common/types").ExperimentalUuidDefinitionInput;
export type ExperimentalNumberDefinitionInput = ExperimentalNumberDefinition;
export type ExperimentalObjectDefinitionInput = {
  type: "object";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: { allowNull: boolean; strict: boolean };
  shortName?: undefined | string;
  keys: {
    [key: string]: import("./../common/types").ExperimentalTypeDefinitionInput;
  };
  enableQueries?: undefined | boolean;
  queryOptions?:
    | undefined
    | {
        withSoftDeletes?: undefined | boolean;
        withDates?: undefined | boolean;
        withPrimaryKey: boolean;
        isView?: undefined | boolean;
        schema?: undefined | string;
      };
  relations: import("./../common/types").ExperimentalTypeDefinitionInput[];
};
export type ExperimentalTypeDefinitionInput =
  | import("./../common/types").ExperimentalNamedTypeDefinitionInput
  | import("./../common/types").ExperimentalReferenceDefinitionInput;
export type ExperimentalReferenceDefinitionInput = {
  type: "reference";
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: {};
  reference: {
    group: import("./../common/types").ExperimentalNamePartInput;
    name: import("./../common/types").ExperimentalNamePartInput;
  };
};
export type ExperimentalStringDefinitionInput = {
  type: "string";
  group?: undefined | string;
  name?: undefined | string;
  docString: string;
  isOptional: boolean;
  defaultValue?: undefined | string | boolean | number;
  sql: {
    primary?: undefined | boolean;
    searchable?: undefined | boolean;
    hasDefaultValue?: undefined | boolean;
  };
  validator: {
    convert: boolean;
    trim: boolean;
    lowerCase: boolean;
    upperCase: boolean;
    min?: undefined | number;
    max?: undefined | number;
    pattern?: undefined | string;
    allowNull: boolean;
    disallowedCharacters?: undefined | string[];
  };
  oneOf?: undefined | string[];
};
export type ExperimentalUuidDefinitionInput = ExperimentalUuidDefinition;
export type ExperimentalStructureInput = {
  [key: import("./../common/types").ExperimentalNamePartInput]: {
    [
      key: import("./../common/types").ExperimentalNamePartInput
    ]: import("./../common/types").ExperimentalNamedTypeDefinitionInput;
  };
};
