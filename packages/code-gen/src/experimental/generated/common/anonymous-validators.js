// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

/**
 * @template T
 * @typedef {import("@compas/stdlib").EitherN<T, InternalError>} EitherN
 */

const objectKeys1157196291 = new Set([
  "structure",
  "openApi",
  "router",
  "database",
  "validators",
  "apiClient",
  "types",
]);
const objectKeys519466533 = new Set([""]);
const objectKeys807373232 = new Set([
  "openApiExtensions",
  "openApiRouteExtensions",
]);
const objectKeys2039235894 = new Set(["target", "exposeApiStructure"]);
const objectKeys1597555367 = new Set(["library"]);
const objectKeys22329228 = new Set(["target"]);
const objectKeys1620931104 = new Set(["dialect"]);
const objectKeys328211283 = new Set(["includeBaseTypes"]);
const objectKeys867729959 = new Set([
  "target",
  "validateResponses",
  "globalClient",
]);
const objectKeys1804483877 = new Set([
  "library",
  "targetRuntime",
  "includeWrapper",
]);
const objectKeys325217692 = new Set([
  "useGlobalTypes",
  "useGlobalCompasTypes",
  "generateDeduplicatedTypes",
  "useDeduplicatedTypesPath",
]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"any">}
 */
export function anonymousValidator1619378803(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "any") {
    const oneOf = ["any"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator714133621(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1051394131(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator2029691740(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1895866002(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator1415318131(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string|boolean|number>}
 */
export function anonymousValidator1725939044(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|string|boolean|number>} */
  let result = { errors: [] };
  result = anonymousValidator1895866002(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator2029691740(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1415318131(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|boolean>}
 */
export function anonymousValidator510366599(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }>}
 */
export function anonymousValidator573537942(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator510366599(
      value["primary"],
      `${propertyPath}.primary`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["primary"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["searchable"],
      `${propertyPath}.searchable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["searchable"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["hasDefaultValue"],
      `${propertyPath}.hasDefaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["hasDefaultValue"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"allowNull": boolean, }>}
 */
export function anonymousValidator269204563(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"javaScript"?: undefined|string, "typeScript"?: undefined|string, }>}
 */
export function anonymousValidator518904579(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator714133621(
      value["javaScript"],
      `${propertyPath}.javaScript`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["javaScript"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["typeScript"],
      `${propertyPath}.typeScript`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["typeScript"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "any", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"allowNull": boolean, }, "rawValue"?: undefined|string, "rawValueImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, "rawValidator"?: undefined|string, "rawValidatorImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, }>}
 */
export function anonymousValidator1281032137(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1619378803(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator269204563(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["rawValue"],
      `${propertyPath}.rawValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator518904579(
      value["rawValueImport"],
      `${propertyPath}.rawValueImport`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValueImport"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["rawValidator"],
      `${propertyPath}.rawValidator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValidator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator518904579(
      value["rawValidatorImport"],
      `${propertyPath}.rawValidatorImport`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValidatorImport"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"anyOf">}
 */
export function anonymousValidator1403126410(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "anyOf") {
    const oneOf = ["anyOf"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{}>}
 */
export function anonymousValidator1941559719(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"array">}
 */
export function anonymousValidator1963673664(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "array") {
    const oneOf = ["array"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number>}
 */
export function anonymousValidator233585750(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }>}
 */
export function anonymousValidator1908335458(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalTypeDefinition>}
 */
export function anonymousValidator2123790973(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator1717694293(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "array", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }, "values": import("./types").ExperimentalTypeDefinition, }>}
 */
export function anonymousValidator718373276(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1963673664(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1908335458(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2123790973(
      value["values"],
      `${propertyPath}.values`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["values"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"boolean">}
 */
export function anonymousValidator2039173551(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "boolean") {
    const oneOf = ["boolean"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "allowNull": boolean, }>}
 */
export function anonymousValidator1510293144(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "boolean", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"convert": boolean, "allowNull": boolean, }, "oneOf"?: undefined|boolean, }>}
 */
export function anonymousValidator55094131(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2039173551(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1510293144(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"crud">}
 */
export function anonymousValidator1068364115(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "crud") {
    const oneOf = ["crud"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"reference">}
 */
export function anonymousValidator547865970(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "reference") {
    const oneOf = ["reference"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1868684730(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (!/^[a-zA-Z$][a-zA-Z\d]+$/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalNamePart>}
 */
export function anonymousValidator515626130(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator1868684730(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"group": import("./types").ExperimentalNamePart, "name": import("./types").ExperimentalNamePart, }>}
 */
export function anonymousValidator1239696385(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator515626130(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator515626130(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "reference", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {}, "reference": {"group": import("./types").ExperimentalNamePart, "name": import("./types").ExperimentalNamePart, }, }>}
 */
export function anonymousValidator2043713750(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator547865970(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1941559719(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1239696385(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|import("./types").ExperimentalReferenceDefinition>}
 */
export function anonymousValidator1083609035(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator2043713750(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"name"?: undefined|string, }>}
 */
export function anonymousValidator362217574(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"field": string, "options"?: undefined|{"name"?: undefined|string, }, }>}
 */
export function anonymousValidator1156268604(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1895866002(
      value["field"],
      `${propertyPath}.field`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["field"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator362217574(
      value["options"],
      `${propertyPath}.options`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["options"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"listRoute"?: undefined|boolean, "singleRoute"?: undefined|boolean, "createRoute"?: undefined|boolean, "updateRoute"?: undefined|boolean, "deleteRoute"?: undefined|boolean, }>}
 */
export function anonymousValidator1364866531(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator510366599(
      value["listRoute"],
      `${propertyPath}.listRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["listRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["singleRoute"],
      `${propertyPath}.singleRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["singleRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["createRoute"],
      `${propertyPath}.createRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["createRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["updateRoute"],
      `${propertyPath}.updateRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["updateRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["deleteRoute"],
      `${propertyPath}.deleteRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["deleteRoute"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator1749769805(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1895866002(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }>}
 */
export function anonymousValidator2012926384(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1749769805(
      value["$omit"],
      `${propertyPath}.$omit`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["$omit"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1749769805(
      value["$pick"],
      `${propertyPath}.$pick`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["$pick"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"readable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, "writable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, }>}
 */
export function anonymousValidator1430631133(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2012926384(
      value["readable"],
      `${propertyPath}.readable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["readable"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2012926384(
      value["writable"],
      `${propertyPath}.writable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["writable"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").ExperimentalCrudDefinition)[]>}
 */
export function anonymousValidator1661300607(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1923475033(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "crud", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {}, "basePath"?: undefined|string, "entity"?: undefined|import("./types").ExperimentalReferenceDefinition, "fromParent"?: undefined|{"field": string, "options"?: undefined|{"name"?: undefined|string, }, }, "routeOptions": {"listRoute"?: undefined|boolean, "singleRoute"?: undefined|boolean, "createRoute"?: undefined|boolean, "updateRoute"?: undefined|boolean, "deleteRoute"?: undefined|boolean, }, "fieldOptions": {"readable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, "writable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, }, "inlineRelations": (import("./types").ExperimentalCrudDefinition)[], "nestedRelations": (import("./types").ExperimentalCrudDefinition)[], }>}
 */
export function anonymousValidator1923475033(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1068364115(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1941559719(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["basePath"],
      `${propertyPath}.basePath`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["basePath"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1083609035(
      value["entity"],
      `${propertyPath}.entity`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["entity"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1156268604(
      value["fromParent"],
      `${propertyPath}.fromParent`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fromParent"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1364866531(
      value["routeOptions"],
      `${propertyPath}.routeOptions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["routeOptions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1430631133(
      value["fieldOptions"],
      `${propertyPath}.fieldOptions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fieldOptions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1661300607(
      value["inlineRelations"],
      `${propertyPath}.inlineRelations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["inlineRelations"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1661300607(
      value["nestedRelations"],
      `${propertyPath}.nestedRelations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["nestedRelations"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"date">}
 */
export function anonymousValidator668449731(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "date") {
    const oneOf = ["date"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|Date>}
 */
export function anonymousValidator685440859(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }>}
 */
export function anonymousValidator937834768(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator685440859(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator685440859(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["inFuture"],
      `${propertyPath}.inFuture`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["inFuture"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["inPast"],
      `${propertyPath}.inPast`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["inPast"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"dateOnly"|"timeOnly">}
 */
export function anonymousValidator1020934975(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value !== "dateOnly" && value !== "timeOnly") {
    const oneOf = ["dateOnly", "timeOnly"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "date", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }, "specifier"?: undefined|"dateOnly"|"timeOnly", }>}
 */
export function anonymousValidator184766153(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator668449731(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator937834768(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1020934975(
      value["specifier"],
      `${propertyPath}.specifier`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["specifier"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"extend">}
 */
export function anonymousValidator1557692177(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "extend") {
    const oneOf = ["extend"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: string]:import("./types").ExperimentalTypeDefinition}>}
 */
export function anonymousValidator2098458825(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1895866002(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator1717694293(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalReferenceDefinition>}
 */
export function anonymousValidator671299922(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator2043713750(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "extend", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {}, "keys": { [ key: string]:import("./types").ExperimentalTypeDefinition}, "reference": import("./types").ExperimentalReferenceDefinition, }>}
 */
export function anonymousValidator304308939(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1557692177(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1941559719(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2098458825(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator671299922(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"file">}
 */
export function anonymousValidator1328202671(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "file") {
    const oneOf = ["file"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"mimeTypes"?: undefined|(string)[], }>}
 */
export function anonymousValidator48903061(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1749769805(
      value["mimeTypes"],
      `${propertyPath}.mimeTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["mimeTypes"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "file", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"mimeTypes"?: undefined|(string)[], }, }>}
 */
export function anonymousValidator88730391(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1328202671(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator48903061(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"generic">}
 */
export function anonymousValidator1113227710(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "generic") {
    const oneOf = ["generic"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "generic", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {}, "keys": import("./types").ExperimentalTypeDefinition, "values": import("./types").ExperimentalTypeDefinition, }>}
 */
export function anonymousValidator878459490(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1113227710(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1941559719(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2123790973(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2123790973(
      value["values"],
      `${propertyPath}.values`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["values"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"number">}
 */
export function anonymousValidator474333054(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "number") {
    const oneOf = ["number"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }>}
 */
export function anonymousValidator1580292488(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["floatingPoint"],
      `${propertyPath}.floatingPoint`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["floatingPoint"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(number)[]>}
 */
export function anonymousValidator1269221934(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1415318131(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "number", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }, "oneOf"?: undefined|(number)[], }>}
 */
export function anonymousValidator1256944988(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator474333054(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1580292488(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1269221934(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"object">}
 */
export function anonymousValidator681110732(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "object") {
    const oneOf = ["object"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"allowNull": boolean, "strict": boolean, }>}
 */
export function anonymousValidator1912779354(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["strict"],
      `${propertyPath}.strict`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["strict"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"withSoftDeletes"?: undefined|boolean, "withDates"?: undefined|boolean, "withPrimaryKey": boolean, "isView"?: undefined|boolean, "schema"?: undefined|string, }>}
 */
export function anonymousValidator1318903370(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator510366599(
      value["withSoftDeletes"],
      `${propertyPath}.withSoftDeletes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["withSoftDeletes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["withDates"],
      `${propertyPath}.withDates`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["withDates"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["withPrimaryKey"],
      `${propertyPath}.withPrimaryKey`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["withPrimaryKey"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["isView"],
      `${propertyPath}.isView`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isView"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["schema"],
      `${propertyPath}.schema`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["schema"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"relation">}
 */
export function anonymousValidator9985361(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "relation") {
    const oneOf = ["relation"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse">}
 */
export function anonymousValidator1470278403(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "manyToOne" &&
    value !== "oneToMany" &&
    value !== "oneToOne" &&
    value !== "oneToOneReverse"
  ) {
    const oneOf = ["manyToOne", "oneToMany", "oneToOne", "oneToOneReverse"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "relation", "subType": "manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse", "reference": import("./types").ExperimentalReferenceDefinition, "ownKey": string, "referencedKey"?: undefined|string, "isOptional": boolean, }>}
 */
export function anonymousValidator494503017(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator9985361(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1470278403(
      value["subType"],
      `${propertyPath}.subType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["subType"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator671299922(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1895866002(
      value["ownKey"],
      `${propertyPath}.ownKey`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["ownKey"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["referencedKey"],
      `${propertyPath}.referencedKey`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["referencedKey"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").ExperimentalRelationDefinition)[]>}
 */
export function anonymousValidator403767741(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator494503017(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "object", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"allowNull": boolean, "strict": boolean, }, "shortName"?: undefined|string, "keys": { [ key: string]:import("./types").ExperimentalTypeDefinition}, "enableQueries"?: undefined|boolean, "queryOptions"?: undefined|{"withSoftDeletes"?: undefined|boolean, "withDates"?: undefined|boolean, "withPrimaryKey": boolean, "isView"?: undefined|boolean, "schema"?: undefined|string, }, "relations": (import("./types").ExperimentalRelationDefinition)[], }>}
 */
export function anonymousValidator733173530(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator681110732(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1912779354(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["shortName"],
      `${propertyPath}.shortName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["shortName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2098458825(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["enableQueries"],
      `${propertyPath}.enableQueries`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["enableQueries"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1318903370(
      value["queryOptions"],
      `${propertyPath}.queryOptions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["queryOptions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator403767741(
      value["relations"],
      `${propertyPath}.relations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["relations"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"omit">}
 */
export function anonymousValidator837994114(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "omit") {
    const oneOf = ["omit"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(string)[]>}
 */
export function anonymousValidator782744528(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1895866002(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "omit", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"allowNull": boolean, "strict": boolean, }, "keys": (string)[], "reference": import("./types").ExperimentalTypeDefinition, }>}
 */
export function anonymousValidator1383310564(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator837994114(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1912779354(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator782744528(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2123790973(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"pick">}
 */
export function anonymousValidator1605171946(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "pick") {
    const oneOf = ["pick"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "pick", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"allowNull": boolean, "strict": boolean, }, "keys": (string)[], "reference": import("./types").ExperimentalTypeDefinition, }>}
 */
export function anonymousValidator269560700(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1605171946(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1912779354(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator782744528(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2123790973(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"route">}
 */
export function anonymousValidator1032994224(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "route") {
    const oneOf = ["route"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH">}
 */
export function anonymousValidator522526867(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "GET" &&
    value !== "POST" &&
    value !== "PUT" &&
    value !== "DELETE" &&
    value !== "HEAD" &&
    value !== "PATCH"
  ) {
    const oneOf = ["GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"routeInvalidation">}
 */
export function anonymousValidator1797616914(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "routeInvalidation") {
    const oneOf = ["routeInvalidation"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator1288229946(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (!/^[a-zA-Z$][a-zA-Z\d]+$/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalNamePartOptional>}
 */
export function anonymousValidator1871344402(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1288229946(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"group": import("./types").ExperimentalNamePart, "name"?: import("./types").ExperimentalNamePartOptional, }>}
 */
export function anonymousValidator394263679(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator515626130(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1871344402(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: string]:(string)[]}>}
 */
export function anonymousValidator1338892438(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1895866002(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator782744528(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"params": { [ key: string]:(string)[]}, "query": { [ key: string]:(string)[]}, }>}
 */
export function anonymousValidator802937298(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1338892438(
      value["params"],
      `${propertyPath}.params`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["params"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1338892438(
      value["query"],
      `${propertyPath}.query`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["query"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"useSharedParams"?: undefined|boolean, "useSharedQuery"?: undefined|boolean, "specification"?: undefined|{"params": { [ key: string]:(string)[]}, "query": { [ key: string]:(string)[]}, }, }>}
 */
export function anonymousValidator1782120350(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator510366599(
      value["useSharedParams"],
      `${propertyPath}.useSharedParams`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useSharedParams"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["useSharedQuery"],
      `${propertyPath}.useSharedQuery`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useSharedQuery"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator802937298(
      value["specification"],
      `${propertyPath}.specification`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["specification"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "routeInvalidation", "target": {"group": import("./types").ExperimentalNamePart, "name"?: import("./types").ExperimentalNamePartOptional, }, "properties": {"useSharedParams"?: undefined|boolean, "useSharedQuery"?: undefined|boolean, "specification"?: undefined|{"params": { [ key: string]:(string)[]}, "query": { [ key: string]:(string)[]}, }, }, }>}
 */
export function anonymousValidator1598800594(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1797616914(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator394263679(
      value["target"],
      `${propertyPath}.target`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["target"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1782120350(
      value["properties"],
      `${propertyPath}.properties`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["properties"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").ExperimentalRouteInvalidationDefinition)[]>}
 */
export function anonymousValidator2032060268(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1598800594(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"json"|"form-data">}
 */
export function anonymousValidator2044697749(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value !== "json" && value !== "form-data") {
    const oneOf = ["json", "form-data"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"stripTrailingSlash"?: undefined|boolean, "requestBodyType"?: undefined|"json"|"form-data", }>}
 */
export function anonymousValidator1039590278(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator510366599(
      value["stripTrailingSlash"],
      `${propertyPath}.stripTrailingSlash`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["stripTrailingSlash"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2044697749(
      value["requestBodyType"],
      `${propertyPath}.requestBodyType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["requestBodyType"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "route", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {}, "method": "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH", "idempotent": boolean, "path": string, "tags": (string)[], "query"?: undefined|import("./types").ExperimentalReferenceDefinition, "params"?: undefined|import("./types").ExperimentalReferenceDefinition, "body"?: undefined|import("./types").ExperimentalReferenceDefinition, "files"?: undefined|import("./types").ExperimentalReferenceDefinition, "response"?: undefined|import("./types").ExperimentalReferenceDefinition, "invalidations": (import("./types").ExperimentalRouteInvalidationDefinition)[], "metadata"?: undefined|{"stripTrailingSlash"?: undefined|boolean, "requestBodyType"?: undefined|"json"|"form-data", }, }>}
 */
export function anonymousValidator486436268(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1032994224(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1941559719(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator522526867(
      value["method"],
      `${propertyPath}.method`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["method"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["idempotent"],
      `${propertyPath}.idempotent`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["idempotent"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1895866002(
      value["path"],
      `${propertyPath}.path`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["path"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator782744528(
      value["tags"],
      `${propertyPath}.tags`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["tags"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1083609035(
      value["query"],
      `${propertyPath}.query`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["query"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1083609035(
      value["params"],
      `${propertyPath}.params`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["params"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1083609035(
      value["body"],
      `${propertyPath}.body`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["body"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1083609035(
      value["files"],
      `${propertyPath}.files`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["files"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1083609035(
      value["response"],
      `${propertyPath}.response`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["response"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2032060268(
      value["invalidations"],
      `${propertyPath}.invalidations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["invalidations"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1039590278(
      value["metadata"],
      `${propertyPath}.metadata`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["metadata"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"string">}
 */
export function anonymousValidator1981425338(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "string") {
    const oneOf = ["string"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator1293129041(value, propertyPath) {
  if (isNil(value)) {
    return { value: 1 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator249951578(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 2) {
    const max = 2;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator1530060641(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator249951578(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }>}
 */
export function anonymousValidator1111427832(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["trim"],
      `${propertyPath}.trim`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["trim"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["lowerCase"],
      `${propertyPath}.lowerCase`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["lowerCase"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["upperCase"],
      `${propertyPath}.upperCase`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["upperCase"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1293129041(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["pattern"],
      `${propertyPath}.pattern`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["pattern"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1530060641(
      value["disallowedCharacters"],
      `${propertyPath}.disallowedCharacters`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["disallowedCharacters"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "string", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }, "oneOf"?: undefined|(string)[], }>}
 */
export function anonymousValidator1855474324(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1981425338(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1111427832(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1749769805(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"uuid">}
 */
export function anonymousValidator2096605456(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "uuid") {
    const oneOf = ["uuid"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "uuid", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"allowNull": boolean, }, }>}
 */
export function anonymousValidator1015847274(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2096605456(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator269204563(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalAnyDefinition|import("./types").ExperimentalAnyOfDefinition|import("./types").ExperimentalArrayDefinition|import("./types").ExperimentalBooleanDefinition|import("./types").ExperimentalCrudDefinition|import("./types").ExperimentalDateDefinition|import("./types").ExperimentalExtendDefinition|import("./types").ExperimentalFileDefinition|import("./types").ExperimentalGenericDefinition|import("./types").ExperimentalNumberDefinition|import("./types").ExperimentalObjectDefinition|import("./types").ExperimentalOmitDefinition|import("./types").ExperimentalPickDefinition|import("./types").ExperimentalRouteDefinition|import("./types").ExperimentalStringDefinition|import("./types").ExperimentalUuidDefinition>}
 */
export function anonymousValidator527504798(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<import("./types").ExperimentalAnyDefinition|import("./types").ExperimentalAnyOfDefinition|import("./types").ExperimentalArrayDefinition|import("./types").ExperimentalBooleanDefinition|import("./types").ExperimentalCrudDefinition|import("./types").ExperimentalDateDefinition|import("./types").ExperimentalExtendDefinition|import("./types").ExperimentalFileDefinition|import("./types").ExperimentalGenericDefinition|import("./types").ExperimentalNumberDefinition|import("./types").ExperimentalObjectDefinition|import("./types").ExperimentalOmitDefinition|import("./types").ExperimentalPickDefinition|import("./types").ExperimentalRouteDefinition|import("./types").ExperimentalStringDefinition|import("./types").ExperimentalUuidDefinition>} */
  let result = { errors: [] };
  result = anonymousValidator1281032137(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1003855982(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator718373276(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator55094131(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1923475033(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator184766153(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator304308939(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator88730391(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator878459490(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1256944988(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator733173530(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1383310564(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator269560700(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator486436268(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1855474324(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1015847274(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalNamedTypeDefinition|import("./types").ExperimentalReferenceDefinition|import("./types").ExperimentalRelationDefinition|import("./types").ExperimentalRouteInvalidationDefinition>}
 */
export function anonymousValidator1717694293(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<import("./types").ExperimentalNamedTypeDefinition|import("./types").ExperimentalReferenceDefinition|import("./types").ExperimentalRelationDefinition|import("./types").ExperimentalRouteInvalidationDefinition>} */
  let result = { errors: [] };
  result = anonymousValidator527504798(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator2043713750(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator494503017(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1598800594(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").ExperimentalTypeDefinition)[]>}
 */
export function anonymousValidator87553826(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.min",
          info: { min },
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1717694293(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "anyOf", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {}, "values": (import("./types").ExperimentalTypeDefinition)[], }>}
 */
export function anonymousValidator1003855982(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1403126410(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator573537942(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1941559719(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator87553826(
      value["values"],
      `${propertyPath}.values`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["values"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"js"|"ts">}
 */
export function anonymousValidator1874725173(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "js" && value !== "ts") {
    const oneOf = ["js", "ts"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{}>}
 */
export function anonymousValidator519466533(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys519466533.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys519466533],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|any>}
 */
export function anonymousValidator555515758(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"openApiExtensions"?: undefined|any, "openApiRouteExtensions"?: undefined|any, }>}
 */
export function anonymousValidator807373232(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys807373232.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys807373232],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator555515758(
      value["openApiExtensions"],
      `${propertyPath}.openApiExtensions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["openApiExtensions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator555515758(
      value["openApiRouteExtensions"],
      `${propertyPath}.openApiRouteExtensions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["openApiRouteExtensions"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"koa">}
 */
export function anonymousValidator1332878756(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "koa") {
    const oneOf = ["koa"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"library": "koa", }>}
 */
export function anonymousValidator1597555367(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1597555367.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1597555367],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1332878756(
      value["library"],
      `${propertyPath}.library`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["library"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"library": "koa", }>}
 */
export function anonymousValidator994729753(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<{"library": "koa", }>} */
  let result = { errors: [] };
  result = anonymousValidator1597555367(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator897743470(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"target": {"library": "koa", }, "exposeApiStructure": boolean, }>}
 */
export function anonymousValidator2039235894(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2039235894.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys2039235894],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator994729753(
      value["target"],
      `${propertyPath}.target`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["target"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["exposeApiStructure"],
      `${propertyPath}.exposeApiStructure`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["exposeApiStructure"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"postgres">}
 */
export function anonymousValidator2093876206(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "postgres") {
    const oneOf = ["postgres"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"dialect": "postgres", }>}
 */
export function anonymousValidator1620931104(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1620931104.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1620931104],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator2093876206(
      value["dialect"],
      `${propertyPath}.dialect`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["dialect"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"dialect": "postgres", }>}
 */
export function anonymousValidator1236368352(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<{"dialect": "postgres", }>} */
  let result = { errors: [] };
  result = anonymousValidator1620931104(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"target": {"dialect": "postgres", }, }>}
 */
export function anonymousValidator22329228(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys22329228.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys22329228],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1236368352(
      value["target"],
      `${propertyPath}.target`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["target"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"includeBaseTypes": boolean, }>}
 */
export function anonymousValidator328211283(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys328211283.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys328211283],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["includeBaseTypes"],
      `${propertyPath}.includeBaseTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["includeBaseTypes"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"axios">}
 */
export function anonymousValidator1546150653(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "axios") {
    const oneOf = ["axios"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"node.js"|"browser"|"react-native">}
 */
export function anonymousValidator1391751955(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "node.js" && value !== "browser" && value !== "react-native") {
    const oneOf = ["node.js", "browser", "react-native"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"react-query">}
 */
export function anonymousValidator145869276(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value !== "react-query") {
    const oneOf = ["react-query"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"library": "axios", "targetRuntime": "node.js"|"browser"|"react-native", "includeWrapper"?: undefined|"react-query", }>}
 */
export function anonymousValidator1804483877(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1804483877.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1804483877],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1546150653(
      value["library"],
      `${propertyPath}.library`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["library"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1391751955(
      value["targetRuntime"],
      `${propertyPath}.targetRuntime`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["targetRuntime"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator145869276(
      value["includeWrapper"],
      `${propertyPath}.includeWrapper`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["includeWrapper"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"library": "axios", "targetRuntime": "node.js"|"browser"|"react-native", "includeWrapper"?: undefined|"react-query", }>}
 */
export function anonymousValidator185103205(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<{"library": "axios", "targetRuntime": "node.js"|"browser"|"react-native", "includeWrapper"?: undefined|"react-query", }>} */
  let result = { errors: [] };
  result = anonymousValidator1804483877(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"target": {"library": "axios", "targetRuntime": "node.js"|"browser"|"react-native", "includeWrapper"?: undefined|"react-query", }, "validateResponses": boolean, "globalClient": boolean, }>}
 */
export function anonymousValidator867729959(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys867729959.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys867729959],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator185103205(
      value["target"],
      `${propertyPath}.target`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["target"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["validateResponses"],
      `${propertyPath}.validateResponses`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validateResponses"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["globalClient"],
      `${propertyPath}.globalClient`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["globalClient"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"useGlobalTypes": boolean, "useGlobalCompasTypes": boolean, "generateDeduplicatedTypes": boolean, "useDeduplicatedTypesPath"?: undefined|string, }>}
 */
export function anonymousValidator325217692(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys325217692.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys325217692],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["useGlobalTypes"],
      `${propertyPath}.useGlobalTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useGlobalTypes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["useGlobalCompasTypes"],
      `${propertyPath}.useGlobalCompasTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useGlobalCompasTypes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["generateDeduplicatedTypes"],
      `${propertyPath}.generateDeduplicatedTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["generateDeduplicatedTypes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["useDeduplicatedTypesPath"],
      `${propertyPath}.useDeduplicatedTypesPath`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useDeduplicatedTypesPath"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"structure"?: undefined|{}, "openApi"?: undefined|{"openApiExtensions"?: undefined|any, "openApiRouteExtensions"?: undefined|any, }, "router"?: undefined|{"target": {"library": "koa", }, "exposeApiStructure": boolean, }, "database"?: undefined|{"target": {"dialect": "postgres", }, }, "validators"?: undefined|{"includeBaseTypes": boolean, }, "apiClient"?: undefined|{"target": {"library": "axios", "targetRuntime": "node.js"|"browser"|"react-native", "includeWrapper"?: undefined|"react-query", }, "validateResponses": boolean, "globalClient": boolean, }, "types"?: undefined|{"useGlobalTypes": boolean, "useGlobalCompasTypes": boolean, "generateDeduplicatedTypes": boolean, "useDeduplicatedTypesPath"?: undefined|string, }, }>}
 */
export function anonymousValidator1157196291(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1157196291.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1157196291],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator519466533(
      value["structure"],
      `${propertyPath}.structure`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["structure"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator807373232(
      value["openApi"],
      `${propertyPath}.openApi`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["openApi"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2039235894(
      value["router"],
      `${propertyPath}.router`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["router"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator22329228(
      value["database"],
      `${propertyPath}.database`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["database"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator328211283(
      value["validators"],
      `${propertyPath}.validators`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validators"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator867729959(
      value["apiClient"],
      `${propertyPath}.apiClient`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["apiClient"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator325217692(
      value["types"],
      `${propertyPath}.types`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["types"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"targetLanguage": "js"|"ts", "outputDirectory"?: undefined|string, "generators": {"structure"?: undefined|{}, "openApi"?: undefined|{"openApiExtensions"?: undefined|any, "openApiRouteExtensions"?: undefined|any, }, "router"?: undefined|{"target": {"library": "koa", }, "exposeApiStructure": boolean, }, "database"?: undefined|{"target": {"dialect": "postgres", }, }, "validators"?: undefined|{"includeBaseTypes": boolean, }, "apiClient"?: undefined|{"target": {"library": "axios", "targetRuntime": "node.js"|"browser"|"react-native", "includeWrapper"?: undefined|"react-query", }, "validateResponses": boolean, "globalClient": boolean, }, "types"?: undefined|{"useGlobalTypes": boolean, "useGlobalCompasTypes": boolean, "generateDeduplicatedTypes": boolean, "useDeduplicatedTypesPath"?: undefined|string, }, }, }>}
 */
export function anonymousValidator1671053633(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1874725173(
      value["targetLanguage"],
      `${propertyPath}.targetLanguage`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["targetLanguage"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["outputDirectory"],
      `${propertyPath}.outputDirectory`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["outputDirectory"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1157196291(
      value["generators"],
      `${propertyPath}.generators`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["generators"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: import("./types").ExperimentalNamePart]:import("./types").ExperimentalNamedTypeDefinition}>}
 */
export function anonymousValidator1554486548(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1868684730(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator527504798(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: import("./types").ExperimentalNamePart]:{ [ key: import("./types").ExperimentalNamePart]:import("./types").ExperimentalNamedTypeDefinition}}>}
 */
export function anonymousValidator1125369163(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1868684730(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator1554486548(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
