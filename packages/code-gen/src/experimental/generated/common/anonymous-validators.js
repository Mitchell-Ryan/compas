// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

/**
 * @template T
 * @typedef {import("@compas/stdlib").EitherN<T, InternalError>} EitherN
 */

const objectKeys1622444584 = new Set([
  "structure",
  "openApi",
  "router",
  "database",
  "validators",
  "apiClient",
  "types",
]);
const objectKeys1718814346 = new Set([""]);
const objectKeys732293323 = new Set([
  "openApiExtensions",
  "openApiRouteExtensions",
]);
const objectKeys1665774335 = new Set(["targetLibrary", "exposeApiStructure"]);
const objectKeys230273118 = new Set(["targetDialect"]);
const objectKeys444717756 = new Set(["includeBaseTypes"]);
const objectKeys1630667140 = new Set([
  "targetLibrary",
  "validateResponses",
  "globalClient",
  "includeWrapper",
]);
const objectKeys165952883 = new Set([
  "useGlobalTypes",
  "useGlobalCompasTypes",
  "generateDeduplicatedTypes",
  "useDeduplicatedTypesPath",
]);
const objectKeys1855474324 = new Set([
  "type",
  "group",
  "name",
  "docString",
  "isOptional",
  "defaultValue",
  "sql",
  "validator",
  "oneOf",
]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"boolean">}
 */
export function anonymousValidator2039173551(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "boolean") {
    const oneOf = ["boolean"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator714133621(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1051394131(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator2029691740(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1895866002(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator1415318131(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string|boolean|number>}
 */
export function anonymousValidator1725939044(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|string|boolean|number>} */
  let result = { errors: [] };
  result = anonymousValidator1895866002(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator2029691740(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1415318131(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|boolean>}
 */
export function anonymousValidator510366599(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }>}
 */
export function anonymousValidator465536613(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator510366599(
      value["primary"],
      `${propertyPath}.primary`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["primary"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["searchable"],
      `${propertyPath}.searchable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["searchable"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["hasDefaultValue"],
      `${propertyPath}.hasDefaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["hasDefaultValue"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "allowNull": boolean, }>}
 */
export function anonymousValidator545221929(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "boolean", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"convert": boolean, "allowNull": boolean, }, "oneOf"?: undefined|boolean, }>}
 */
export function anonymousValidator55094131(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2039173551(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator465536613(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator545221929(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator510366599(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"js"|"ts">}
 */
export function anonymousValidator1874725173(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "js" && value !== "ts") {
    const oneOf = ["js", "ts"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"node.js"|"browser"|"react-native">}
 */
export function anonymousValidator1801875478(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value !== "node.js" && value !== "browser" && value !== "react-native") {
    const oneOf = ["node.js", "browser", "react-native"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{}>}
 */
export function anonymousValidator1718814346(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1718814346.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1718814346],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|any>}
 */
export function anonymousValidator926956431(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"openApiExtensions"?: undefined|any, "openApiRouteExtensions"?: undefined|any, }>}
 */
export function anonymousValidator732293323(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys732293323.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys732293323],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator926956431(
      value["openApiExtensions"],
      `${propertyPath}.openApiExtensions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["openApiExtensions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator926956431(
      value["openApiRouteExtensions"],
      `${propertyPath}.openApiRouteExtensions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["openApiRouteExtensions"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"koa">}
 */
export function anonymousValidator1332878756(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "koa") {
    const oneOf = ["koa"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator897743470(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"targetLibrary": "koa", "exposeApiStructure": boolean, }>}
 */
export function anonymousValidator1665774335(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1665774335.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1665774335],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1332878756(
      value["targetLibrary"],
      `${propertyPath}.targetLibrary`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["targetLibrary"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["exposeApiStructure"],
      `${propertyPath}.exposeApiStructure`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["exposeApiStructure"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"postgresql">}
 */
export function anonymousValidator2097018857(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "postgresql") {
    const oneOf = ["postgresql"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"targetDialect": "postgresql", }>}
 */
export function anonymousValidator230273118(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys230273118.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys230273118],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator2097018857(
      value["targetDialect"],
      `${propertyPath}.targetDialect`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["targetDialect"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"includeBaseTypes": boolean, }>}
 */
export function anonymousValidator444717756(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys444717756.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys444717756],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["includeBaseTypes"],
      `${propertyPath}.includeBaseTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["includeBaseTypes"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"axios">}
 */
export function anonymousValidator1546150653(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "axios") {
    const oneOf = ["axios"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"react-query">}
 */
export function anonymousValidator145869276(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value !== "react-query") {
    const oneOf = ["react-query"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"targetLibrary": "axios", "validateResponses": boolean, "globalClient": boolean, "includeWrapper"?: undefined|"react-query", }>}
 */
export function anonymousValidator1630667140(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1630667140.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1630667140],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1546150653(
      value["targetLibrary"],
      `${propertyPath}.targetLibrary`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["targetLibrary"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["validateResponses"],
      `${propertyPath}.validateResponses`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validateResponses"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["globalClient"],
      `${propertyPath}.globalClient`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["globalClient"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator145869276(
      value["includeWrapper"],
      `${propertyPath}.includeWrapper`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["includeWrapper"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"useGlobalTypes": boolean, "useGlobalCompasTypes": boolean, "generateDeduplicatedTypes": boolean, "useDeduplicatedTypesPath"?: undefined|string, }>}
 */
export function anonymousValidator165952883(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys165952883.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys165952883],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["useGlobalTypes"],
      `${propertyPath}.useGlobalTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useGlobalTypes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["useGlobalCompasTypes"],
      `${propertyPath}.useGlobalCompasTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useGlobalCompasTypes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator897743470(
      value["generateDeduplicatedTypes"],
      `${propertyPath}.generateDeduplicatedTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["generateDeduplicatedTypes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["useDeduplicatedTypesPath"],
      `${propertyPath}.useDeduplicatedTypesPath`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useDeduplicatedTypesPath"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"structure"?: undefined|{}, "openApi"?: undefined|{"openApiExtensions"?: undefined|any, "openApiRouteExtensions"?: undefined|any, }, "router"?: undefined|{"targetLibrary": "koa", "exposeApiStructure": boolean, }, "database"?: undefined|{"targetDialect": "postgresql", }, "validators"?: undefined|{"includeBaseTypes": boolean, }, "apiClient"?: undefined|{"targetLibrary": "axios", "validateResponses": boolean, "globalClient": boolean, "includeWrapper"?: undefined|"react-query", }, "types"?: undefined|{"useGlobalTypes": boolean, "useGlobalCompasTypes": boolean, "generateDeduplicatedTypes": boolean, "useDeduplicatedTypesPath"?: undefined|string, }, }>}
 */
export function anonymousValidator1622444584(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1622444584.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1622444584],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1718814346(
      value["structure"],
      `${propertyPath}.structure`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["structure"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator732293323(
      value["openApi"],
      `${propertyPath}.openApi`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["openApi"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1665774335(
      value["router"],
      `${propertyPath}.router`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["router"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator230273118(
      value["database"],
      `${propertyPath}.database`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["database"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator444717756(
      value["validators"],
      `${propertyPath}.validators`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validators"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1630667140(
      value["apiClient"],
      `${propertyPath}.apiClient`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["apiClient"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator165952883(
      value["types"],
      `${propertyPath}.types`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["types"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"targetLanguage": "js"|"ts", "targetRuntime"?: undefined|"node.js"|"browser"|"react-native", "outputDirectory"?: undefined|string, "generators": {"structure"?: undefined|{}, "openApi"?: undefined|{"openApiExtensions"?: undefined|any, "openApiRouteExtensions"?: undefined|any, }, "router"?: undefined|{"targetLibrary": "koa", "exposeApiStructure": boolean, }, "database"?: undefined|{"targetDialect": "postgresql", }, "validators"?: undefined|{"includeBaseTypes": boolean, }, "apiClient"?: undefined|{"targetLibrary": "axios", "validateResponses": boolean, "globalClient": boolean, "includeWrapper"?: undefined|"react-query", }, "types"?: undefined|{"useGlobalTypes": boolean, "useGlobalCompasTypes": boolean, "generateDeduplicatedTypes": boolean, "useDeduplicatedTypesPath"?: undefined|string, }, }, }>}
 */
export function anonymousValidator1671053633(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1874725173(
      value["targetLanguage"],
      `${propertyPath}.targetLanguage`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["targetLanguage"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1801875478(
      value["targetRuntime"],
      `${propertyPath}.targetRuntime`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["targetRuntime"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["outputDirectory"],
      `${propertyPath}.outputDirectory`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["outputDirectory"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1622444584(
      value["generators"],
      `${propertyPath}.generators`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["generators"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1868684730(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (!/^[a-zA-Z$][a-zA-Z\d]+$/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"number">}
 */
export function anonymousValidator474333054(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "number") {
    const oneOf = ["number"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number>}
 */
export function anonymousValidator233585750(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }>}
 */
export function anonymousValidator2051111593(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["floatingPoint"],
      `${propertyPath}.floatingPoint`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["floatingPoint"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(number)[]>}
 */
export function anonymousValidator1269221934(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1415318131(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "number", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }, "oneOf"?: undefined|(number)[], }>}
 */
export function anonymousValidator1256944988(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator474333054(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator465536613(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2051111593(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1269221934(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"string">}
 */
export function anonymousValidator1981425338(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "string") {
    const oneOf = ["string"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator1293129041(value, propertyPath) {
  if (isNil(value)) {
    return { value: 1 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator249951578(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 2) {
    const max = 2;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator1530060641(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator249951578(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }>}
 */
export function anonymousValidator1025386375(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2029691740(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["trim"],
      `${propertyPath}.trim`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["trim"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["lowerCase"],
      `${propertyPath}.lowerCase`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["lowerCase"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["upperCase"],
      `${propertyPath}.upperCase`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["upperCase"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1293129041(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator233585750(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["pattern"],
      `${propertyPath}.pattern`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["pattern"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1530060641(
      value["disallowedCharacters"],
      `${propertyPath}.disallowedCharacters`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["disallowedCharacters"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator1749769805(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1895866002(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "string", "group"?: undefined|string, "name"?: undefined|string, "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }, "oneOf"?: undefined|(string)[], }>}
 */
export function anonymousValidator1855474324(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1855474324.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1855474324],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1981425338(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator714133621(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator465536613(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1025386375(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1749769805(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalBooleanDefinition|import("./types").ExperimentalNumberDefinition|import("./types").ExperimentalStringDefinition>}
 */
export function anonymousValidator527504798(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<import("./types").ExperimentalBooleanDefinition|import("./types").ExperimentalNumberDefinition|import("./types").ExperimentalStringDefinition>} */
  let result = { errors: [] };
  result = anonymousValidator55094131(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1256944988(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1855474324(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"reference">}
 */
export function anonymousValidator547865970(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "reference") {
    const oneOf = ["reference"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{}>}
 */
export function anonymousValidator123776408(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalNamePart>}
 */
export function anonymousValidator515626130(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator1868684730(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"group": import("./types").ExperimentalNamePart, "name": import("./types").ExperimentalNamePart, }>}
 */
export function anonymousValidator1837089840(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator515626130(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator515626130(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "reference", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "sql": {"primary"?: undefined|boolean, "searchable"?: undefined|boolean, "hasDefaultValue"?: undefined|boolean, }, "validator": {}, "reference": {"group": import("./types").ExperimentalNamePart, "name": import("./types").ExperimentalNamePart, }, }>}
 */
export function anonymousValidator2043713750(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator547865970(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1051394131(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2029691740(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1725939044(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator465536613(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator123776408(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1837089840(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: import("./types").ExperimentalNamePart]:import("./types").ExperimentalNamedTypeDefinition}>}
 */
export function anonymousValidator1554486548(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1868684730(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator527504798(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: import("./types").ExperimentalNamePart]:{ [ key: import("./types").ExperimentalNamePart]:import("./types").ExperimentalNamedTypeDefinition}}>}
 */
export function anonymousValidator1125369163(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1868684730(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator1554486548(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").ExperimentalNamedTypeDefinition|import("./types").ExperimentalReferenceDefinition>}
 */
export function anonymousValidator1717694293(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<import("./types").ExperimentalNamedTypeDefinition|import("./types").ExperimentalReferenceDefinition>} */
  let result = { errors: [] };
  result = anonymousValidator527504798(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator2043713750(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
