export namespace compasGenerateSettings {
  const outputDirectory: string;
  const fileHeader: string;
  const isBrowser: boolean;
  const isNodeServer: boolean;
  const isNode: boolean;
  const enabledGenerators: string[];
  const environment: {};
  const useTypescript: boolean;
  const dumpStructure: boolean;
  const dumpApiStructure: boolean;
  const dumpPostgres: boolean;
  const declareGlobalTypes: boolean;
}
export const experimentalStructureString: '{"structure":{"type":"generic","group":"experimental","name":"structure","docString":"","isOptional":false,"validator":{},"keys":{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"group":"experimental","name":"namePart","uniqueName":"ExperimentalNamePart"}},"values":{"type":"generic","docString":"","isOptional":false,"validator":{},"keys":{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"group":"experimental","name":"namePart","uniqueName":"ExperimentalNamePart"}},"values":{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"name":"namedTypeDefinition","group":"experimental"}}},"uniqueName":"ExperimentalStructure"},"generateOptions":{"type":"object","group":"experimental","name":"generateOptions","docString":"","isOptional":false,"validator":{"strict":false},"keys":{"targetLanguage":{"type":"string","docString":"","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["js","ts"]},"targetRuntime":{"type":"string","docString":"Only applicable if your \'targetLanguage\' is set to \'js\' or \'ts\'.","isOptional":true,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["node.js","browser","react-native"]},"outputDirectory":{"type":"string","docString":"","isOptional":true,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}},"generators":{"type":"object","docString":"","isOptional":false,"validator":{"strict":true},"keys":{"structure":{"type":"object","docString":"Enable a structure dump. This way this structure can be reused vai \'Generator#addStructure","isOptional":true,"validator":{"strict":true},"keys":{},"relations":[]},"openApi":{"type":"object","docString":"Enable the OpenAPI generator.","isOptional":true,"validator":{"strict":true},"keys":{"openApiExtensions":{"type":"any","docString":"","isOptional":true,"validator":{},"rawValueImport":{},"rawValidatorImport":{}},"openApiRouteExtensions":{"type":"any","docString":"","isOptional":true,"validator":{},"rawValueImport":{},"rawValidatorImport":{}}},"relations":[]},"router":{"type":"object","docString":"Generate a validating router with entry points for your route handlers.","isOptional":true,"validator":{"strict":true},"keys":{"targetLibrary":{"type":"string","docString":"Select one of the supported libraries to generate a router for.","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["koa"]},"exposeApiStructure":{"type":"boolean","docString":"Adds a Compas \'_compas/structure.json\' route to the generated router that includes all available routes.","isOptional":true,"defaultValue":"false","validator":{"convert":false}}},"relations":[]},"database":{"type":"object","docString":"Generate one of the compatible database interfaces.","isOptional":true,"validator":{"strict":true},"keys":{"targetDialect":{"type":"string","docString":"Select one of the supported dialects to generate queries for.","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["postgresql"]}},"relations":[]},"validators":{"type":"object","docString":"Alter the output of generated validators. Other generators will always include validators in their output if necessary.","isOptional":true,"validator":{"strict":true},"keys":{"includeBaseTypes":{"type":"boolean","docString":"Always generate validators for all named types even if no other generator needs it.","isOptional":true,"defaultValue":"false","validator":{"convert":false}}},"relations":[]},"apiClient":{"type":"object","docString":"Generate an API client, based on the routes in your structure.","isOptional":true,"validator":{"strict":true},"keys":{"targetLibrary":{"type":"string","docString":"Select your HTTP client of choice.","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["axios"]},"validateResponses":{"type":"boolean","docString":"Include validators that check the responses. This way you can be sure that the API returns what you expect.","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"globalClient":{"type":"boolean","docString":"Use a global api client that will be used for all requests. Only applicable when using \'axios\'.","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"includeWrapper":{"type":"string","docString":"Include an API client wrapper to use the api easier with your user interface library.","isOptional":true,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["react-query"]}},"relations":[]},"types":{"type":"object","docString":"Alter the output of the generated types.","isOptional":true,"validator":{"strict":true},"keys":{"useGlobalTypes":{"type":"boolean","docString":"Declare all types in the global namespace. Only applicable when using \'targetLanguage\' when set to \'js\' or \'ts\'.","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"useGlobalCompasTypes":{"type":"boolean","docString":"Creates global types for types provided by Compas features. Only applicable when using \'targetLanguage\' that is set to \'js\' or \'ts\'.","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"generateDeduplicatedTypes":{"type":"boolean","docString":"Combine all types based that would be generated by all structures added via \'Generator#addStructure\' and combine them in to a single output.","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"useDeduplicatedTypesPath":{"type":"string","docString":"Import deduplicated types from the provided path. This should set to the same value as the \'outputDirectory\' in the generate call with \'generateDeduplicatedTypes\'.","isOptional":true,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}}},"relations":[]}},"relations":[]}},"relations":[],"uniqueName":"ExperimentalGenerateOptions"},"namedTypeDefinition":{"type":"anyOf","group":"experimental","name":"namedTypeDefinition","docString":"","isOptional":false,"validator":{},"values":[{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"name":"booleanDefinition","group":"experimental"}}],"uniqueName":"ExperimentalNamedTypeDefinition"},"typeDefinition":{"type":"anyOf","group":"experimental","name":"typeDefinition","docString":"","isOptional":false,"validator":{},"values":[{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"name":"namedTypeDefinition","group":"experimental"}},{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"name":"referenceDefinition","group":"experimental"}}],"uniqueName":"ExperimentalTypeDefinition"},"referenceDefinition":{"type":"object","group":"experimental","name":"referenceDefinition","docString":"","isOptional":false,"validator":{"strict":false},"keys":{"type":{"type":"string","docString":"","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["reference"]},"docString":{"type":"string","docString":"","isOptional":true,"defaultValue":"\\"\\"","validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}},"isOptional":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"defaultValue":{"type":"anyOf","docString":"","isOptional":true,"validator":{},"values":[{"type":"string","docString":"","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}},{"type":"boolean","docString":"","isOptional":false,"validator":{"convert":false}},{"type":"number","docString":"","isOptional":false,"validator":{"convert":false,"floatingPoint":false,"min":-2147483647,"max":2147483647}}]},"sql":{"type":"object","docString":"","isOptional":true,"defaultValue":"{ primary: false, searchable: false, hasDefaultValue: false, }","validator":{"strict":false},"keys":{"primary":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"searchable":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"hasDefaultValue":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}}},"relations":[]},"validator":{"type":"object","docString":"","isOptional":true,"defaultValue":"{}","validator":{"strict":false},"keys":{},"relations":[]},"reference":{"type":"object","docString":"","isOptional":false,"validator":{"strict":false},"keys":{"group":{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"group":"experimental","name":"namePart","uniqueName":"ExperimentalNamePart"}},"name":{"type":"reference","docString":"","isOptional":false,"validator":{},"reference":{"group":"experimental","name":"namePart","uniqueName":"ExperimentalNamePart"}}},"relations":[]}},"relations":[],"uniqueName":"ExperimentalReferenceDefinition"},"booleanDefinition":{"type":"object","group":"experimental","name":"booleanDefinition","docString":"","isOptional":false,"validator":{"strict":false},"keys":{"type":{"type":"string","docString":"","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1},"oneOf":["bool"]},"group":{"type":"string","docString":"","isOptional":true,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}},"name":{"type":"string","docString":"","isOptional":true,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}},"docString":{"type":"string","docString":"","isOptional":true,"defaultValue":"\\"\\"","validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}},"isOptional":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"defaultValue":{"type":"anyOf","docString":"","isOptional":true,"validator":{},"values":[{"type":"string","docString":"","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1}},{"type":"boolean","docString":"","isOptional":false,"validator":{"convert":false}},{"type":"number","docString":"","isOptional":false,"validator":{"convert":false,"floatingPoint":false,"min":-2147483647,"max":2147483647}}]},"sql":{"type":"object","docString":"","isOptional":true,"defaultValue":"{ primary: false, searchable: false, hasDefaultValue: false, }","validator":{"strict":false},"keys":{"primary":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"searchable":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"hasDefaultValue":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}}},"relations":[]},"validator":{"type":"object","docString":"","isOptional":false,"validator":{"strict":false},"keys":{"convert":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}},"allowNull":{"type":"boolean","docString":"","isOptional":true,"defaultValue":"false","validator":{"convert":false}}},"relations":[]},"oneOf":{"type":"boolean","docString":"","isOptional":true,"validator":{"convert":false}}},"relations":[],"uniqueName":"ExperimentalBooleanDefinition"},"namePart":{"type":"string","group":"experimental","name":"namePart","docString":"","isOptional":false,"validator":{"convert":false,"trim":false,"lowerCase":false,"upperCase":false,"min":1,"pattern":"/^[a-zA-Z$][a-zA-Z\\\\d]+$/g"},"uniqueName":"ExperimentalNamePart"}}';
export const experimentalStructure: any;
export namespace structure {
  export { experimentalStructure as experimental };
}
export const structureString: string;
//# sourceMappingURL=structure.d.ts.map
