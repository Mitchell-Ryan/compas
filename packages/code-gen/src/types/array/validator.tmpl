{{ const fnNumber = ctx.anonFn(item.values); }}

{{ if (item.validator.convert) { }}
  if (!Array.isArray(value)) {
    value = [value];
  }
{{ } }}

if (!Array.isArray(value)) {
  return buildError(`validator.${parentType}.type`, { propertyPath }, errorList);
}

{{ if (item.validator.min !== undefined) { }}
  if (value.length < {{= item.validator.min }}) {
    const min = {{= item.validator.min }};
    return buildError(`validator.${parentType}.min`, { propertyPath, min }, errorList);
  }
{{ } }}

{{ if (item.validator.max !== undefined) { }}
  if (value.length > {{= item.validator.max }}) {
    const max = {{= item.validator.max }};
    return buildError(`validator.${parentType}.max`, { propertyPath, max }, errorList);
  }
{{ } }}

const result = [];

for (let i = 0; i < value.length; ++i) {
  result.push({{= item.values.type }}Validator{{= fnNumber }}(value[i], propertyPath + "[" + i + "]", errorList));
}

return result;
