{{ const num = ctx.counter; }}
{{ ctx.addFunc(validatorsAnonFn({ model: model.values, ctx })); }}

{{ if (model.validator.convert) { }}
  if (!Array.isArray(value)) {
    value = [value];
  }
{{ } }}

if (!Array.isArray(value)) {
  throw _errorFn(`validator.${parentType}.type`, { propertyPath });
}

{{ if (model.validator.min !== undefined) { }}
  if (value.length < {{= model.validator.min }}) {
    const min = {{= model.validator.min }};
    throw _errorFn(`validator.${parentType}.min`, { propertyPath, min });
  }
{{ } }}

{{ if (model.validator.max !== undefined) { }}
  if (value.length > {{= model.validator.max }}) {
    const max = {{= model.validator.max }};
    throw _errorFn(`validator.${parentType}.max`, { propertyPath, max });
  }
{{ } }}

const result = [];

for (let i = 0; i < value.length; ++i) {
  result.push({{= model.values.type }}Validator{{= num }}(value[i], propertyPath + "[" + i + "]"));
}

return result;
