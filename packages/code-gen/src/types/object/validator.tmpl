{{ const numMap = {}; }}
{{ let idx = 0; }}
{{ for (const key of Object.keys(item.keys)) { }}
  {{ numMap[key] = ctx.anonFn(item.keys[key]); }}
{{ } }}


if (typeof value !== "object") {
  return buildError(`validator.${parentType}.type`, { propertyPath }, errorList);
}

const result = Object.create(null);

{{ if (item.validator.strict) { }}
  const keySet = new Set(Object.keys(value));
{{ } }}

{{ for (const key of Object.keys(item.keys)) { }}
  result[{{= quote(key) }}] = {{= item.keys[key].type }}Validator{{= numMap[key] }}(value[{{= quote(key) }}], propertyPath + "." + {{= quote(key) }}, errorList);

  {{ if (item.validator.strict) { }}
    keySet.delete({{= quote(key) }});
  {{ } }}
{{ } }}

{{ if (item.validator.strict) { }}
  if (keySet.size !== 0) {
    let extraKeys = "";
    for (const k of keySet.keys()) { extraKeys += k + ","; }

    return buildError(`validator.${parentType}.strict`, { propertyPath, extraKeys }, errorList);
  }
{{ } }}

return result;
