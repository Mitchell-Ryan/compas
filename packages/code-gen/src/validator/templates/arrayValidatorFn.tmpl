{{= validatorsAnonFn(values) }}

const {{= functionName }} = (value, propertyPath) => {
  if (isNil(value)) {
    {{ if (it.optional) { }}
      return undefined;
    {{ } else { }}
      throw AppError.validationError("validator.array.undefined", { propertyPath });
    {{ } }}
  }

  {{ if (it.convert) { }}
  if (!Array.isArray(value)) {
    value = [value];
  }
  {{ } }}

  if (!Array.isArray(value)) {
    throw AppError.validationError("validator.array.type", { propertyPath });
  }

  {{ if (it.min !== undefined) { }}
  if (value.length < {{= min }}) {
    const min = {{= quote(min) }};
    throw AppError.validationError("validator.array.min", { propertyPath, min });
  }
  {{ } }}

  {{ if (it.max !== undefined) { }}
  if (value.length > {{= max}}) {
    const max = {{= quote(max) }};
    throw AppError.validationError("validator.array.max", { propertyPath, max });
  }
  {{ } }}

  const result = [];

  for (let i = 0; i < value.length; ++i) {
    result.push({{= values.functionName }}(value[i], propertyPath + "[" + i + "]"));
  }

  return result;
};
