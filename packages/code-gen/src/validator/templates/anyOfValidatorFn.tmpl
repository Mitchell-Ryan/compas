{{ for (const v of it.values) { }}
{{= validatorsAnonFn(v) }}
{{ } }}

function {{= functionName }}(value, propertyPath) {
  if (isNil(value)) {
    {{ if (it.optional) { }}
      return undefined;
    {{ } else { }}
      throw _errorFn("validator.anyOf.undefined", { propertyPath });
    {{ } }}
  }

  const errors = [];
  {{ for (const v of values) { }}
  try {
    return {{= v.functionName }}(value, propertyPath);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  {{ } }}

  throw _errorFn("validator.anyOf.type", { propertyPath, errors });
}
