{{ for (const v of it.values) { }}
{{= validatorsAnonFn(v) }}
{{ } }}

const {{= functionName }} = (value, propertyPath) => {
  if (isNil(value)) {
    {{ if (it.optional) { }}
      return undefined;
    {{ } else { }}
      throw AppError.validationError("validator.anyOf.undefined", { propertyPath });
    {{ } }}
  }

  const errors = [];
  {{ for (const v of values) { }}
  try {
    return {{= v.functionName }}(value, propertyPath);
  } catch (e) {
    if (e intanceof AppError) {
      errors.push({ key: error.key, info: error.info });
    } else {
      errors.push({ name: error.name, message: error.message });
    }
  }
  {{ } }}

  throw AppError.validationError("validator.anyOf.type", { propertyPath, errors });
};
