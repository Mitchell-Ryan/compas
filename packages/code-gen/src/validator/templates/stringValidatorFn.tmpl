const {{= functionName }} = (value, propertyPath) => {
  if (isNil(value)) {
    {{ if (it.optional) { }}
      return {{= it.default }};
    {{ } else { }}
      throw AppError.validationError("validator.string.undefined", { propertyPath });
    {{ } }}
  }

  {{ if (it.convert) { }}
  if (typeof value !== "string") {
    value = String(value)
  }
  {{ } }}

  if (typeof value !== "string") {
    throw AppError.validationError("validator.string.type", { propertyPath });
  }

  {{ if (it.trim) { }}
  value = value.trim();
  {{ } }}

  {{ if (it.min !== undefined) { }}
  if (value.length < {{= min }}) {
    const min = {{= min }};
    throw AppError.validationError("validator.string.min", { propertyPath, min });
  }
  {{ } }}

  {{ if (it.max !== undefined) { }}
  if (value.length > {{= max }}) {
    const max = {{= max }};
    throw AppError.validationError("validator.string.max", { propertyPath, max });
  }
  {{ } }}

  {{ if (it.upperCase) { }}
  value = value.toUpperCase();
  {{ } }}

  {{ if (it.lowerCase) { }}
  value = value.toLowerCase();
  {{ } }}

  {{ if (it.oneOf !== undefined) { }}
  if ({{= oneOf.map(it => "value !== \"" + it + "\"").join(" && ") }}) {
    const oneOf = {{= quote(oneOf.join(", ")) }};
    throw AppError.validationError("validator.string.oneOf", { propertyPath, oneOf });
  }
  {{ } }}

  {{ if (it.pattern !== undefined) { }}
  {{ const patternSrc = "/" + pattern.source + "/" + pattern.flags; }}
  if (!{{= patternSrc }}.test(value)) {
    throw AppError.validationError("validator.string.pattern", { propertyPath });
  }
  {{ } }}

  return value;
};
