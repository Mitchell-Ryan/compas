let _internalBodyParser = undefined;
const parseBody = ctx => {
    if (_internalBodyParser === undefined) {
      const bp = getBodyParser();
      _internalBodyParser = ctx => new Promise(r => bp(ctx, r).then(r));
    }

    return _internalBodyParser(ctx);
}

const filterCompose = (...args) => compose(args.filter(it => it !== undefined));

const _composed = {
{{ for (const r of routes) { }}
  {{= r.name }}: undefined,
{{ } }}
};

const handlers = {
{{ for (const r of routes) { }}
  {{= r.name }}: {{ if (r.bodyValidator || r.queryValidator) { }} async {{ } }} (params, ctx, next) => {
    ctx.request.params = params;

    {{ if (r.paramsValidator) { }}
    ctx.validatedParams = {{= r.paramsValidator.funcName }}(params);
    {{ } }}

    {{ if (r.bodyValidator || r.queryValidator) { }}
    await parseBody(ctx);
    {{ } }}

    {{ if (r.bodyValidator) { }}
    ctx.validatedBody = {{= r.bodyValidator.funcName }}(ctx.request.body);
    {{ } }}

    {{ if (r.queryValidator) { }}
    ctx.validatedQuery = {{= r.queryValidator.funcName }}(ctx.request.body);
    {{ } }}

    if (_composed.{{= r.name}} === undefined) {
      const curHandler = routeHandlers.{{= r.name }};
      _composed.{{= r.name}} = filterCompose(
        {{ for (const t of r.tags) { }}
          taggedMiddleware.{{= t }},
        {{ } }}
        ...(Array.isArray(curHandler) ? curHandler : [curHandler]),
      );
    }

    return _composed.{{= r.name }}(ctx, next);
  },
{{ } }}
};

export const routeHandlers = {
{{ for (const r of routes) { }}
  /**
   * {{= r.docs.replace(/\n/g, "\\n  * ") }}
   * Tags: {{= r.tags.join(", ") }}
   * {{= r.method}} {{= r.path }}
   * @param {Object} ctx
   {{ if (r.queryValidator) { }}
   * @param { {{= r.queryValidator.typeName }} } ctx.validatedQuery
   {{ } }}
  {{ if (r.paramsValidator) { }}
  * @param { {{= r.paramsValidator.typeName }} } ctx.validatedParams
  {{ } }}
  {{ if (r.bodyValidator) { }}
  * @param { {{= r.bodyValidator.typeName }} } ctx.validatedBody
  {{ } }}
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  {{= r.name }}: (ctx, next) => next(),
{{ } }}
};
