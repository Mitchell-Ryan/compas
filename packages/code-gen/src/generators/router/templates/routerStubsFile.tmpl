{{= options.fileHeader }}

/**
 * @name NextFn
 * @typedef {function(): (void|Promise<void>)}
 */

{{ for (const groupName of Object.keys(structure)) { }}
  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}
    {{ if (item.type !== "route") { }}
    {{ continue; }}
    {{ } }}
/**
 * @name {{= item.uniqueName }}Handler
 * @typedef {function(ctx: {{= item.uniqueName }}Ctx, next: NextFn): (void|Promise<void>)}
 */

/**
 * @name {{= item.uniqueName }}Ctx
 * @typedef {object}
 {{ if (item.response) { }}* @property { {{= item.response.reference.uniqueName }} } [body] {{ } }}
 {{ if (item.query) { }}* @property { {{= item.query.reference.uniqueName }} } validatedQuery {{ } }}
 {{ if (item.params) { }}* @property { {{= item.params.reference.uniqueName }} } validatedParams {{ } }}
 {{ if (item.body) { }}* @property { {{= item.body.reference.uniqueName }} } validatedBody {{ } }}
 */
  {{ } }}
{{ } }}


{{ for (const groupName of Object.keys(structure)) { }}
/**
* @name {{= groupName }}Handlers
* @typedef {object}
  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}
    {{ if (item.type !== "route") { }}
    {{ continue; }}
    {{ } }}
* @property { {{= item.uniqueName }}Handler} {{= item.name }}
  {{ } }}
*/
{{ } }}
