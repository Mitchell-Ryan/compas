/**
 * {{= model.docString }}
 * @param {*} value
 * @param {string} [propertyPath]
 * @returns { {{= model.uniqueName }}}
 */
export function validate{{= model.uniqueName }}(value, propertyPath = "$") {
 let result = value;

 {{ const preValidate = quote("preValidate" + model.uniqueName); }}
 {{ const postValidate = quote("postValidate" + model.uniqueName); }}
 if ({{= preValidate }} in validatorHooks) {
    result = validatorHooks[{{= preValidate }}](result);
 }

 result = {{= model.type }}Validator{{= ctx.counter }}(result, propertyPath);

 if ({{= postValidate }} in validatorHooks) {
    return validatorHooks[{{= postValidate }}](result);
 } else {
   return result;
 }
}

{{ const fn = validatorsAnonFn({ model, ctx }); }}
{{ ctx.functions += fn; }}
