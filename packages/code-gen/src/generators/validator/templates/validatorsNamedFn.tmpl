{{ const fnNumber = ctx.anonFn(model); }}

/**
 * {{= model.docString }}
 * @param {*} value
 * @param {string} [propertyPath]
 {{ if (!options.validatorCollectErrors) { }}
 * @returns { {{= options.useTypescript ? `import("./types").${model.uniqueName}` : model.uniqueName }}}
 {{ } else { }}
 * @returns { { errors: ({ key: string, info: object}[]|undefined), data: {{= options.useTypescript ? `import("./types").${model.uniqueName}` : model.uniqueName }}|undefined } }
 {{ } }}
 */
{{= lowerCaseFirst(model.name) }}: (value, propertyPath = "$") => {
 let result = value;

 {{ const preValidate = quote("preValidate" + model.uniqueName); }}
 {{ const postValidate = quote("postValidate" + model.uniqueName); }}
 if ({{= preValidate }} in validatorHooks) {
    result = validatorHooks[{{= preValidate }}](result);
 }

{{ if (!options.validatorCollectErrors) { }}
result =  {{= model.type }}Validator{{= fnNumber }}(result, propertyPath);
if ({{= postValidate }} in validatorHooks) {
    return validatorHooks[{{= postValidate }}](result);
 } else {
   return result;
 }
{{ } else { }}

const errorList = [];
result = {{= model.type }}Validator{{= fnNumber }}(result, propertyPath, errorList, "{{= model.type }}");

if (errorList.length > 0) {
  return { errors: errorList };
} else {
  if ({{= postValidate }} in validatorHooks) {
      return validatorHooks[{{= postValidate }}]({ data: result });
   } else {
     return { data: result };
   }
}
{{ } }}
((newline))
},
((newline))
