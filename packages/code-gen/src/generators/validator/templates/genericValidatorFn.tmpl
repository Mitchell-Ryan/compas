{{= validatorsAnonFn(keys) }}
{{= validatorsAnonFn(values) }}

function {{= functionName }}(value, propertyPath) {
  if (isNil(value)) {
    {{ if (it.isOptional) { }}
      return {{= it.defaultValue }};
    {{ } else { }}
      throw _errorFn("validator.generic.undefined", { propertyPath });
    {{ } }}
  }
  if (typeof value !== "object") {
    throw _errorFn("validator.generic.type", { propertyPath });
  }

  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const validatedKey = {{= it.keys.functionName }}(key, propertyPath + ".$key");
    const validatedValue = {{= it.values.functionName }}(value[key], propertyPath + ".$value");

    result[validatedKey] = validatedValue;
  }

  return result;
}
