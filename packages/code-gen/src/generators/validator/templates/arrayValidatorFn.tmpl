{{= validatorsAnonFn(values) }}

function {{= functionName }}(value, propertyPath) {
  if (isNil(value)) {
    {{ if (it.isOptional) { }}
      return {{= it.defaultValue }};
    {{ } else { }}
      throw _errorFn("validator.array.undefined", { propertyPath });
    {{ } }}
  }

  {{ if (it.validator.convert) { }}
  if (!Array.isArray(value)) {
    value = [value];
  }
  {{ } }}

  if (!Array.isArray(value)) {
    throw _errorFn("validator.array.type", { propertyPath });
  }

  {{ if (it.validator.min !== undefined) { }}
  if (value.length < {{= validator.min }}) {
    const min = {{= validator.min }};
    throw _errorFn("validator.array.min", { propertyPath, min });
  }
  {{ } }}

  {{ if (it.validator.max !== undefined) { }}
  if (value.length > {{= validator.max }}) {
    const max = {{= validator.max }};
    throw _errorFn("validator.array.max", { propertyPath, max });
  }
  {{ } }}

  const result = [];

  for (let i = 0; i < value.length; ++i) {
    result.push({{= values.functionName }}(value[i], propertyPath + "[" + i + "]"));
  }

  return result;
}
