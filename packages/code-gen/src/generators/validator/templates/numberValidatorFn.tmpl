{{ if (model.validator.convert) { }}
  if (typeof value !== "number") {
    value = Number(value)
  }
{{ } }}

if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
  throw _errorFn("validator.number.type", { propertyPath });
}

{{ if (model.validator.integer) { }}
  if (!Number.isInteger(value)) {
    throw _errorFn("validator.number.integer", { propertyPath });
  }
{{ } }}

{{ if (model.validator.min !== undefined) { }}
  if (value < {{= model.validator.min }}) {
    const min = {{= model.validator.min }};
    throw _errorFn("validator.number.min", { propertyPath, min });
  }
{{ } }}

{{ if (model.validator.max !== undefined) { }}
  if (value > {{= model.validator.max }}) {
    const max = {{= model.validator.max }};
    throw _errorFn("validator.number.max", { propertyPath, max });
  }
{{ } }}

{{ if (model.oneOf !== undefined) { }}
  if ({{= model.oneOf.map(it => "value !== " + it).join(" && ") }}) {
    const oneOf = {{= quote(model.oneOf.join(", ")) }};
    throw _errorFn("validator.number.oneOf", { propertyPath, oneOf });
  }
{{ } }}

return value;
