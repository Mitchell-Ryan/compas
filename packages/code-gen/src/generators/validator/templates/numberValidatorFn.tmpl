function {{= functionName }}(value, propertyPath) {
  if (isNil(value)) {
    {{ if (it.optional) { }}
      return {{= it.default }};
    {{ } else { }}
      throw _errorFn("validator.number.undefined", { propertyPath });
    {{ } }}
  }

  {{ if (it.validator.convert) { }}
  if (typeof value !== "number") {
    value = Number(value)
  }
  {{ } }}

  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
      throw _errorFn("validator.number.type", { propertyPath });
  }

  {{ if (it.validator.integer) { }}
  if (!Number.isInteger(value)) {
      throw _errorFn("validator.number.integer", { propertyPath });
  }
  {{ } }}

  {{ if (it.validator.min !== undefined) { }}
  if (value < {{= validator.min }}) {
    const min = {{= validator.min }};
    throw _errorFn("validator.number.min", { propertyPath, min });
  }
  {{ } }}

  {{ if (it.validator.max !== undefined) { }}
  if (value > {{= validator.max }}) {
    const max = {{= validator.max }};
    throw _errorFn("validator.number.max", { propertyPath, max });
  }
  {{ } }}

  {{ if (it.oneOf !== undefined) { }}
  if ({{= oneOf.map(it => "value !== " + it).join(" && ") }}) {
    const oneOf = {{= quote(oneOf.join(", ")) }};
    throw _errorFn("validator.number.oneOf", { propertyPath, oneOf });
  }
  {{ } }}

  return value;
}
