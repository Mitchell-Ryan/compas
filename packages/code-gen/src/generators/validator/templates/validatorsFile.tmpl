{{= options.fileHeader }}

export const validatorHooks = {};

const isNil = value => value === undefined || value === null;

/**
 * This function should not throw as the corresponding validator will do that
 * @callback ValidationErrorFn
 * @param {string} key
 * @param {Object} info
 */

/**
 * @type ValidationErrorFn
 */
let _errorFn = (key, info) => {
  const err = new Error(`ValidationError: ${key}`);
  err.key = key;
  err.info = info;

  return err;
}

/**
 * Set a different error function, for example AppError.validationError
 * @param {ValidationErrorFn} fn
 */
export function validatorSetErrorFn(fn) {
  _errorFn = fn;
}

{{ const ctx = { counter: 0, functions: [] }; }}
{{ ctx.addFunc = fn => { ctx.functions.push(fn); }; }}

{{ for (const groupName of Object.keys(structure)) { }}

  export const {{= groupName }}Validators = {

  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}

    {{ if (options.validator_enabledTypes.indexOf(item.type) === -1) { }}
    {{ continue; }}
    {{ } }}

    {{= validatorsNamedFn({ ctx, model: item }) }}

  {{ } }}

  };

{{ } }}

{{= ctx.functions.join("\n") }}
