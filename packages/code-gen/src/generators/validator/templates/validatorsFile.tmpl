/* eslint-disable no-unused-vars */

{{ if (opts.fileHeader !== undefined) { }}
{{= opts.fileHeader }}
{{ } }}

export const validatorHooks = {};

const isNil = value => value === undefined || value === null;

/**
 * This function should not throw as the corresponding validator will do that
 * @callback ValidationErrorFn
 * @param {string} key
 * @param {Object} info
 */

/**
 * @type ValidationErrorFn
 */
let _errorFn = (key, info) => {
  const err = new Error(`ValidationError: ${key}`);
  err.key = key;
  err.info = info;

  return err;
}

/**
 * Set a different error function, for example AppError.validationError
 * @param {ValidationErrorFn} fn
 */
export function validatorSetErrorFn(fn) {
  _errorFn = fn;
}

{{ const ctx = { counter: 0, functions: [] }; }}
{{ ctx.addFunc = fn => { ctx.functions.push(fn); }; }}

{{ for (const group of it.groups) { }}
  export const {{= lowerCaseFirst(group) }}Validators = {
    {{ for (const v of it.validatorsToGenerate) { }}
      {{ if (models[v].group === group) { }}
        {{= validatorsNamedFn({ models, ctx, model: models[v] }) }}
      {{ } }}
    {{ } }}
  };
{{ } }}

{{= ctx.functions.join("\n") }}
