{{ const url = model.path.split("/").map(part => { if (part.startsWith(":")) { return "${params." + part.substring(1) + "}"; } else { return part; } }).join("/"); }}

/**
 * {{= model.uniqueName }}
 * Tags: {{= model.tags.join(", ") }}
 * Docs: {{= model.docString }}
{{ if (model.params) { }}
 * @param { {{= model.params.reference.uniqueName + "_Input" }}} params
{{ } }}
{{ if (model.query) { }}
 * @param { {{= model.query.reference.uniqueName }}_Input} query
{{ } }}
{{ if (model.body) { }}
 * @param { {{= model.body.reference.uniqueName }}_Input} body
{{ } }}
{{ if (model.files) { }}
 * @param { {{= model.files.reference.uniqueName }}_Input} files
{{ } }}
{{ if (model.response) { }}
 * @returns {Promise.<{{= model.response.reference.uniqueName }}>}
{{ } else { }}
 * @returns {Promise.<*>}
{{ } }}

 */
{{= model.name }}: async function (
{{ if (model.params) { }}
params,
{{ } }}
{{ if (model.query) { }}
query,
{{ } }}
{{ if (model.body) { }}
body,
{{ } }}
{{ if (model.files) { }}
files,
{{ } }}
) {
    checkApiClient();

    {{ if (model.files) { }}
      // eslint-disable-next-line
      const data = new FormData();
      for (const key of Object.keys(files)) {
        data.set(key, files[key].data, files[key].name);
      }
      {{ if (model.body) { }}
        for (const key of Object.keys(body)) {
          data.set(key, body[key]);
        }
      {{ } }}
    {{ } else if (model.body) { }}
      const data = body;
    {{ } }}

    const response = await _internalClient.request({
      url: `{{= url }}`,
      method: "{{= model.method.toLowerCase() }}",
      params: {{ if (model.query) { }}query{{ } else { }}{}{{ } }},
      data: {{ if (model.body || model.files) { }}data{{ } else { }}{}{{ } }}
    });

    return response.data;
},
((newline))
