{{ let hasParam = model.params !== undefined; }}
{{ const url = model.path.split("/").map(part => { if (part.startsWith(":")) { hasParam = true; return "${params." + part.substring(1) + "}"; } else { return part; } }).join("/"); }}

/**
 * {{= model.uniqueName }}
 * Tags: {{= model.tags.join(", ") }}
 * Docs: {{= model.docString }}
{{ if (hasParam) { }}
 * @param { {{= model.params ? model.params.reference.uniqueName + "_Optional" : "object" }}} params
{{ } }}
{{ if (model.query) { }}
 * @param { {{= model.query.reference.uniqueName }}_Optional} query
{{ } }}
{{ if (model.body) { }}
 * @param { {{= model.body.reference.uniqueName }}_Optional} body
{{ } }}
{{ if (model.response) { }}
 * @return {Promise.<{{= model.response.reference.uniqueName }}>}
{{ } else { }}
 * @return {Promise.<*>}
{{ } }}

 */
{{= lowerCaseFirst(model.name) }}: async function (
{{ if (hasParam) { }}
params,
{{ } }}
{{ if (model.query) { }}
query,
{{ } }}
{{ if (model.body) { }}
body,
{{ } }}
) {
    checkApiClient();

    {{ if (opts.enableMocks && model.response !== undefined) { }}
      try {
        const response = await _internalClient.request({
          url: `{{= url }}`,
          method: "{{= model.method.toLowerCase() }}",
          params: {{ if (model.query) { }}query{{ } else { }}{}{{ } }},
          data: {{ if (model.body) { }}body{{ } else { }}{}{{ } }}
        });

        setXRequestId(response.headers);

        return response.data;
      } catch (e) {
        if (e.response && e.response.status === 405) {
          return {{= lowerCaseFirst(model.response.reference.group) }}Mocks.{{= lowerCaseFirst(model.response.reference.name) }}();
        }
        throw e;
      }
    {{ } else { }}
        const response = await _internalClient.request({
          url: `{{= url }}`,
          method: "{{= model.method.toLowerCase() }}",
          params: {{ if (model.query) { }}query{{ } else { }}{}{{ } }},
          data: {{ if (model.body) { }}body{{ } else { }}{}{{ } }}
        });

        setXRequestId(response.headers);

        return response.data;
    {{ } }}
},
