{{ const importSet = new Set(); }}
{{ for (const groupName of Object.keys(structure)) { }}
  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}
    {{ if (item.type !== "route") { }}
    {{ continue; }}
    {{ } }}

{{ if (item.response) { }} {{ importSet.add(item.response.reference.uniqueName); }}{{ } }}
{{ if (item.params) { }} {{ importSet.add(item.params.reference.uniqueName + "_Input"); }}{{ } }}
{{ if (item.query) { }} {{ importSet.add(item.query.reference.uniqueName + "_Input"); }}{{ } }}
{{ if (item.body) { }} {{ importSet.add(item.body.reference.uniqueName + "_Input"); }}{{ } }}

  {{ } }}
{{ } }}

import {
{{ for (const imp of importSet) { }}
{{= imp }},
{{ } }}
} from "./types";
((newline))

{{ for (const groupName of Object.keys(structure)) { }}
  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}
    {{ if (item.type !== "route") { }}
    {{ continue; }}
    {{ } }}

interface {{= item.uniqueName }}Call {
    (
    {{ if (item.params) { }}params: {{= item.params.reference.uniqueName + "_Input" }},{{ } }}
    {{ if (item.query) { }}query: {{= item.query.reference.uniqueName + "_Input" }},{{ } }}
    {{ if (item.body) { }}body: {{= item.body.reference.uniqueName + "_Input" }},{{ } }}
    ): Promise<{{= item.response ? item.response.reference.uniqueName : "unknown" }}>
};
((newline))

  {{ } }}
{{ } }}


{{ for (const groupName of Object.keys(structure)) { }}
  export type {{= groupName }}Api = {

  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}

    {{ if (item.type !== "route") { }}
    {{ continue; }}
    {{ } }}

    {{= item.name }}: {{= item.uniqueName }}Call;

  {{ } }}

  };
((newline))

{{ } }}
