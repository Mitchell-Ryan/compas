import{_ as n,c as s,o as a,a as t}from"./app.cf930e1c.js";const h='{"title":"Route invalidations","description":"","frontmatter":{},"headers":[{"level":2,"title":"Structure","slug":"structure"},{"level":2,"title":"Usage","slug":"usage"}],"relativePath":"features/route-invalidations.md"}',p={},o=t(`<h1 id="route-invalidations" tabindex="-1">Route invalidations <a class="header-anchor" href="#route-invalidations" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires an understanding of the code generated api and api clients. See <a href="/features/code-gen-api.html">Code generator HTTP api</a> for more information.</p></div><p>The Compas structure also allows for defining route invalidations. Route invalidations are a typed and validated way for specifying which route data are altered on a successful call of a POST, PUT, PATCH or DELETE route. For most generators, like the <code>router</code>, <code>validator</code> and <code>apiClient</code> this is a noop. But for caching api clients, like react-query (via the <code>reactQuery</code> generator), this achieves a way to invalidate the cache for all routes, which data has changed as a result of a successful mutation, with the toggle of an option.</p><h2 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-hidden="true">#</a></h2><p>The structure is defined via a <code>.invalidations</code> function on routes. Let&#39;s take a look at some examples;</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token comment">// Example get routes</span>
  <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// For operations that mutate all responses in this group, just invalidate the whole group.</span>
  <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/shuffle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;shuffle&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">invalidations</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">invalidates</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// For operations invalidating a specific route.</span>
  <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;create&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">invalidations</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">invalidates</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Invalidate multiple routes,</span>
  <span class="token comment">// Both this update route and \`AppGet\` define a \`id\` param, so we can use \`useSharedParams\` to only invalidate the get route of this specific entity.</span>
  <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">invalidations</span><span class="token punctuation">(</span>
      <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">invalidates</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">invalidates</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">useSharedParams</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Provide a specification to map properties.</span>
  <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/toggle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;toggle&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">invalidations</span><span class="token punctuation">(</span>
      <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">invalidates</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">specification</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All above examples can be mixed and matched, and the generator will guide you in the right direction if some invalidation is invalid.</p><ul><li><code>useSharedParams</code> and <code>useQueryParams</code> are shorthand properties for populating the <code>specification</code>. They extract the shared properties of the source and target route and build up the specification. Existing <code>specification</code> properties take precedence over properties that would be defined because of <code>useSharedParams</code> or <code>useSharedQuery</code>.</li><li>The <code>specification</code> object is a way of specifying how the target <code>params</code> and <code>query</code> object look like. The arrays of strings define an &#39;object path&#39; for which values of the current route to use.</li></ul><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>When this definition is used with the <code>reactQuery</code> generator, Compas generates something like the below snippet with based on the above defined <code>R.put(&quot;/:id&quot;, &quot;update&quot;)</code>:</p><div class="language-tsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useAppUpdate</span><span class="token punctuation">(</span>
  options<span class="token operator">:</span> UseMutationOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  hookOptions<span class="token operator">:</span> <span class="token punctuation">{</span> invalidateQueries<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> UseMutationResult <span class="token punctuation">{</span>
  <span class="token comment">// ... setup</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>hookOptions<span class="token operator">?.</span>invalidateQueries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> originalOnSuccess <span class="token operator">=</span> options<span class="token punctuation">.</span>onSuccess<span class="token punctuation">;</span>

    options<span class="token punctuation">.</span><span class="token function-variable function">onSuccess</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> variables<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> id<span class="token operator">:</span> variables<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> originalOnSuccess <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">originalOnSuccess</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> variables<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ... call useMutation</span>
<span class="token punctuation">}</span>
</code></pre></div><p>As you can see, Compas does not call the invalidations by default, <code>hookOptions.invalidateQueries</code> has to be truthy for that to happen. It will also handle and call the <code>onSuccess</code> option if defined. Read the <a href="https://react-query.tanstack.com/guides/query-invalidation#_top" target="_blank" rel="noopener noreferrer">react-query docs</a> about Query invalidation for more information.</p>`,12),e=[o];function c(u,i,l,k,r,d){return a(),s("div",null,e)}var g=n(p,[["render",c]]);export{h as __pageData,g as default};
