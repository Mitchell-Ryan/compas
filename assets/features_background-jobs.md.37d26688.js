import{_ as e,c as o,o as r,a as i}from"./app.cf930e1c.js";const f='{"title":"Background jobs","description":"","frontmatter":{},"headers":[{"level":2,"title":"API","slug":"api"},{"level":3,"title":"queueWorkerCreate","slug":"queueworkercreate"},{"level":3,"title":"queueWorkerAddJob","slug":"queueworkeraddjob"},{"level":3,"title":"queueWorkerRegisterCronJobs","slug":"queueworkerregistercronjobs"},{"level":3,"title":"jobQueueCleanup","slug":"jobqueuecleanup"},{"level":3,"title":"jobQueueInsights","slug":"jobqueueinsights"}],"relativePath":"features/background-jobs.md"}',t={},a=i('<h1 id="background-jobs" tabindex="-1">Background jobs <a class="header-anchor" href="#background-jobs" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/store</code> to be installed</p></div><p>The queue system is based on &#39;static&#39; units of work to be done in the background. It supports the following:</p><ul><li>Job priority&#39;s. Lower value means higher priority.</li><li>Scheduling jobs at a set time</li><li>Customizable handler timeouts</li><li>Recurring job handling</li><li>Concurrent workers pulling from the same queue</li><li>Specific workers for a specific job</li></ul><p>When to use which function of adding a job:</p><ul><li><code>queueWorkerAddJob</code>: use the queue as background processing of defined units. Like converting a file to different formats, sending async or scheduled notifications. Jobs created will have a priority of &#39;5&#39;.</li><li><code>queueWorkerRegisterCronJobs</code>: use the queue for scheduled recurring jobs based on the specific <code>cronExpression</code>. Jos created will have a default priority of &#39;4&#39;.</li></ul><p>Every job runs with a timeout. It is determined in the following order:</p><ul><li>Timeout of the specific job, via <code>handlerTimeout</code> property. Should be used sporadically</li><li>Timeout of a specific handler as provided by the <code>handler</code> property.</li><li>The <code>handlerTimeout</code> property of the QueueWorker</li></ul><p>Jobs are picked up if the following criteria are met:</p><ul><li>The job is not complete yet</li><li>The job&#39;s &#39;scheduledAt&#39; property is in the past</li><li>The job&#39;s &#39;retryCount&#39; value is lower than the <code>maxRetryCount</code> option.</li></ul><p>Eligible jobs are sorted in the following order:</p><ul><li>By priority ascending, so a lower priority value job will run first</li><li>By scheduledAt ascending, so an earlier scheduled job will be picked before a later scheduled job.</li></ul><p>If a job fails, by throwing an error, other jobs may run first before any retries happen, based on the above ordering.</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h2><p>Provided by <code>@compas/store</code>. A summary of the available functionality. See the docs on these functions for more information and their accepted arguments.</p><h3 id="queueworkercreate" tabindex="-1">queueWorkerCreate <a class="header-anchor" href="#queueworkercreate" aria-hidden="true">#</a></h3><p>This function constructs a worker, applies the default options if no value is provided and returns a <code>{ start, stop }</code> synchronously. <code>start</code> needs to be called before any jobs are picked up. If you need to shutdown gracefully you can use <code>await stop()</code>. This will finish all running jobs and prevent picking up new jobs. See the <code>QueueWorkerOptions</code> as the second argument of this function for all available options and their defaults.</p><h3 id="queueworkeraddjob" tabindex="-1">queueWorkerAddJob <a class="header-anchor" href="#queueworkeraddjob" aria-hidden="true">#</a></h3><p>Add a new job to the queue. The <code>name</code> option is mandatory. This function returns the <code>id</code> of the inserted job.</p><h3 id="queueworkerregistercronjobs" tabindex="-1">queueWorkerRegisterCronJobs <a class="header-anchor" href="#queueworkerregistercronjobs" aria-hidden="true">#</a></h3><p>Register cron jobs to the queue. Any existing cron job not in this definition will be removed from the queue, even if pending jobs exist. When the cron expression of a job is changed, it takes effect immediately. The system won&#39;t ever upgrade an existing normal job to a cron job. Note that your job may not be executed on time. Use <code>job.data.cronLastCompletedAt</code> and <code>job.data.cronExpression</code> to decide if you still need to execute your logic. The provided <code>cronExpression</code> is evaluated in &#39;utc&#39; mode.</p><p><a href="https://www.npmjs.com/package/cron-parser" target="_blank" rel="noopener noreferrer">cron-parser</a> is used for parsing the <code>cronExpression</code>. If you need a different type of scheduler, use <code>queueWorkerAddJob</code> manually in your job handler.</p><h3 id="jobqueuecleanup" tabindex="-1">jobQueueCleanup <a class="header-anchor" href="#jobqueuecleanup" aria-hidden="true">#</a></h3><p>A handler to remove jobs from the queue. The queue is the most performant when old completed jobs are cleaned up periodically. The advised way to use this job is the following:</p><ul><li>In <code>queueWorkerRegisterCronJobs</code>: <code>{ name: &quot;compas.queue.cleanup&quot;, cronExpression: &quot;0 1 * * *&quot; }</code> to run this job daily at 1 AM.</li><li>In your handler object: <code>{ &quot;compas.queue.cleanup&quot;: jobQueueCleanup({ queueHistoryInDays: 5 }), }</code></li></ul><h3 id="jobqueueinsights" tabindex="-1">jobQueueInsights <a class="header-anchor" href="#jobqueueinsights" aria-hidden="true">#</a></h3><p>Get insights in the amount of jobs that are ready to be picked up (ie <code>pending</code>) and how many jobs are scheduled at some time in the future. The advised way to use this job is the following:</p><ul><li>In <code>queueWorkerRegisterCronJobs</code>: <code>{ name: &quot;compas.queue.insights&quot;, cronExpression: &quot;0 * * * *&quot; }</code> to run this job every hour.</li><li>In your handler object: <code>{ &quot;compas.queue.insights&quot;: jobQueueInsights(), }</code></li></ul>',28),s=[a];function n(u,d,l,c,h,p){return r(),o("div",null,s)}var g=e(t,[["render",n]]);export{f as __pageData,g as default};
