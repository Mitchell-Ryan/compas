import{_ as e,c as t,o,a as i}from"./app.cf930e1c.js";const m='{"title":"Contributing","description":"","frontmatter":{"editLink":false},"headers":[{"level":3,"title":"Development & scripts","slug":"development-scripts"},{"level":3,"title":"Improving test coverage","slug":"improving-test-coverage"},{"level":3,"title":"Debugging tests","slug":"debugging-tests"},{"level":3,"title":"Publishing","slug":"publishing"},{"level":3,"title":"WebStorm","slug":"webstorm"}],"relativePath":"contributing.md"}',a={},n=i(`<h1 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">#</a></h1><h3 id="development-scripts" tabindex="-1">Development &amp; scripts <a class="header-anchor" href="#development-scripts" aria-hidden="true">#</a></h3><p>Development should be pretty straight forward. Run <code>compas test</code> to run the test suite. Before making a commit, make sure to run <code>compas lint</code>. Note that this automatically tries to fix most issues. All commands in this repo can be run vai the &#39;self-hosted&#39; <code>@compas/cli</code>. Run <code>compas help</code> for an overview. Below a few commands related to things you could be working on:</p><p><strong>General</strong>:</p><div class="language-"><pre><code># Install dependencies
npm install
# Format with ESLint &amp; Prettier
compas lint
# Run the tests
compas test (--coverage)
# Update type definition files
compas run types
</code></pre></div><p><strong>Documentation</strong>:</p><div class="language-"><pre><code># Sync README&#39;s, changelog, contributing and regenerate API reference
compas run syncMetadata
</code></pre></div><p><strong>Code generation, @compas/store structure changes</strong>:</p><div class="language-"><pre><code>compas generate
</code></pre></div><h3 id="improving-test-coverage" tabindex="-1">Improving test coverage <a class="header-anchor" href="#improving-test-coverage" aria-hidden="true">#</a></h3><p>There are many things not covered by tests, there are a few ways to improve coverage, but let&#39;s start by running <code>compas test --coverage</code> and opening <code>file:///path/to/repo/coverage/lcov-report/index.html</code> in your browser.</p><p>If it is your first time doing this, start by checking out files in the <code>generated</code> directory. Most of these files are partially covered, and it should be pretty straight forward to find a related function that is tested, and doing the same for the yet untested function. For new cases related to code generation, add the missing case in <code>gen/testing.js</code> and regenerate with <code>compas generate</code>. Then run <code>compas test --coverage</code> again to see that the new case is not yet covered by tests.</p><h3 id="debugging-tests" tabindex="-1">Debugging tests <a class="header-anchor" href="#debugging-tests" aria-hidden="true">#</a></h3><p>Debug that file as if you debug whatever other Node.js script. E.g in Webstorm: (right-mouse click -&gt; Debug <code>file.test.js</code>)</p><h3 id="publishing" tabindex="-1">Publishing <a class="header-anchor" href="#publishing" aria-hidden="true">#</a></h3><ul><li>Ensure you are logged in to npm with <code>npm whoami</code>, when logged out; <code>npm login</code></li><li>Ensure you have the <code>main</code>-branch checked out, and are completely up-to-date</li><li>Write to the changelog <ul><li>Run <code>compas run changelog</code></li><li>Replace <code>x.x.x</code> with the new version (3 times) in <code>./changelog.md</code></li><li>Write about the changes and how to use it them, in <code>docs/releases/x.x.x.md</code></li></ul></li><li>Check if types are still generating with <code>compas run types</code></li><li>Sync metadata: <code>compas run syncMetadata</code>, this will sync the changelog to the docs folder and regenerate the api reference.</li><li>Commit with <code>chore: prepare release for vX.X.X</code> and push to main</li><li>Run <code>compas release --version vX.x.X --otp 111111</code>. This will build &amp; publish all packages <ul><li>Specify the new version</li><li>Check packages it will publish and send <code>y</code></li><li>Give a new OTP every time it is asked.</li></ul></li></ul><h3 id="webstorm" tabindex="-1">WebStorm <a class="header-anchor" href="#webstorm" aria-hidden="true">#</a></h3><ul><li><code>Help</code> &gt; <code>Edit Custom Properties...</code> &gt; <code>idea.javascript.max.evaluation.complexity=80</code></li><li>Open <code>/package.json</code> &gt; <code>Find Actions</code> &gt; <code>Apply Prettier Code Style Rules</code></li><li>Open <code>/.eslintrc.cjs</code> &gt; <code>Find Actions</code> &gt; <code>Apply ESLint Code Style Rules</code></li><li><code>Settings</code> &gt; <code>Node.js And NPM</code> &gt; <code>Coding assistance for Node.js</code></li><li><code>Edit configurations...</code> &gt; <code>Templates/Node.js</code>: <ul><li><code>V8 Profiling</code> &gt; <code>Allow taking heap snapshots</code></li><li><code>Configuration</code> &gt; <code>Working directory</code> &gt; <code>/path/to/checkout/root</code></li></ul></li></ul>`,18),c=[n];function s(d,r,l,g,h,p){return o(),t("div",null,c)}var v=e(a,[["render",s]]);export{m as __pageData,v as default};
