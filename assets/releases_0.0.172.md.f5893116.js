import{_ as s,c as e,o as n,a}from"./app.cf930e1c.js";const g='{"title":"Release notes v0.0.172","description":"","frontmatter":{},"headers":[{"level":2,"title":"Session store","slug":"session-store"},{"level":3,"title":"Migration","slug":"migration"},{"level":2,"title":"In closing","slug":"in-closing"}],"relativePath":"releases/0.0.172.md"}',o={},t=a(`<h1 id="release-notes-v0-0-172" tabindex="-1">Release notes v0.0.172 <a class="header-anchor" href="#release-notes-v0-0-172" aria-hidden="true">#</a></h1><p>Since Compas v0.0.14 we have been working on a session management experience that works across the board. Rocking quite some features:</p><ul><li>Allows localhost cookies to develop against a remote staging server</li><li>Completely backend managed session lifecycle, with custom rolling session behaviour</li><li>Secure defaults for production environments</li><li>Quick setup, all kinks worked out.</li></ul><p>However, there are two major downsides;</p><ul><li>Quite a few workarounds where added, like the <code>compas proxy</code> rewriting cookies, and things like <code>keepPublicCookie</code> for the frontend to check if a session may exist before attempting any call.</li><li>The cookies don&#39;t work in all environments. Where things like mobile apps need to open a webview, login and then hope that the cookies that where returned would be added to api calls from the app.</li></ul><p>So we created a new session store accessible via &#39;fancy session tokens&#39; in a JSON Web Token format. Which doesn&#39;t do any assumptions about how tokens are transported over the network. Shifting responsibility for secure transport, storage on the client and refreshing the session to the end user of Compas, you \u{1F603}</p><h2 id="session-store" tabindex="-1">Session store <a class="header-anchor" href="#session-store" aria-hidden="true">#</a></h2><p>Migration to the new session store is quite the task. Let&#39;s start by removing the deprecated components:</p><ul><li>Remove any reference to <code>session</code> imported from <code>@compas/server</code>. This is the Koa middleware that currently powers the full cookie management. There is no replacement in <code>@compas/server</code>.</li><li>Remove any reference <code>newSessionStore</code> imported from <code>@compas/store</code>. This component was used to persist sessions created by the session middleware in PostgreSQL.</li></ul><p>The last session detail related to the old session management is <code>ctx.session</code> used in your route handlers. It is up to you if you want to replace it completely or if you want to use the new session management functions to be based on <code>ctx.session</code>. The next steps will describe current behaviours of <code>ctx.session</code> and which <code>sessionStoreXxx</code> calls relate to that behaviour. Please refer to the <a href="/features/session-handling.html">session docs</a> for details on the functions mentioned below.</p><h4 id="creating-a-session" tabindex="-1">Creating a session <a class="header-anchor" href="#creating-a-session" aria-hidden="true">#</a></h4><p>Previously creating a session could be done by setting <code>ctx.session</code> to a new object. This would automatically persist the session and set cookies in the response. This is now powered by <code>sessionStoreCreate</code> and the returned tokens need to manually be transported to the client. It is advised to return the tokens in the response body.</p><h4 id="reading-the-session" tabindex="-1">Reading the session <a class="header-anchor" href="#reading-the-session" aria-hidden="true">#</a></h4><p>Reading the session was as easy as checking <code>ctx.session</code>. This is a bit more complex in the new system. The application needs to maintain the session id in the request context, because this is needed to for example update the session. By calling <code>sessionStoreGet</code> you get an object containing <code>id</code>, <code>checksum</code> and <code>data</code>. You could store this information on <code>ctx._session</code> for example as <code>id</code> and <code>checksum</code> are necessary for <code>sessionStoreUpdate</code> and <code>sessionStoreInvalidate</code>. But <code>data</code> is the one you need to populate <code>ctx.session</code>. We advise to use an <code>Authorization: Bearer xxx</code> header format for transporting the access token from the client to the server.</p><h4 id="updating-a-session" tabindex="-1">Updating a session <a class="header-anchor" href="#updating-a-session" aria-hidden="true">#</a></h4><p>The old session management would automatically check if the <code>ctx.session</code> object did change and persist the new session data if necessary. The new <code>sessionStoreUpdate</code> call does exactly that, and thus can be called on every request with minimal performance impact.</p><h4 id="removing-a-session" tabindex="-1">Removing a session <a class="header-anchor" href="#removing-a-session" aria-hidden="true">#</a></h4><p>Previously destroying a session would be done by setting <code>ctx.session</code> to <code>null</code>. This is now handled via <code>sessionStoreInvalidate</code> which revokes all tokens related to the session.</p><h4 id="custom-max-age" tabindex="-1">Custom max age <a class="header-anchor" href="#custom-max-age" aria-hidden="true">#</a></h4><p>The previous session management had features to set a custom <code>_maxAge</code> on <code>ctx.session</code>. This is not supported anymore.</p><h4 id="sliding-session-window" tabindex="-1">Sliding session window <a class="header-anchor" href="#sliding-session-window" aria-hidden="true">#</a></h4><p>The default settings for session management did set up a rolling session system. Meaning that sessions would automatically be renewed on incoming requests if necessary. This is not possible in the new system. Your api need to have some way of refreshing the session via for example a new endpoint, which internally calls <code>sessionStoreRefreshTokens</code>. And the api clients need to check the <code>exp</code> field on the access and refresh tokens to decide if they should call the refresh endpoint.</p><h4 id="cleaning-up-old-sessions" tabindex="-1">Cleaning up old sessions <a class="header-anchor" href="#cleaning-up-old-sessions" aria-hidden="true">#</a></h4><p>Previously we exposed a <code>.clean()</code> function on the session store returned from <code>newSessionStore</code>. This would remove all session records PostgreSQL that where expired. The new system has the same feature via <code>sessionStoreCleanupExpiredSessions</code>.</p><h3 id="migration" tabindex="-1">Migration <a class="header-anchor" href="#migration" aria-hidden="true">#</a></h3><p>The new session store is of course backed by Postgres, and needs the following migration:</p><div class="language-sql"><pre><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">&quot;sessionStore&quot;</span>
<span class="token punctuation">(</span>
  <span class="token string">&quot;id&quot;</span>        uuid <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> uuid_generate_v4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&quot;checksum&quot;</span>  <span class="token keyword">varchar</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;data&quot;</span>      jsonb            <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;revokedAt&quot;</span> timestamptz      <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;createdAt&quot;</span> timestamptz      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&quot;updatedAt&quot;</span> timestamptz      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">&quot;sessionStoreToken&quot;</span>
<span class="token punctuation">(</span>
  <span class="token string">&quot;id&quot;</span>           uuid <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> uuid_generate_v4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&quot;session&quot;</span>      uuid             <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;expiresAt&quot;</span>    timestamptz      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;refreshToken&quot;</span> uuid             <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;revokedAt&quot;</span>    timestamptz      <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;createdAt&quot;</span>    timestamptz      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;sessionStoreTokenSessionFk&quot;</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token string">&quot;sessionStore&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;sessionStoreTokenRefreshTokenFk&quot;</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">&quot;refreshToken&quot;</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token string">&quot;sessionStoreToken&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> <span class="token string">&quot;sessionStoreTokenSessionIdx&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;sessionStoreToken&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> <span class="token string">&quot;sessionStoreTokenRefreshTokenIdx&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;sessionStoreToken&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;refreshToken&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="in-closing" tabindex="-1">In closing <a class="header-anchor" href="#in-closing" aria-hidden="true">#</a></h2><p>Since this is a big change, we still support <code>sessionMiddleware</code>, <code>newSessionStore</code>, etc in v0.0.172. And most likely in v0.0.173 as well, but it will be removed in a future release.</p>`,29),i=[t];function p(c,r,d,l,u,k){return n(),e("div",null,i)}var m=s(o,[["render",p]]);export{g as __pageData,m as default};
