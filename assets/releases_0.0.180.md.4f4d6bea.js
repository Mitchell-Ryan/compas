import{_ as e,c as a,o,a as t}from"./app.cf930e1c.js";const m='{"title":"Release notes v0.0.180","description":"","frontmatter":{},"headers":[{"level":2,"title":"CLI","slug":"cli"},{"level":3,"title":"Breaking changes","slug":"breaking-changes"},{"level":2,"title":"Other notable features","slug":"other-notable-features"},{"level":2,"title":"In closing","slug":"in-closing"}],"relativePath":"releases/0.0.180.md"}',s={},r=t('<h1 id="release-notes-v0-0-180" tabindex="-1">Release notes v0.0.180 <a class="header-anchor" href="#release-notes-v0-0-180" aria-hidden="true">#</a></h1><p>Quite a big release after the holiday season. Packed with features, breaking changes and the most likely bugs. Looking back at the past year of Compas features, we see a bunch of additions to existing features, making them more complete, a bunch of bug fixes, better docs and, of course, some new features. We started to promote development with the TypeScript Language Server even for JavaScript only projects. Cleaned up code generation by outputting each group in its own directory. Got an OpenAPI exporter, parallelized the test runner, added a config loader. And now start the new year fresh with a CLI refactor.</p><h2 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-hidden="true">#</a></h2><p>The CLI got quite the overhaul, with a few focus areas.</p><p><strong>Improve discovery and documentation</strong>:</p><p>The new Compas CLI is now fully explorable by using <code>compas help [...command]</code> or <code>compas [...command] --help</code>. Resulting in a list of available sub commands and a list of flags with their types and descriptions. This also allowed us to create a full <a href="/references/cli.html">CLI reference</a>.</p><p><strong>Improve command and flag parsing</strong>:</p><p>Invalid inputs are now consistently handled by the command and flag parser. Giving suggestions of available sub commands, and allowing custom validators to directly validate flag values, so we can guide the user in successfully executing the command they need.</p><p><strong>Restructure commands to be more focused</strong>:</p><p>Over time, we added quite a bunch of features. But sometimes they were not logically grouped. Take for example <code>compas docker migrate</code>. Migration doesn&#39;t have anything to do with the management of docker containers, so we refactored it in a <code>compas migrate</code>. Which also allows better documentation of the <code>--connection-settings</code> flag. Another notable change here is that <code>compas coverage</code> is now <code>compast test --coverage</code>, since it is executing in exactly the same way.</p><h3 id="breaking-changes" tabindex="-1">Breaking changes <a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a></h3><p>This is an incomplete list of breaking changes of the Compas CLI. Please verify all your usages.</p><ul><li>Implicit run of scripts is removed. So <code>compas generate</code> is now <code>compas run generate</code>. To get the old behaviour, upgrade your script to a project level CLI command via <a href="/features/extending-the-cli.html">extending the CLI</a>.</li><li>Passing arguments to scripts via <code>compas run</code> should use <code>--script-args &quot;--arg 1 --foo&quot;</code>.</li><li>Removed <code>--watch</code> completely and thus any export of <code>cliWatchOptions</code> can be removed as well. This will come back in a future version of Compas, but most likely in another format.</li><li>Migrating should be done via <code>compas migrate</code> instead of <code>compas docker migrate</code>.</li><li><code>compas docker reset</code> is removed and instead <code>compas docker clean --project</code> should be used.</li><li><code>compas coverage</code> is removed in favor of <code>compas test --coverage</code>. It also doesn&#39;t accept C8 arguments anymore. See <code>compas test --help</code> for more information.</li></ul><h2 id="other-notable-features" tabindex="-1">Other notable features <a class="header-anchor" href="#other-notable-features" aria-hidden="true">#</a></h2><p>We now support react-query@v4. It requires all (parts of) query keys to be an array. To do this, the <code>.baseKey</code> function on generated hooks now also returns an array.</p><p>The default log middleware injected by <code>getApp</code> from @compas/server, now has some options to log the event name if available. Since all communications of routes are based on the route group and name, this should make it easier to find logs about that route.</p><p>The generated query builder now uses a generator helper provided by @compas/store. This makes the generated output much cleaner, and improves the maintainability of the generator. It also migrated to use correlated sub-queries which should be as fast or even faster than the lateral joins used previously. This change is however breaking for if you used <code>execRaw</code>, so make sure to check the query output and update your code accordingly.</p><h2 id="in-closing" tabindex="-1">In closing <a class="header-anchor" href="#in-closing" aria-hidden="true">#</a></h2><p>I am quite happy with the progress last year, and in the last weeks with the new CLI. The docs are getting slowly but surely some more content, so the experience should only get better. All the best for the new year and as always, keep on generating \u{1F603}</p>',19),n=[r];function i(c,d,l,h,u,p){return o(),a("div",null,n)}var f=e(s,[["render",i]]);export{m as __pageData,f as default};
