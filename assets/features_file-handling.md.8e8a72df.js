import{_ as n,c as s,o as a,a as t}from"./app.cf930e1c.js";const g='{"title":"File handling","description":"","frontmatter":{},"headers":[{"level":2,"title":"Generated router & validators","slug":"generated-router-validators"},{"level":2,"title":"Saving files","slug":"saving-files"},{"level":3,"title":"createOrUpdateFile","slug":"createorupdatefile"},{"level":2,"title":"Securing file downloads","slug":"securing-file-downloads"}],"relativePath":"features/file-handling.md"}',p={},e=t(`<h1 id="file-handling" tabindex="-1">File handling <a class="header-anchor" href="#file-handling" aria-hidden="true">#</a></h1><p>Compas also comes with various utilities across the stack to handle files in a consistent way.</p><h2 id="generated-router-validators" tabindex="-1">Generated router &amp; validators <a class="header-anchor" href="#generated-router-validators" aria-hidden="true">#</a></h2><p>Let&#39;s start with looking at the code generators. Here we have the <code>T.file()</code> type to represent files as can be seen in the following examples:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">files</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">myFile</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/download&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Files are handled separately by the generator and validators, and are put on <code>ctx.validatedFiles</code> with help from <a href="https://www.npmjs.com/package/formidable" target="_blank" rel="noopener noreferrer">formidable</a>. In the generated api clients we generate the correct type (<code>ReadableStream</code> or <code>Blob</code>) depending on the context. And allow for setting custom file parsing options <code>createBodyParsers</code> provided by <code>@compas/server</code></p><h2 id="saving-files" tabindex="-1">Saving files <a class="header-anchor" href="#saving-files" aria-hidden="true">#</a></h2><p><code>@compas/store</code> comes with <a href="/features/postgres-and-minio.html">Postgres and minio</a> which we let work together in the various utilities for files.</p><h3 id="createorupdatefile" tabindex="-1"><code>createOrUpdateFile</code> <a class="header-anchor" href="#createorupdatefile" aria-hidden="true">#</a></h3><p>Creates a new file and stores it in both Postgres and Minio (S3). If an existing <code>id</code> is provided the file is overwritten. This function only requires a file name and the source and is able to infer <code>contentType</code> and <code>contentLength</code>. If <code>allowedContentTypes</code> is provided, an error will be thrown if the inferred content type is not one of the allowed content types.</p><p><strong>Example</strong></p><div class="language-js"><pre><code><span class="token comment">/**
 *
 * @param {InsightEvent} event
 * @param {AppSaveFileFiles} files
 * @return {Promise&lt;void&gt;}
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">appSaveFile</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">eventStart</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">&quot;app.saveFile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> <span class="token function">createOrUpdateFile</span><span class="token punctuation">(</span>
    sql<span class="token punctuation">,</span>
    minio<span class="token punctuation">,</span>
    <span class="token string">&quot;myBucket&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> files<span class="token punctuation">.</span>uploadedFile<span class="token punctuation">.</span>originalFilename <span class="token punctuation">}</span><span class="token punctuation">,</span>
    files<span class="token punctuation">.</span>uploadedFile<span class="token punctuation">.</span>filepath<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">allowedContentTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;image/png&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-sql&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">eventStop</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>Errors</strong>:</p><ul><li><code>store.createOrUpdateFile.invalidName</code> -&gt; When name is not specified.</li><li><code>store.createOrUpdateFile.invalidContentType</code> -&gt; When the content type is not one of <code>allowedContentTypes</code>.</li></ul><h2 id="securing-file-downloads" tabindex="-1">Securing file downloads <a class="header-anchor" href="#securing-file-downloads" aria-hidden="true">#</a></h2><p>In some cases you want to have private files as well, you can accomplish this by using <code>fileSignAccessToken</code> and <code>fileVerifyAccessToken</code>. When returning an image url to the client, you can add a JWT based token to the url specific for that file id, and with a short expiration date via <code>fileSignAccessToken</code>. Then, when the user requests the file, <code>fileVerifyAccessToken</code> can be used to check if the token is still valid and issued for that file id.</p><p>Let&#39;s look at a quick example;</p><p><strong>Definition</strong>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/product&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;getProduct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">publicImageUrl</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">privateAvatarUrl</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/product/public-image&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;publicImage&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/product/private-avatar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;privateAvatar&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">accessToken</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>Implementation</strong>:</p><div class="language-js"><pre><code><span class="token comment">// For the example :)</span>
<span class="token keyword">const</span> publicImageId <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> privateAvatarId <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

appController<span class="token punctuation">.</span><span class="token function-variable function">getProduct</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do user checks here, so see if the privateAvatarUrl should be added.</span>

  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">publicImageUrl</span><span class="token operator">:</span> <span class="token string">&quot;https://example.com/product/public-image&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">privateAvatarUrl</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://example.com/product/private-avatar?accessToken=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">fileSignAccessToken</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">fileId</span><span class="token operator">:</span> privateAvatarId<span class="token punctuation">,</span>
        <span class="token literal-property property">signingKey</span><span class="token operator">:</span> <span class="token string">&quot;secure key loaded from secure place&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">maxAgeInSeconds</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token comment">// User should load the image in 2 minutes</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

appController<span class="token punctuation">.</span><span class="token function-variable function">publicImage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> publicImageId <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> <span class="token function">sendFile</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> file <span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

appController<span class="token punctuation">.</span><span class="token function-variable function">privateAvatar</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> privateAvatarId <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Throws if expired or invalid</span>
  <span class="token function">fileVerifyAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">signingKey</span><span class="token operator">:</span> <span class="token string">&quot;secure key loaded from secure place&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">expectedFileId</span><span class="token operator">:</span> file<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    <span class="token literal-property property">fileAccessToken</span><span class="token operator">:</span> ctx<span class="token punctuation">.</span>validatedQuery<span class="token punctuation">.</span>accessToken<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> <span class="token function">sendFile</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> file <span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>An important note is that the tokens can&#39;t be revoked. So if you have that requirement there are two options;</p><ul><li>Keep a blacklist of tokens somewhere</li><li>Regenerate the <code>signingKey</code>, rendering all tokens invalid.</li></ul>`,23),o=[e];function c(l,u,i,r,k,d){return a(),s("div",null,o)}var h=n(p,[["render",c]]);export{g as __pageData,h as default};
