import{_ as e,c as a,o as t,a as o}from"./app.cf930e1c.js";const h='{"title":"Postgres migrations","description":"","frontmatter":{},"headers":[{"level":2,"title":"Migration files","slug":"migration-files"}],"relativePath":"features/migrations.md"}',i={},s=o(`<h1 id="postgres-migrations" tabindex="-1">Postgres migrations <a class="header-anchor" href="#postgres-migrations" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code> and <code>@compas/store</code> to be installed</p></div><h2 id="migration-files" tabindex="-1">Migration files <a class="header-anchor" href="#migration-files" aria-hidden="true">#</a></h2><p>Compas cli comes with a migration runner built-in. This is based on various migration functions exported from @compas/store. The migration system supports two types of migrations:</p><ul><li>Forward migrations</li><li>Repeatable migrations</li></ul><p>Forward migrations are a way of only advancing the schema state. So when you need to rollback a change, a new forward migration needs to be created.</p><p>Repeatable migrations can be used in combination with <code>CREATE OR REPLACE</code> with for example views. If the hash of the current repeatable migration is not equal to the last execution stored in the database, the migration is executed.</p><p>Every migration file gets a new transaction by default. To skip transaction creation, add <code>-- disable auto transaction</code> in your file.</p><p>The migrations files are expected to live in <code>$project/migrations</code> directory. The file names should be in the following format: <code>001-name.sql</code> or <code>002-r-long-name.sql</code> for repeatable migrations.</p><p>We also support JavaScript based migrations, this allows you to do conditional logic based on environment settings. A JavaScript migration file follows the same file format as sql files: <code>002-my-js-migration.js</code>. To disable automatic transactions you can use <code>// disable auto transaction</code> anywhere in the file.</p><p>The file is imported by the migration runner and expected to export the following migration function:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">migrate</span><span class="token punctuation">(</span><span class="token parameter">sql</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do migrations</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Note that it is suggested to keep the amount of differences per environment to a minimal, since it makes issues harder to debug.</p><p>See the CLI reference for <a href="/references/cli.html#compas-migrate"><code>compas migrate</code></a> for the build-in migration runner.</p>`,14),n=[s];function r(c,l,p,d,m,g){return t(),a("div",null,n)}var f=e(i,[["render",r]]);export{h as __pageData,f as default};
