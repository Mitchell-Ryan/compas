import{_ as n,c as s,o as a,a as t}from"./app.cf930e1c.js";const h='{"title":"Code generator CRUD","description":"","frontmatter":{},"headers":[{"level":2,"title":"The features","slug":"the-features"},{"level":3,"title":"Route selection:","slug":"route-selection"},{"level":3,"title":"Filters, sorting and pagination:","slug":"filters-sorting-and-pagination"},{"level":3,"title":"Inline relations","slug":"inline-relations"},{"level":3,"title":"Nested relations","slug":"nested-relations"},{"level":3,"title":"Modifiers","slug":"modifiers"},{"level":2,"title":"TODO","slug":"todo"}],"relativePath":"features/code-gen-crud.md"}',e={},o=t(`<h1 id="code-generator-crud" tabindex="-1">Code generator CRUD <a class="header-anchor" href="#code-generator-crud" aria-hidden="true">#</a></h1><p>Compas code-gen also supports generating CRUD routes. It combines the features of the <a href="/features/code-gen-api-client.html">api generator</a>, <a href="/features/code-gen-sql.html">sql generator</a> and a generated implementation of the necessary events.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code>, <code>@compas/stdlib</code>, <code>@compas/store</code> and <code>@compas/code-gen</code> to be installed.</p></div><h2 id="the-features" tabindex="-1">The features <a class="header-anchor" href="#the-features" aria-hidden="true">#</a></h2><p>CRUD generation supports quite a variety of features and combinations there of. Let&#39;s break them all down;</p><h3 id="route-selection" tabindex="-1">Route selection: <a class="header-anchor" href="#route-selection" aria-hidden="true">#</a></h3><p>Any CRUD declaration fully controls which routes are generated, by explicitly enabling them.</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token string">&quot;tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Tdatabase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Tdatabase<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">&quot;tag&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">enableQueries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">withDates</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">crud</span><span class="token punctuation">(</span><span class="token string">&quot;/tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">listRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">singleRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">createRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">updateRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">deleteRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Combining all options, it generates the following routes;</p><ul><li><code>apiTagList</code> / <code>/tag/list</code></li><li><code>apiTagSingle</code> / <code>/tag/:tagId/single</code></li><li><code>apiTagCreate</code> / <code>/tag/create</code></li><li><code>apiTagUpdate</code> / <code>/tag/:tagId/update</code></li><li><code>apiTagDelete</code> / <code>/tag/:tagId/delete</code></li></ul><h3 id="filters-sorting-and-pagination" tabindex="-1">Filters, sorting and pagination: <a class="header-anchor" href="#filters-sorting-and-pagination" aria-hidden="true">#</a></h3><p>The generated <code>list</code> route comes fully equipped with filters, sorting and pagination. The filters are a subset of the filters as supported by the query builder, ie ignoring <code>$raw</code> and <code>$or</code> to prevent SQL injection and too complex filters respectively. Sorting is also based on the current query builder behaviour where you specify the columns to be sorted on in <code>orderBy</code> and a seperated <code>orderBySpec</code> to determine the sort order for that column. And finally pagination is supported via the <code>offset</code> and <code>limit</code> params.</p><h3 id="inline-relations" tabindex="-1">Inline relations <a class="header-anchor" href="#inline-relations" aria-hidden="true">#</a></h3><p>The CRUD generator can also include inline relations in the response, but also allow creating and updating them via their respective routes. This works for both <code>oneToMany</code> relations as for the referenced side of an <code>oneToOne</code> relation. These inline relations can be added via <code>.inlineRelations()</code> like the following;</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Tdatabase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Tdatabase<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">enableQueries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">withDates</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">relations</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">oneToMany</span><span class="token punctuation">(</span><span class="token string">&quot;tags&quot;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Tdatabase<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">&quot;tag&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">enableQueries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">withDates</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">relations</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">manyToOne</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;tags&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">crud</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">listRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">createRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">updateRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">inlineRelations</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">crud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromParent</span><span class="token punctuation">(</span><span class="token string">&quot;tags&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;tag&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The above generates approximately the following type for both the read routes, like <code>apiPostList</code>, as well as for the write routes like <code>apiPostCrete</code> and <code>apiPostUpdate</code>.</p><div class="language-"><pre><code>type PostItem = {
  id: string;
  title: string,
  tags: { id: string, key: string, value: string }[]
}
</code></pre></div><p>When updating an inline relation, all existing values are first removed, before the new values are added. <code>oneToOne</code> relations are mandatory by default, but can be made optional via <code>T.crud().fromParent(...).optional()</code>. Inline relations can be nested as many times as required.</p><h3 id="nested-relations" tabindex="-1">Nested relations <a class="header-anchor" href="#nested-relations" aria-hidden="true">#</a></h3><p>The same thing as above can be done but now with <code>.nestedRelations</code>. This creates a nested route structure.</p><div class="language-js"><pre><code><span class="token comment">// Using the same Post -&gt; tags[] relation like above</span>

<span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">crud</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">listRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">singleRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">createRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">updateRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deleteRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">nestedRelations</span><span class="token punctuation">(</span>
    <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">crud</span><span class="token punctuation">(</span><span class="token string">&quot;/tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromParent</span><span class="token punctuation">(</span><span class="token string">&quot;tags&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;tag&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// Routes need to be enabled</span>
      <span class="token literal-property property">listRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">singleRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">createRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">updateRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deleteRoute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This generates the following routes:</p><ul><li><code>apiPostList</code> / <code>/post/list</code></li><li><code>apiPostSingle</code> / <code>/post/:postId/single</code></li><li><code>apiPostCreate</code> / <code>/post/create</code></li><li><code>apiPostUpdate</code> / <code>/post/:postId/update</code></li><li><code>apiPostDelete</code> / <code>/post/:postId/delete</code></li><li><code>apiPostTagList</code> / <code>/post/:postId/taglist</code></li><li><code>apiPostTagSingle</code> / <code>/post/:postId/tag/:tagId/single</code></li><li><code>apiPostTagCreate</code> / <code>/post/:postId/tag/create</code></li><li><code>apiPostTagUpdate</code> / <code>/post/:postId/tag/:tagId/update</code></li><li><code>apiPostTagDelete</code> / <code>/post/:postId/tag/:tagId/delete</code></li></ul><p>Appropriate route invalidations for react-query generator are automatically added in all cases. In case a nested relation is used with a <code>oneToOne</code> relation, the <code>list</code> route is automatically disabled, and the extra route params are removed. So <code>/post/:postId/author/:authorId/single</code> is shortened to <code>/post/:postId/author/single</code>.</p><h3 id="modifiers" tabindex="-1">Modifiers <a class="header-anchor" href="#modifiers" aria-hidden="true">#</a></h3><p>While calling <code>groupRegisterCrud</code> from the generated <code>crud.js</code> you can pass in various &#39;modifiers&#39;. These modifiers are all optional and can mutate the passed in context, resolve a user, determine access control and edit the provided &#39;builders&#39;. They are called after the static validation of params, query and body, but before executing any other logic.</p><p>All modifier functions can be async, getting an <code>event</code> as the first argument and the request <code>ctx</code> as the second. The <code>single</code>, <code>update</code> and <code>delete</code> routes also provide the used <code>builder</code> as the third argument. This way you can mutate the executed where clause to prevent unauthorized access.</p><p>The <code>list</code> route modifier passes in a <code>countBuilder</code> and a <code>listBuilder</code> as the third and fourth argument respectively. By mutating both, the total stays in sync with the returned values. Note that the result of the <code>count</code> event is used to mutate the <code>listBuilder</code> afterwards to only select the results of the current pagination result.</p><p>Another edge case is the <code>create</code> event for a nested <code>oneToOne</code> relation. It&#39;s third argument is the same builder as used in the <code>single</code> routes, for checking if the relation already the <code>oneToOne</code> field.</p><h2 id="todo" tabindex="-1">TODO <a class="header-anchor" href="#todo" aria-hidden="true">#</a></h2><ul><li>fields readable, writable</li></ul>`,31),p=[o];function c(l,u,i,r,k,d){return a(),s("div",null,p)}var f=n(e,[["render",c]]);export{h as __pageData,f as default};
